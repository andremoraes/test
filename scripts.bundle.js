webpackJsonp([3,5],{

/***/ 136:
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(278)(__webpack_require__(227))

/***/ }),

/***/ 227:
/***/ (function(module, exports) {

module.exports = "var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var beans;\n    (function (beans) {\n        /**\n         * General-purpose beans control methods. GWT only supports a limited subset of these methods. Only\n         * the documented methods are available.\n         */\n        var Beans = (function () {\n            function Beans() {\n            }\n            /**\n             * @return <code>true</code> if we are running in the design time mode.\n             */\n            Beans.isDesignTime = function () {\n                return false;\n            };\n            return Beans;\n        }());\n        beans.Beans = Beans;\n        Beans[\"__class\"] = \"java.beans.Beans\";\n    })(beans = java.beans || (java.beans = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var io;\n    (function (io) {\n        /**\n         * A readable source of bytes.\n         *\n         * <p>Most clients will use input streams that read data from the file system\n         * ({@link FileInputStream}), the network ({@link java.net.Socket#getInputStream()}/{@link\n         * java.net.HttpURLConnection#getInputStream()}), or from an in-memory byte\n         * array ({@link ByteArrayInputStream}).\n         *\n         * <p>Use {@link InputStreamReader} to adapt a byte stream like this one into a\n         * character stream.\n         *\n         * <p>Most clients should wrap their input stream with {@link\n         * BufferedInputStream}. Callers that do only bulk reads may omit buffering.\n         *\n         * <p>Some implementations support marking a position in the input stream and\n         * resetting back to this position later. Implementations that don't return\n         * false from {@link #markSupported()} and throw an {@link IOException} when\n         * {@link #reset()} is called.\n         *\n         * <h3>Subclassing InputStream</h3>\n         * Subclasses that decorate another input stream should consider subclassing\n         * {@link FilterInputStream}, which delegates all calls to the source input\n         * stream.\n         *\n         * <p>All input stream subclasses should override <strong>both</strong> {@link\n         * #read() read()} and {@link #read(byte[],int,int) read(byte[],int,int)}. The\n         * three argument overload is necessary for bulk access to the data. This is\n         * much more efficient than byte-by-byte access.\n         *\n         * @see OutputStream\n         */\n        var InputStream = (function () {\n            /**\n             * This constructor does nothing. It is provided for signature\n             * compatibility.\n             */\n            function InputStream() {\n            }\n            /**\n             * Returns an estimated number of bytes that can be read or skipped without blocking for more\n             * input.\n             *\n             * <p>Note that this method provides such a weak guarantee that it is not very useful in\n             * practice.\n             *\n             * <p>Firstly, the guarantee is \"without blocking for more input\" rather than \"without\n             * blocking\": a read may still block waiting for I/O to complete&nbsp;&mdash; the guarantee is\n             * merely that it won't have to wait indefinitely for data to be written. The result of this\n             * method should not be used as a license to do I/O on a thread that shouldn't be blocked.\n             *\n             * <p>Secondly, the result is a\n             * conservative estimate and may be significantly smaller than the actual number of bytes\n             * available. In particular, an implementation that always returns 0 would be correct.\n             * In general, callers should only use this method if they'd be satisfied with\n             * treating the result as a boolean yes or no answer to the question \"is there definitely\n             * data ready?\".\n             *\n             * <p>Thirdly, the fact that a given number of bytes is \"available\" does not guarantee that a\n             * read or skip will actually read or skip that many bytes: they may read or skip fewer.\n             *\n             * <p>It is particularly important to realize that you <i>must not</i> use this method to\n             * size a container and assume that you can read the entirety of the stream without needing\n             * to resize the container. Such callers should probably write everything they read to a\n             * {@link ByteArrayOutputStream} and convert that to a byte array. Alternatively, if you're\n             * reading from a file, {@link File#length} returns the current length of the file (though\n             * assuming the file's length can't change may be incorrect, reading a file is inherently\n             * racy).\n             *\n             * <p>The default implementation of this method in {@code InputStream} always returns 0.\n             * Subclasses should override this method if they are able to indicate the number of bytes\n             * available.\n             *\n             * @return the estimated number of bytes available\n             * @throws IOException if this stream is closed or an error occurs\n             */\n            InputStream.prototype.available = function () {\n                return 0;\n            };\n            /**\n             * Closes this stream. Concrete implementations of this class should free\n             * any resources during close. This implementation does nothing.\n             *\n             * @throws IOException\n             * if an error occurs while closing this stream.\n             */\n            InputStream.prototype.close = function () {\n            };\n            /**\n             * Sets a mark position in this InputStream. The parameter {@code readlimit}\n             * indicates how many bytes can be read before the mark is invalidated.\n             * Sending {@code reset()} will reposition the stream back to the marked\n             * position provided {@code readLimit} has not been surpassed.\n             * <p>\n             * This default implementation does nothing and concrete subclasses must\n             * provide their own implementation.\n             *\n             * @param readlimit\n             * the number of bytes that can be read from this stream before\n             * the mark is invalidated.\n             * @see #markSupported()\n             * @see #reset()\n             */\n            InputStream.prototype.mark = function (readlimit) {\n            };\n            /**\n             * Indicates whether this stream supports the {@code mark()} and\n             * {@code reset()} methods. The default implementation returns {@code false}.\n             *\n             * @return always {@code false}.\n             * @see #mark(int)\n             * @see #reset()\n             */\n            InputStream.prototype.markSupported = function () {\n                return false;\n            };\n            /**\n             * Reads a single byte from this stream and returns it as an integer in the\n             * range from 0 to 255. Returns -1 if the end of the stream has been\n             * reached. Blocks until one byte has been read, the end of the source\n             * stream is detected or an exception is thrown.\n             *\n             * @throws IOException\n             * if the stream is closed or another IOException occurs.\n             */\n            InputStream.prototype.read$ = function () { throw new Error('cannot invoke abstract overloaded method... check your argument(s) type(s)'); };\n            /**\n             * Equivalent to {@code read(buffer, 0, buffer.length)}.\n             */\n            InputStream.prototype.read$byte_A = function (buffer) {\n                javaemul.internal.InternalPreconditions.checkNotNull(buffer);\n                return this.read(buffer, 0, buffer.length);\n            };\n            /**\n             * Reads up to {@code byteCount} bytes from this stream and stores them in\n             * the byte array {@code buffer} starting at {@code byteOffset}.\n             * Returns the number of bytes actually read or -1 if the end of the stream\n             * has been reached.\n             *\n             * @throws IndexOutOfBoundsException\n             * if {@code byteOffset < 0 || byteCount < 0 || byteOffset + byteCount > buffer.length}.\n             * @throws IOException\n             * if the stream is closed or another IOException occurs.\n             */\n            InputStream.prototype.read = function (buffer, byteOffset, byteCount) {\n                var _this = this;\n                if (((buffer != null && buffer instanceof Array) || buffer === null) && ((typeof byteOffset === 'number') || byteOffset === null) && ((typeof byteCount === 'number') || byteCount === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        java.io.IOUtils.checkOffsetAndCount(buffer, byteOffset, byteCount);\n                        for (var i = 0; i < byteCount; ++i) {\n                            var c = void 0;\n                            try {\n                                if ((c = _this.read()) === -1) {\n                                    return i === 0 ? -1 : i;\n                                }\n                            }\n                            catch (e) {\n                                if (i !== 0) {\n                                    return i;\n                                }\n                                throw e;\n                            }\n                            ;\n                            buffer[byteOffset + i] = (c | 0);\n                        }\n                        return byteCount;\n                    })();\n                }\n                else if (((buffer != null && buffer instanceof Array) || buffer === null) && byteOffset === undefined && byteCount === undefined) {\n                    return this.read$byte_A(buffer);\n                }\n                else if (buffer === undefined && byteOffset === undefined && byteCount === undefined) {\n                    return this.read$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Resets this stream to the last marked location. Throws an\n             * {@code IOException} if the number of bytes read since the mark has been\n             * set is greater than the limit provided to {@code mark}, or if no mark\n             * has been set.\n             * <p>\n             * This implementation always throws an {@code IOException} and concrete\n             * subclasses should provide the proper implementation.\n             *\n             * @throws IOException\n             * if this stream is closed or another IOException occurs.\n             */\n            InputStream.prototype.reset = function () {\n                throw new java.io.IOException();\n            };\n            /**\n             * Skips at most {@code byteCount} bytes in this stream. The number of actual\n             * bytes skipped may be anywhere between 0 and {@code byteCount}. If\n             * {@code byteCount} is negative, this method does nothing and returns 0, but\n             * some subclasses may throw.\n             *\n             * <p>Note the \"at most\" in the description of this method: this method may\n             * choose to skip fewer bytes than requested. Callers should <i>always</i>\n             * check the return value.\n             *\n             * <p>This default implementation reads bytes into a temporary buffer. Concrete\n             * subclasses should provide their own implementation.\n             *\n             * @return the number of bytes actually skipped.\n             * @throws IOException if this stream is closed or another IOException\n             * occurs.\n             */\n            InputStream.prototype.skip = function (byteCount) {\n                if (byteCount <= 0) {\n                    return 0;\n                }\n                var bSize = (Math.min(InputStream.MAX_SKIP_BUFFER_SIZE, byteCount) | 0);\n                var b = new Array(bSize);\n                var skipped = 0;\n                while ((skipped < byteCount)) {\n                    var toRead = (Math.min(byteCount - skipped, b.length) | 0);\n                    var readCount = this.read(b, 0, toRead);\n                    if (readCount === -1) {\n                        break;\n                    }\n                    skipped += readCount;\n                    if (readCount < toRead) {\n                        break;\n                    }\n                }\n                ;\n                return skipped;\n            };\n            /**\n             * Size of the temporary buffer used when skipping bytes with {@link skip(long)}.\n             */\n            InputStream.MAX_SKIP_BUFFER_SIZE = 4096;\n            return InputStream;\n        }());\n        io.InputStream = InputStream;\n        InputStream[\"__class\"] = \"java.io.InputStream\";\n        InputStream[\"__interfaces\"] = [\"java.io.Closeable\", \"java.lang.AutoCloseable\"];\n    })(io = java.io || (java.io = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var io;\n    (function (io) {\n        /**\n         * Provides a series of utilities to be reused between IO classes.\n         *\n         * TODO(chehayeb): move these checks to InternalPreconditions.\n         */\n        var IOUtils = (function () {\n            function IOUtils() {\n            }\n            /**\n             * Validates the offset and the byte count for the given array of bytes.\n             *\n             * @param buffer Array of bytes to be checked.\n             * @param byteOffset Starting offset in the array.\n             * @param byteCount Total number of bytes to be accessed.\n             * @throws NullPointerException if the given reference to the buffer is null.\n             * @throws IndexOutOfBoundsException if {@code byteOffset} is negative, {@code byteCount} is\n             * negative or their sum exceeds the buffer length.\n             */\n            IOUtils.checkOffsetAndCount = function (buffer, byteOffset, byteCount) {\n                if (((buffer != null && buffer instanceof Array) || buffer === null) && ((typeof byteOffset === 'number') || byteOffset === null) && ((typeof byteCount === 'number') || byteCount === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        javaemul.internal.InternalPreconditions.checkNotNull(buffer);\n                        IOUtils.checkOffsetAndCount(buffer.length, byteOffset, byteCount);\n                    })();\n                }\n                else if (((buffer != null && buffer instanceof Array) || buffer === null) && ((typeof byteOffset === 'number') || byteOffset === null) && ((typeof byteCount === 'number') || byteCount === null)) {\n                    return java.io.IOUtils.checkOffsetAndCount$char_A$int$int(buffer, byteOffset, byteCount);\n                }\n                else if (((typeof buffer === 'number') || buffer === null) && ((typeof byteOffset === 'number') || byteOffset === null) && ((typeof byteCount === 'number') || byteCount === null)) {\n                    return java.io.IOUtils.checkOffsetAndCount$int$int$int(buffer, byteOffset, byteCount);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Validates the offset and the byte count for the given array of characters.\n             *\n             * @param buffer Array of characters to be checked.\n             * @param charOffset Starting offset in the array.\n             * @param charCount Total number of characters to be accessed.\n             * @throws NullPointerException if the given reference to the buffer is null.\n             * @throws IndexOutOfBoundsException if {@code charOffset} is negative, {@code charCount} is\n             * negative or their sum exceeds the buffer length.\n             */\n            IOUtils.checkOffsetAndCount$char_A$int$int = function (buffer, charOffset, charCount) {\n                javaemul.internal.InternalPreconditions.checkNotNull(buffer);\n                IOUtils.checkOffsetAndCount(buffer.length, charOffset, charCount);\n            };\n            /**\n             * Validates the offset and the byte count for the given array length.\n             *\n             * @param length Length of the array to be checked.\n             * @param offset Starting offset in the array.\n             * @param count Total number of elements to be accessed.\n             * @throws IndexOutOfBoundsException if {@code offset} is negative, {@code count} is negative or\n             * their sum exceeds the given {@code length}.\n             */\n            IOUtils.checkOffsetAndCount$int$int$int = function (length, offset, count) {\n                if ((offset < 0) || (count < 0) || ((offset + count) > length)) {\n                    throw new java.lang.IndexOutOfBoundsException();\n                }\n            };\n            return IOUtils;\n        }());\n        io.IOUtils = IOUtils;\n        IOUtils[\"__class\"] = \"java.io.IOUtils\";\n    })(io = java.io || (java.io = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var io;\n    (function (io) {\n        /**\n         * A writable sink for bytes.\n         *\n         * <p>Most clients will use output streams that write data to the file system\n         * ({@link FileOutputStream}), the network ({@link java.net.Socket#getOutputStream()}/{@link\n         * java.net.HttpURLConnection#getOutputStream()}), or to an in-memory byte array\n         * ({@link ByteArrayOutputStream}).\n         *\n         * <p>Use {@link OutputStreamWriter} to adapt a byte stream like this one into a\n         * character stream.\n         *\n         * <p>Most clients should wrap their output stream with {@link\n         * BufferedOutputStream}. Callers that do only bulk writes may omit buffering.\n         *\n         * <h3>Subclassing OutputStream</h3>\n         * Subclasses that decorate another output stream should consider subclassing\n         * {@link FilterOutputStream}, which delegates all calls to the target output\n         * stream.\n         *\n         * <p>All output stream subclasses should override <strong>both</strong> {@link\n         * #write(int)} and {@link #write(byte[],int,int) write(byte[],int,int)}. The\n         * three argument overload is necessary for bulk access to the data. This is\n         * much more efficient than byte-by-byte access.\n         *\n         * @see InputStream\n         *\n         * <p>The implementation provided by this class behaves as described in the Java\n         * API documentation except for {@link write(int)} which throws an exception of\n         * type {@link java.lang.UnsupportedOperationException} instead of being\n         * abstract.\n         */\n        var OutputStream = (function () {\n            /**\n             * Default constructor.\n             */\n            function OutputStream() {\n            }\n            /**\n             * Closes this stream. Implementations of this method should free any\n             * resources used by the stream. This implementation does nothing.\n             *\n             * @throws IOException\n             * if an error occurs while closing this stream.\n             */\n            OutputStream.prototype.close = function () {\n            };\n            /**\n             * Flushes this stream. Implementations of this method should ensure that\n             * any buffered data is written out. This implementation does nothing.\n             *\n             * @throws IOException\n             * if an error occurs while flushing this stream.\n             */\n            OutputStream.prototype.flush = function () {\n            };\n            /**\n             * Equivalent to {@code write(buffer, 0, buffer.length)}.\n             */\n            OutputStream.prototype.write$byte_A = function (buffer) {\n                javaemul.internal.InternalPreconditions.checkNotNull(buffer);\n                this.write(buffer, 0, buffer.length);\n            };\n            /**\n             * Writes {@code count} bytes from the byte array {@code buffer} starting at\n             * position {@code offset} to this stream.\n             *\n             * @param buffer\n             * the buffer to be written.\n             * @param offset\n             * the start position in {@code buffer} from where to get bytes.\n             * @param count\n             * the number of bytes from {@code buffer} to write to this\n             * stream.\n             * @throws IOException\n             * if an error occurs while writing to this stream.\n             * @throws IndexOutOfBoundsException\n             * if {@code offset < 0} or {@code count < 0}, or if\n             * {@code offset + count} is bigger than the length of\n             * {@code buffer}.\n             */\n            OutputStream.prototype.write = function (buffer, offset, count) {\n                var _this = this;\n                if (((buffer != null && buffer instanceof Array) || buffer === null) && ((typeof offset === 'number') || offset === null) && ((typeof count === 'number') || count === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        java.io.IOUtils.checkOffsetAndCount(buffer, offset, count);\n                        for (var i = offset; i < offset + count; i++) {\n                            _this.write(buffer[i]);\n                        }\n                    })();\n                }\n                else if (((buffer != null && buffer instanceof Array) || buffer === null) && offset === undefined && count === undefined) {\n                    return this.write$byte_A(buffer);\n                }\n                else if (((typeof buffer === 'number') || buffer === null) && offset === undefined && count === undefined) {\n                    return this.write$int(buffer);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Writes a single byte to this stream. Only the least significant byte of\n             * the integer {@code oneByte} is written to the stream.\n             *\n             * @param oneByte\n             * the byte to be written.\n             * @throws IOException\n             * if an error occurs while writing to this stream.\n             */\n            OutputStream.prototype.write$int = function (oneByte) { throw new Error('cannot invoke abstract overloaded method... check your argument(s) type(s)'); };\n            return OutputStream;\n        }());\n        io.OutputStream = OutputStream;\n        OutputStream[\"__class\"] = \"java.io.OutputStream\";\n        OutputStream[\"__interfaces\"] = [\"java.io.Closeable\", \"java.lang.AutoCloseable\", \"java.io.Flushable\"];\n    })(io = java.io || (java.io = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var io;\n    (function (io) {\n        /**\n         * JSweet implementation.\n         */\n        var Reader = (function () {\n            function Reader(lock) {\n                var _this = this;\n                /**\n                 * Skip buffer, null until allocated\n                 */\n                this.skipBuffer = null;\n                if (((lock != null) || lock === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    this.skipBuffer = null;\n                    (function () {\n                        if (lock == null) {\n                            throw new java.lang.NullPointerException();\n                        }\n                        _this.lock = lock;\n                    })();\n                }\n                else if (lock === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    this.skipBuffer = null;\n                    (function () {\n                        _this.lock = _this;\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            Reader.prototype.read$ = function () {\n                var cb = new Array(1);\n                if (this.read(cb, 0, 1) === -1)\n                    return -1;\n                else\n                    return (cb[0]).charCodeAt(0);\n            };\n            Reader.prototype.read$char_A = function (cbuf) {\n                return this.read(cbuf, 0, cbuf.length);\n            };\n            Reader.prototype.read = function (cbuf, off, len) {\n                if (((cbuf != null && cbuf instanceof Array) || cbuf === null) && ((typeof off === 'number') || off === null) && ((typeof len === 'number') || len === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return 0;\n                }\n                else if (((cbuf != null && cbuf instanceof Array) || cbuf === null) && off === undefined && len === undefined) {\n                    return this.read$char_A(cbuf);\n                }\n                else if (cbuf === undefined && off === undefined && len === undefined) {\n                    return this.read$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Reader.prototype.skip = function (n) {\n                if (n < 0)\n                    throw new java.lang.IllegalArgumentException(\"skip value is negative\");\n                var nn = (Math.min(n, Reader.maxSkipBufferSize) | 0);\n                if ((this.skipBuffer == null) || (this.skipBuffer.length < nn))\n                    this.skipBuffer = new Array(nn);\n                var r = n;\n                while ((r > 0)) {\n                    var nc = this.read(this.skipBuffer, 0, (Math.min(r, nn) | 0));\n                    if (nc === -1)\n                        break;\n                    r -= nc;\n                }\n                ;\n                return n - r;\n            };\n            Reader.prototype.ready = function () {\n                return false;\n            };\n            Reader.prototype.markSupported = function () {\n                return false;\n            };\n            Reader.prototype.mark = function (readAheadLimit) {\n                throw new java.io.IOException(\"mark() not supported\");\n            };\n            Reader.prototype.reset = function () {\n                throw new java.io.IOException(\"reset() not supported\");\n            };\n            /**\n             * Maximum skip-buffer size\n             */\n            Reader.maxSkipBufferSize = 8192;\n            return Reader;\n        }());\n        io.Reader = Reader;\n        Reader[\"__class\"] = \"java.io.Reader\";\n        Reader[\"__interfaces\"] = [\"java.io.Closeable\", \"java.lang.AutoCloseable\"];\n    })(io = java.io || (java.io = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var io;\n    (function (io) {\n        /**\n         * JSweet implementation.\n         */\n        var Writer = (function () {\n            function Writer(lock) {\n                var _this = this;\n                if (((lock != null) || lock === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    (function () {\n                        if (lock == null) {\n                            throw new java.lang.NullPointerException();\n                        }\n                        _this.lock = lock;\n                    })();\n                }\n                else if (lock === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    (function () {\n                        _this.lock = _this;\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            Writer.prototype.write$int = function (c) {\n                {\n                    if (this.writeBuffer == null) {\n                        this.writeBuffer = new Array(Writer.WRITE_BUFFER_SIZE);\n                    }\n                    this.writeBuffer[0] = String.fromCharCode(c);\n                    this.write(this.writeBuffer, 0, 1);\n                }\n                ;\n            };\n            Writer.prototype.write$char_A = function (cbuf) {\n                this.write(cbuf, 0, cbuf.length);\n            };\n            Writer.prototype.write$char_A$int$int = function (cbuf, off, len) { throw new Error('cannot invoke abstract overloaded method... check your argument(s) type(s)'); };\n            Writer.prototype.write$java_lang_String = function (str) {\n                this.write(str, 0, str.length);\n            };\n            Writer.prototype.write = function (str, off, len) {\n                var _this = this;\n                if (((typeof str === 'string') || str === null) && ((typeof off === 'number') || off === null) && ((typeof len === 'number') || len === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        {\n                            var cbuf = void 0;\n                            if (len <= Writer.WRITE_BUFFER_SIZE) {\n                                if (_this.writeBuffer == null) {\n                                    _this.writeBuffer = new Array(Writer.WRITE_BUFFER_SIZE);\n                                }\n                                cbuf = _this.writeBuffer;\n                            }\n                            else {\n                                cbuf = new Array(len);\n                            }\n                            str.getChars(off, (off + len), cbuf, 0);\n                            _this.write(cbuf, 0, len);\n                        }\n                        ;\n                    })();\n                }\n                else if (((str != null && str instanceof Array) || str === null) && ((typeof off === 'number') || off === null) && ((typeof len === 'number') || len === null)) {\n                    return this.write$char_A$int$int(str, off, len);\n                }\n                else if (((str != null && str instanceof Array) || str === null) && off === undefined && len === undefined) {\n                    return this.write$char_A(str);\n                }\n                else if (((typeof str === 'string') || str === null) && off === undefined && len === undefined) {\n                    return this.write$java_lang_String(str);\n                }\n                else if (((typeof str === 'number') || str === null) && off === undefined && len === undefined) {\n                    return this.write$int(str);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Writer.prototype.append$java_lang_CharSequence = function (csq) {\n                if (csq == null)\n                    this.write(\"null\");\n                else\n                    this.write(csq.toString());\n                return this;\n            };\n            Writer.prototype.append = function (csq, start, end) {\n                var _this = this;\n                if (((csq != null && (csq[\"__interfaces\"] != null && csq[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || csq.constructor != null && csq.constructor[\"__interfaces\"] != null && csq.constructor[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || typeof csq === \"string\")) || csq === null) && ((typeof start === 'number') || start === null) && ((typeof end === 'number') || end === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var cs = (csq == null ? \"null\" : csq);\n                        _this.write(/* subSequence */ cs.substring(start, end).toString());\n                        return _this;\n                    })();\n                }\n                else if (((csq != null && (csq[\"__interfaces\"] != null && csq[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || csq.constructor != null && csq.constructor[\"__interfaces\"] != null && csq.constructor[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || typeof csq === \"string\")) || csq === null) && start === undefined && end === undefined) {\n                    return this.append$java_lang_CharSequence(csq);\n                }\n                else if (((typeof csq === 'string') || csq === null) && start === undefined && end === undefined) {\n                    return this.append$char(csq);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Writer.prototype.append$char = function (c) {\n                this.write((c).charCodeAt(0));\n                return this;\n            };\n            Writer.WRITE_BUFFER_SIZE = 1024;\n            return Writer;\n        }());\n        io.Writer = Writer;\n        Writer[\"__class\"] = \"java.io.Writer\";\n        Writer[\"__interfaces\"] = [\"java.lang.Appendable\", \"java.io.Closeable\", \"java.lang.AutoCloseable\", \"java.io.Flushable\"];\n    })(io = java.io || (java.io = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * A base class to share implementation between {@link StringBuffer} and {@link StringBuilder}.\n         * <p>\n         * Most methods will give expected performance results. Exception is {@link #setCharAt(int, char)},\n         * which is O(n), and thus should not be used many times on the same <code>StringBuffer</code>.\n         */\n        var AbstractStringBuilder = (function () {\n            function AbstractStringBuilder(string) {\n                this.string = string;\n            }\n            AbstractStringBuilder.prototype.length = function () {\n                return this.string.length;\n            };\n            AbstractStringBuilder.prototype.setLength = function (newLength) {\n                var oldLength = this.length();\n                if (newLength < oldLength) {\n                    this.string = this.string.substring(0, newLength);\n                }\n                else if (newLength > oldLength) {\n                    this.string += new String(new Array(newLength - oldLength)).toString();\n                }\n            };\n            AbstractStringBuilder.prototype.capacity = function () {\n                return javaemul.internal.IntegerHelper.MAX_VALUE;\n            };\n            AbstractStringBuilder.prototype.ensureCapacity = function (ignoredCapacity) {\n            };\n            AbstractStringBuilder.prototype.trimToSize = function () {\n            };\n            AbstractStringBuilder.prototype.charAt = function (index) {\n                return this.string.charAt(index);\n            };\n            AbstractStringBuilder.prototype.getChars = function (srcStart, srcEnd, dst, dstStart) {\n                javaemul.internal.InternalPreconditions.checkStringBounds(srcStart, srcEnd, this.length());\n                javaemul.internal.InternalPreconditions.checkStringBounds(dstStart, dstStart + (srcEnd - srcStart), dst.length);\n                while ((srcStart < srcEnd)) {\n                    dst[dstStart++] = this.string.charAt(srcStart++);\n                }\n                ;\n            };\n            /**\n             * Warning! This method is <b>much</b> slower than the JRE implementation. If you need to do\n             * character level manipulation, you are strongly advised to use a char[] directly.\n             */\n            AbstractStringBuilder.prototype.setCharAt = function (index, x) {\n                this.replace0(index, index + 1, /* valueOf */ new String(x).toString());\n            };\n            AbstractStringBuilder.prototype.subSequence = function (start, end) {\n                return this.string.substring(start, end);\n            };\n            AbstractStringBuilder.prototype.substring$int = function (begin) {\n                return this.string.substring(begin);\n            };\n            AbstractStringBuilder.prototype.substring = function (begin, end) {\n                var _this = this;\n                if (((typeof begin === 'number') || begin === null) && ((typeof end === 'number') || end === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return _this.string.substring(begin, end);\n                    })();\n                }\n                else if (((typeof begin === 'number') || begin === null) && end === undefined) {\n                    return this.substring$int(begin);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractStringBuilder.prototype.indexOf$java_lang_String = function (x) {\n                return this.string.indexOf(x);\n            };\n            AbstractStringBuilder.prototype.indexOf = function (x, start) {\n                var _this = this;\n                if (((typeof x === 'string') || x === null) && ((typeof start === 'number') || start === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return _this.string.indexOf(x, start);\n                    })();\n                }\n                else if (((typeof x === 'string') || x === null) && start === undefined) {\n                    return this.indexOf$java_lang_String(x);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractStringBuilder.prototype.lastIndexOf$java_lang_String = function (s) {\n                return this.string.lastIndexOf(s);\n            };\n            AbstractStringBuilder.prototype.lastIndexOf = function (s, start) {\n                var _this = this;\n                if (((typeof s === 'string') || s === null) && ((typeof start === 'number') || start === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return _this.string.lastIndexOf(s, start);\n                    })();\n                }\n                else if (((typeof s === 'string') || s === null) && start === undefined) {\n                    return this.lastIndexOf$java_lang_String(s);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractStringBuilder.prototype.toString = function () {\n                return this.string;\n            };\n            AbstractStringBuilder.prototype.append0 = function (x, start, end) {\n                if (x == null) {\n                    x = \"null\";\n                }\n                this.string += x.substring(start, end);\n            };\n            AbstractStringBuilder.prototype.appendCodePoint0 = function (x) {\n                this.string += new String(/* toChars */ String.fromCharCode(x)).toString();\n            };\n            AbstractStringBuilder.prototype.replace0 = function (start, end, toInsert) {\n                this.string = this.string.substring(0, start) + toInsert + this.string.substring(end);\n            };\n            AbstractStringBuilder.prototype.reverse0 = function () {\n                var length = this.string.length;\n                if (length <= 1) {\n                    return;\n                }\n                var buffer = new Array(length);\n                buffer[0] = this.string.charAt(length - 1);\n                for (var i = 1; i < length; i++) {\n                    buffer[i] = this.string.charAt(length - 1 - i);\n                    if (javaemul.internal.CharacterHelper.isSurrogatePair(buffer[i], buffer[i - 1])) {\n                        AbstractStringBuilder.swap(buffer, i - 1, i);\n                    }\n                }\n                this.string = new String(buffer);\n            };\n            AbstractStringBuilder.swap = function (buffer, f, s) {\n                var tmp = buffer[f];\n                buffer[f] = buffer[s];\n                buffer[s] = tmp;\n            };\n            return AbstractStringBuilder;\n        }());\n        lang.AbstractStringBuilder = AbstractStringBuilder;\n        AbstractStringBuilder[\"__class\"] = \"java.lang.AbstractStringBuilder\";\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        var annotation;\n        (function (annotation) {\n            /**\n             * Indicates the annotation parser determined the annotation was malformed when\n             * reading from the class file <a\n             * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/annotation/AnnotationFormatError.html\">[Sun\n             * docs]</a>.\n             */\n            var AnnotationFormatError = (function (_super) {\n                __extends(AnnotationFormatError, _super);\n                function AnnotationFormatError() {\n                    _super.call(this);\n                }\n                return AnnotationFormatError;\n            }(Error));\n            annotation.AnnotationFormatError = AnnotationFormatError;\n            AnnotationFormatError[\"__class\"] = \"java.lang.annotation.AnnotationFormatError\";\n            AnnotationFormatError[\"__interfaces\"] = [\"java.io.Serializable\"];\n        })(annotation = lang.annotation || (lang.annotation = {}));\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        var annotation;\n        (function (annotation) {\n            /**\n             * Enumerates types of declared elements in a Java program <a\n             * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/annotation/ElementType.html\">[Sun\n             * docs]</a>.\n             */\n            (function (ElementType) {\n                ElementType[ElementType[\"ANNOTATION_TYPE\"] = 0] = \"ANNOTATION_TYPE\";\n                ElementType[ElementType[\"CONSTRUCTOR\"] = 1] = \"CONSTRUCTOR\";\n                ElementType[ElementType[\"FIELD\"] = 2] = \"FIELD\";\n                ElementType[ElementType[\"LOCAL_VARIABLE\"] = 3] = \"LOCAL_VARIABLE\";\n                ElementType[ElementType[\"METHOD\"] = 4] = \"METHOD\";\n                ElementType[ElementType[\"PACKAGE\"] = 5] = \"PACKAGE\";\n                ElementType[ElementType[\"PARAMETER\"] = 6] = \"PARAMETER\";\n                ElementType[ElementType[\"TYPE\"] = 7] = \"TYPE\";\n            })(annotation.ElementType || (annotation.ElementType = {}));\n            var ElementType = annotation.ElementType;\n        })(annotation = lang.annotation || (lang.annotation = {}));\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        var annotation;\n        (function (annotation) {\n            /**\n             * Enumerates annotation retention policies <a\n             * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/annotation/RetentionPolicy.html\">[Sun\n             * docs]</a>.\n             */\n            (function (RetentionPolicy) {\n                RetentionPolicy[RetentionPolicy[\"CLASS\"] = 0] = \"CLASS\";\n                RetentionPolicy[RetentionPolicy[\"RUNTIME\"] = 1] = \"RUNTIME\";\n                RetentionPolicy[RetentionPolicy[\"SOURCE\"] = 2] = \"SOURCE\";\n            })(annotation.RetentionPolicy || (annotation.RetentionPolicy = {}));\n            var RetentionPolicy = annotation.RetentionPolicy;\n        })(annotation = lang.annotation || (lang.annotation = {}));\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * Represents an error caused by an assertion failure.\n         */\n        var AssertionError = (function (_super) {\n            __extends(AssertionError, _super);\n            function AssertionError(message, cause) {\n                if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof Error) || cause === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (((typeof message === 'string') || message === null) && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (((typeof message === 'boolean') || message === null) && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    {\n                        var __args_1 = Array.prototype.slice.call(arguments);\n                        var message_1 = new String(__args_1[0]).toString();\n                        _super.call(this, /* valueOf */ new String(message_1).toString());\n                        this.message = new String(message_1).toString();\n                    }\n                }\n                else if (((typeof message === 'string') || message === null) && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    {\n                        var __args_2 = Array.prototype.slice.call(arguments);\n                        var message_2 = new String(__args_2[0]).toString();\n                        _super.call(this, /* valueOf */ new String(message_2).toString());\n                        this.message = new String(message_2).toString();\n                    }\n                }\n                else if (((typeof message === 'number') || message === null) && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    {\n                        var __args_3 = Array.prototype.slice.call(arguments);\n                        var message_3 = new String(__args_3[0]).toString();\n                        _super.call(this, /* valueOf */ new String(message_3).toString());\n                        this.message = new String(message_3).toString();\n                    }\n                }\n                else if (((typeof message === 'number') || message === null) && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    {\n                        var __args_4 = Array.prototype.slice.call(arguments);\n                        var message_4 = new String(__args_4[0]).toString();\n                        _super.call(this, /* valueOf */ new String(message_4).toString());\n                        this.message = new String(message_4).toString();\n                    }\n                }\n                else if (((typeof message === 'number') || message === null) && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    {\n                        var __args_5 = Array.prototype.slice.call(arguments);\n                        var message_5 = new String(__args_5[0]).toString();\n                        _super.call(this, /* valueOf */ new String(message_5).toString());\n                        this.message = new String(message_5).toString();\n                    }\n                }\n                else if (((typeof message === 'number') || message === null) && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    {\n                        var __args_6 = Array.prototype.slice.call(arguments);\n                        var message_6 = new String(__args_6[0]).toString();\n                        _super.call(this, /* valueOf */ new String(message_6).toString());\n                        this.message = new String(message_6).toString();\n                    }\n                }\n                else if (((message != null) || message === null) && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, /* valueOf */ new String(message).toString());\n                    this.message = new String(message).toString();\n                }\n                else if (message === undefined && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return AssertionError;\n        }(Error));\n        lang.AssertionError = AssertionError;\n        AssertionError[\"__class\"] = \"java.lang.AssertionError\";\n        AssertionError[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * Generally unsupported. This class is provided so that the GWT compiler can\n         * choke down class literal references.\n         * <p>\n         * NOTE: The code in this class is very sensitive and should keep its\n         * dependencies upon other classes to a minimum.\n         *\n         * @param <T>\n         * the type of the object\n         */\n        var Class = (function () {\n            /**\n             * Not publicly instantiable.\n             *\n             * @skip\n             */\n            function Class() {\n                this.sequentialId = Class.nextSequentialId++;\n                this.modifiers = 0;\n                this.typeName = null;\n                this.simpleName = null;\n                this.packageName = null;\n                this.compoundName = null;\n                this.canonicalName = null;\n                this.typeId = null;\n                this.arrayLiterals = null;\n            }\n            Class.constructors_$LI$ = function () { if (Class.constructors == null)\n                Class.constructors = new Array(); return Class.constructors; };\n            ;\n            Class.classes_$LI$ = function () { if (Class.classes == null)\n                Class.classes = new Array(); return Class.classes; };\n            ;\n            Class.getConstructorForClass = function (clazz) {\n                var index = (Class.classes_$LI$().indexOf(clazz) | 0);\n                return index === -1 ? null : Class.constructors_$LI$()[index];\n            };\n            Class.getClassForConstructor = function (constructor) {\n                var index = (Class.constructors_$LI$().indexOf(constructor) | 0);\n                return index === -1 ? null : Class.classes_$LI$()[index];\n            };\n            Class.mapConstructorToClass = function (constructor, clazz) {\n                Class.constructors_$LI$().push(constructor);\n                Class.classes_$LI$().push(clazz);\n            };\n            /**\n             * Create a Class object for an array.\n             * <p>\n             *\n             * Arrays are not registered in the prototype table and get the class\n             * literal explicitly at construction.\n             * <p>\n             */\n            Class.getClassLiteralForArray = function (leafClass, dimensions) {\n                var arrayLiterals = leafClass.arrayLiterals = leafClass.arrayLiterals == null ? new Array(0) : leafClass.arrayLiterals;\n                return arrayLiterals[dimensions] != null ? arrayLiterals[dimensions] : (arrayLiterals[dimensions] = leafClass.createClassLiteralForArray(dimensions));\n            };\n            Class.prototype.createClassLiteralForArray = function (dimensions) {\n                var clazz = (new java.lang.Class());\n                clazz.modifiers = Class.ARRAY;\n                clazz.superclass = Object;\n                if (dimensions > 1) {\n                    clazz.componentType = Class.getClassLiteralForArray(this, dimensions - 1);\n                }\n                else {\n                    clazz.componentType = this;\n                }\n                return clazz;\n            };\n            /**\n             * Create a Class object for a class.\n             *\n             * @skip\n             */\n            Class.createForClass = function (packageName, compoundClassName, typeId, superclass) {\n                var clazz = Class.createClassObject(packageName, compoundClassName, typeId);\n                clazz.superclass = superclass;\n                return clazz;\n            };\n            /**\n             * Create a Class object for an enum.\n             *\n             * @skip\n             */\n            Class.createForEnum = function (packageName, compoundClassName, typeId, superclass, enumConstantsFunc, enumValueOfFunc) {\n                var clazz = Class.createClassObject(packageName, compoundClassName, typeId);\n                clazz.modifiers = (enumConstantsFunc != null) ? Class.ENUM : 0;\n                clazz.superclass = clazz.enumSuperclass = superclass;\n                clazz.enumConstantsFunc = enumConstantsFunc;\n                clazz.enumValueOfFunc = enumValueOfFunc;\n                return clazz;\n            };\n            /**\n             * Create a Class object for an interface.\n             *\n             * @skip\n             */\n            Class.createForInterface = function (packageName, compoundClassName) {\n                var clazz = Class.createClassObject(packageName, compoundClassName, null);\n                clazz.modifiers = Class.INTERFACE;\n                return clazz;\n            };\n            /**\n             * Create a Class object for a primitive.\n             *\n             * @skip\n             */\n            Class.createForPrimitive = function (className, primitiveTypeId) {\n                var clazz = Class.createClassObject(\"\", className, primitiveTypeId);\n                clazz.modifiers = Class.PRIMITIVE;\n                return clazz;\n            };\n            /**\n             * Used by {@link WebModePayloadSink} to create uninitialized instances.\n             */\n            Class.getPrototypeForClass = function (clazz) {\n                if (clazz.isPrimitive()) {\n                    return null;\n                }\n                return Class.getConstructorForClass(clazz).prototype;\n            };\n            /**\n             * Creates the class object for a type and initiliazes its fields.\n             */\n            Class.createClassObject = function (packageName, compoundClassName, typeId) {\n                var clazz = (new java.lang.Class());\n                clazz.packageName = packageName;\n                clazz.compoundName = compoundClassName;\n                return clazz;\n            };\n            /**\n             * Initiliazes {@code clazz} names from metadata.\n             * <p>\n             * Written in JSNI to minimize dependencies (on String.+).\n             */\n            Class.initializeNames = function (clazz) {\n                if (clazz.isArray()) {\n                    var componentType = clazz.componentType;\n                    if (componentType.isPrimitive()) {\n                        clazz.typeName = \"[\" + componentType.typeId;\n                    }\n                    else if (!componentType.isArray()) {\n                        clazz.typeName = \"[L\" + (function (c) { return c[\"__class\"] ? c[\"__class\"] : c.name; })(componentType) + \";\";\n                    }\n                    else {\n                        clazz.typeName = \"[\" + (function (c) { return c[\"__class\"] ? c[\"__class\"] : c.name; })(componentType);\n                    }\n                    clazz.canonicalName = componentType.getCanonicalName() + \"[]\";\n                    clazz.simpleName = (function (c) { return c[\"__class\"] ? c[\"__class\"].substring(c[\"__class\"].lastIndexOf('.') + 1) : c.name.substring(c.name.lastIndexOf('.') + 1); })(componentType) + \"[]\";\n                    return;\n                }\n                var packageName = clazz.packageName;\n                var compoundName = clazz.compoundName.split(\"/\");\n                clazz.typeName = ([packageName, (compoundName).join(\"$\")]).join(\".\");\n                clazz.canonicalName = ([packageName, (compoundName).join(\".\")]).join(\".\");\n                clazz.simpleName = compoundName[compoundName.length - 1];\n            };\n            /**\n             * Sets the class object for primitives.\n             * <p>\n             * Written in JSNI to minimize dependencies (on (String)+).\n             */\n            Class.synthesizePrimitiveNamesFromTypeId = function (clazz, primitiveTypeId) {\n                clazz.typeName = \"Class$\" + primitiveTypeId;\n                clazz.canonicalName = clazz.typeName;\n                clazz.simpleName = clazz.typeName;\n            };\n            Class.prototype.desiredAssertionStatus = function () {\n                return false;\n            };\n            Class.prototype.ensureNamesAreInitialized = function () {\n                if (this.typeName != null) {\n                    return;\n                }\n                Class.initializeNames(this);\n            };\n            Class.prototype.getCanonicalName = function () {\n                this.ensureNamesAreInitialized();\n                return this.canonicalName;\n            };\n            Class.prototype.getComponentType = function () {\n                return this.componentType;\n            };\n            Class.prototype.getEnumConstants = function () {\n                return this.enumConstantsFunc\n                    && (this.enumConstantsFunc)();\n            };\n            Class.prototype.getName = function () {\n                this.ensureNamesAreInitialized();\n                return this.typeName;\n            };\n            Class.prototype.getSimpleName = function () {\n                this.ensureNamesAreInitialized();\n                return this.simpleName;\n            };\n            Class.prototype.getSuperclass = function () {\n                return this.superclass;\n            };\n            Class.prototype.isArray = function () {\n                return (this.modifiers & Class.ARRAY) !== 0;\n            };\n            Class.prototype.isEnum = function () {\n                return (this.modifiers & Class.ENUM) !== 0;\n            };\n            Class.prototype.isInterface = function () {\n                return (this.modifiers & Class.INTERFACE) !== 0;\n            };\n            Class.prototype.isPrimitive = function () {\n                return (this.modifiers & Class.PRIMITIVE) !== 0;\n            };\n            Class.prototype.toString = function () {\n                return (this.isInterface() ? \"interface \" : (this.isPrimitive() ? \"\" : \"class \")) + this.getName();\n            };\n            /**\n             * Used by Enum to allow getSuperclass() to be pruned.\n             */\n            Class.prototype.getEnumSuperclass = function () {\n                return this.enumSuperclass;\n            };\n            Class.PRIMITIVE = 1;\n            Class.INTERFACE = 2;\n            Class.ARRAY = 4;\n            Class.ENUM = 8;\n            Class.nextSequentialId = 1;\n            return Class;\n        }());\n        lang.Class = Class;\n        Class[\"__class\"] = \"java.lang.Class\";\n        Class[\"__interfaces\"] = [\"java.lang.reflect.Type\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * The first-class representation of an enumeration.\n         *\n         * @param <E>\n         */\n        var Enum = (function () {\n            function Enum(name, ordinal) {\n                this.__ordinal = 0;\n                this.__name = name;\n                this.__ordinal = ordinal;\n            }\n            Enum.valueOf = function (enumType, name) {\n                if (((enumType != null && enumType instanceof java.lang.Class) || enumType === null) && ((typeof name === 'string') || name === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var enumValueOfFunc = javaemul.internal.InternalPreconditions.checkNotNull(enumType).enumValueOfFunc;\n                        javaemul.internal.InternalPreconditions.checkCriticalArgument(enumValueOfFunc != null);\n                        javaemul.internal.InternalPreconditions.checkNotNull(name);\n                        return Enum.invokeValueOf(enumValueOfFunc, name);\n                    })();\n                }\n                else if (((enumType != null && enumType instanceof Object) || enumType === null) && ((typeof name === 'string') || name === null)) {\n                    return java.lang.Enum.valueOf$jsweet_lang_Object$java_lang_String(enumType, name);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Enum.createValueOfMap = function (enumConstants) {\n                var result = new Object();\n                for (var index121 = 0; index121 < enumConstants.length; index121++) {\n                    var value = enumConstants[index121];\n                    {\n                        Enum.put0(result, \":\" + value.name(), value);\n                    }\n                }\n                return result;\n            };\n            Enum.valueOf$jsweet_lang_Object$java_lang_String = function (map, name) {\n                javaemul.internal.InternalPreconditions.checkNotNull(name);\n                var result = java.lang.Enum.get0(map, \":\" + name);\n                javaemul.internal.InternalPreconditions.checkCriticalArgument(result != null, \"Enum constant undefined: %s\", name);\n                return result;\n            };\n            Enum.get0 = function (map, name) {\n                return map[name];\n            };\n            Enum.invokeValueOf = function (enumValueOfFunc, name) {\n                return enumValueOfFunc(name);\n            };\n            Enum.put0 = function (map, name, value) {\n                map[name] = value;\n            };\n            Enum.prototype.compareTo = function (other) {\n                var _this = this;\n                if (((other != null) || other === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return _this.__ordinal - other.__ordinal;\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Enum.prototype.getDeclaringClass = function () {\n                return null;\n            };\n            Enum.prototype.name = function () {\n                return this.__name != null ? this.__name : \"\" + this.__ordinal;\n            };\n            Enum.prototype.ordinal = function () {\n                return this.__ordinal;\n            };\n            Enum.prototype.toString = function () {\n                return this.name();\n            };\n            return Enum;\n        }());\n        lang.Enum = Enum;\n        Enum[\"__class\"] = \"java.lang.Enum\";\n        Enum[\"__interfaces\"] = [\"java.lang.Comparable\", \"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * See <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Exception.html\">the\n         * official Java API doc</a> for details.\n         */\n        var Exception = (function (_super) {\n            __extends(Exception, _super);\n            function Exception(message, cause, enableSuppression, writableStackTrace) {\n                if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof Error) || cause === null) && ((typeof enableSuppression === 'boolean') || enableSuppression === null) && ((typeof writableStackTrace === 'boolean') || writableStackTrace === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof Error) || cause === null) && enableSuppression === undefined && writableStackTrace === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (((typeof message === 'string') || message === null) && cause === undefined && enableSuppression === undefined && writableStackTrace === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (((message != null && message instanceof Error) || message === null) && cause === undefined && enableSuppression === undefined && writableStackTrace === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var cause_1 = __args[0];\n                    _super.call(this, cause_1);\n                    this.message = cause_1;\n                }\n                else if (message === undefined && cause === undefined && enableSuppression === undefined && writableStackTrace === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return Exception;\n        }(Error));\n        lang.Exception = Exception;\n        Exception[\"__class\"] = \"java.lang.Exception\";\n        Exception[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        var ref;\n        (function (ref) {\n            /**\n             * This implements the reference API in a minimal way. In JavaScript, there is\n             * no control over the reference and the GC. So this implementation's only\n             * purpose is for compilation.\n             */\n            var Reference = (function () {\n                function Reference(referent) {\n                    this.referent = referent;\n                }\n                Reference.prototype.get = function () {\n                    return this.referent;\n                };\n                Reference.prototype.clear = function () {\n                    this.referent = null;\n                };\n                return Reference;\n            }());\n            ref.Reference = Reference;\n            Reference[\"__class\"] = \"java.lang.ref.Reference\";\n        })(ref = lang.ref || (lang.ref = {}));\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * Included for hosted mode source compatibility. Partially implemented\n         *\n         * @skip\n         */\n        var StackTraceElement = (function () {\n            function StackTraceElement(className, methodName, fileName, lineNumber) {\n                var _this = this;\n                if (((typeof className === 'string') || className === null) && ((typeof methodName === 'string') || methodName === null) && ((typeof fileName === 'string') || fileName === null) && ((typeof lineNumber === 'number') || lineNumber === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    this.lineNumber = 0;\n                    (function () {\n                        _this.className = className;\n                        _this.methodName = methodName;\n                        _this.fileName = fileName;\n                        _this.lineNumber = lineNumber;\n                    })();\n                }\n                else if (className === undefined && methodName === undefined && fileName === undefined && lineNumber === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    this.lineNumber = 0;\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            StackTraceElement.prototype.getClassName = function () {\n                return this.className;\n            };\n            StackTraceElement.prototype.getFileName = function () {\n                return this.fileName;\n            };\n            StackTraceElement.prototype.getLineNumber = function () {\n                return this.lineNumber;\n            };\n            StackTraceElement.prototype.getMethodName = function () {\n                return this.methodName;\n            };\n            StackTraceElement.prototype.equals = function (other) {\n                if (other != null && other instanceof java.lang.StackTraceElement) {\n                    var st = other;\n                    return this.lineNumber === st.lineNumber && java.util.Objects.equals(this.methodName, st.methodName) && java.util.Objects.equals(this.className, st.className) && java.util.Objects.equals(this.fileName, st.fileName);\n                }\n                return false;\n            };\n            StackTraceElement.prototype.hashCode = function () {\n                return java.util.Objects.hash(this.lineNumber, this.className, this.methodName, this.fileName);\n            };\n            StackTraceElement.prototype.toString = function () {\n                return this.className + \".\" + this.methodName + \"(\" + (this.fileName != null ? this.fileName : \"Unknown Source\") + (this.lineNumber >= 0 ? \":\" + this.lineNumber : \"\") + \")\";\n            };\n            return StackTraceElement;\n        }());\n        lang.StackTraceElement = StackTraceElement;\n        StackTraceElement[\"__class\"] = \"java.lang.StackTraceElement\";\n        StackTraceElement[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * Thrown to indicate that the Java Virtual Machine is broken or has\n         * run out of resources necessary for it to continue operating.\n         *\n         *\n         * @author  Frank Yellin\n         * @since   JDK1.0\n         */\n        var VirtualMachineError = (function (_super) {\n            __extends(VirtualMachineError, _super);\n            /**\n             * Constructs a {@code VirtualMachineError} with the specified\n             * detail message and cause.  <p>Note that the detail message\n             * associated with {@code cause} is <i>not</i> automatically\n             * incorporated in this error's detail message.\n             *\n             * @param  message the detail message (which is saved for later retrieval\n             * by the {@link #getMessage()} method).\n             * @param  cause the cause (which is saved for later retrieval by the\n             * {@link #getCause()} method).  (A {@code null} value is\n             * permitted, and indicates that the cause is nonexistent or\n             * unknown.)\n             * @since  1.8\n             */\n            function VirtualMachineError(message, cause) {\n                if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof Error) || cause === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (((typeof message === 'string') || message === null) && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (((message != null && message instanceof Error) || message === null) && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var cause_2 = __args[0];\n                    _super.call(this, cause_2);\n                    this.message = cause_2;\n                }\n                else if (message === undefined && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            VirtualMachineError.serialVersionUID = 4161983926571568670;\n            return VirtualMachineError;\n        }(Error));\n        lang.VirtualMachineError = VirtualMachineError;\n        VirtualMachineError[\"__class\"] = \"java.lang.VirtualMachineError\";\n        VirtualMachineError[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * For JRE compatibility.\n         */\n        var Void = (function () {\n            /**\n             * Not instantiable.\n             */\n            function Void() {\n            }\n            return Void;\n        }());\n        lang.Void = Void;\n        Void[\"__class\"] = \"java.lang.Void\";\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var nio;\n    (function (nio) {\n        var charset;\n        (function (charset) {\n            /**\n             * A minimal emulation of {@link Charset}.\n             */\n            var Charset = (function () {\n                function Charset(name, aliasesIgnored) {\n                    this.__name = name;\n                }\n                Charset.availableCharsets = function () {\n                    if (Charset.AvailableCharsets.CHARSETS == null) {\n                        var map = (new java.util.TreeMap());\n                        map.put(javaemul.internal.EmulatedCharset.ISO_8859_1_$LI$().name(), javaemul.internal.EmulatedCharset.ISO_8859_1_$LI$());\n                        map.put(javaemul.internal.EmulatedCharset.ISO_LATIN_1_$LI$().name(), javaemul.internal.EmulatedCharset.ISO_LATIN_1_$LI$());\n                        map.put(javaemul.internal.EmulatedCharset.UTF_8_$LI$().name(), javaemul.internal.EmulatedCharset.UTF_8_$LI$());\n                        Charset.AvailableCharsets.CHARSETS = java.util.Collections.unmodifiableSortedMap(map);\n                    }\n                    return Charset.AvailableCharsets.CHARSETS;\n                };\n                Charset.forName = function (charsetName) {\n                    javaemul.internal.InternalPreconditions.checkArgument(charsetName != null, \"Null charset name\");\n                    charsetName = charsetName.toUpperCase();\n                    if ((javaemul.internal.EmulatedCharset.ISO_8859_1_$LI$().name() === charsetName)) {\n                        return javaemul.internal.EmulatedCharset.ISO_8859_1_$LI$();\n                    }\n                    else if ((javaemul.internal.EmulatedCharset.ISO_LATIN_1_$LI$().name() === charsetName)) {\n                        return javaemul.internal.EmulatedCharset.ISO_LATIN_1_$LI$();\n                    }\n                    else if ((javaemul.internal.EmulatedCharset.UTF_8_$LI$().name() === charsetName)) {\n                        return javaemul.internal.EmulatedCharset.UTF_8_$LI$();\n                    }\n                    if (!Charset.createLegalCharsetNameRegex().test(charsetName)) {\n                        throw new java.nio.charset.IllegalCharsetNameException(charsetName);\n                    }\n                    else {\n                        throw new java.nio.charset.UnsupportedCharsetException(charsetName);\n                    }\n                };\n                Charset.createLegalCharsetNameRegex = function () {\n                    return new RegExp(\"^[A-Za-z0-9][\\\\w-:\\\\.\\\\+]*$\");\n                };\n                Charset.prototype.name = function () {\n                    return this.__name;\n                };\n                Charset.prototype.compareTo = function (that) {\n                    var _this = this;\n                    if (((that != null && that instanceof java.nio.charset.Charset) || that === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            return _this.__name.toUpperCase().localeCompare(that.__name.toUpperCase());\n                        })();\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                Charset.prototype.hashCode = function () {\n                    return this.__name.toString();\n                };\n                Charset.prototype.equals = function (o) {\n                    if (o === this) {\n                        return true;\n                    }\n                    if (!(o != null && o instanceof java.nio.charset.Charset)) {\n                        return false;\n                    }\n                    var that = o;\n                    return (this.__name === that.__name);\n                };\n                Charset.prototype.toString = function () {\n                    return this.__name;\n                };\n                return Charset;\n            }());\n            charset.Charset = Charset;\n            Charset[\"__class\"] = \"java.nio.charset.Charset\";\n            Charset[\"__interfaces\"] = [\"java.lang.Comparable\"];\n            var Charset;\n            (function (Charset) {\n                var AvailableCharsets = (function () {\n                    function AvailableCharsets() {\n                    }\n                    return AvailableCharsets;\n                }());\n                Charset.AvailableCharsets = AvailableCharsets;\n                AvailableCharsets[\"__class\"] = \"java.nio.charset.Charset.AvailableCharsets\";\n            })(Charset = charset.Charset || (charset.Charset = {}));\n        })(charset = nio.charset || (nio.charset = {}));\n    })(nio = java.nio || (java.nio = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var security;\n    (function (security) {\n        /**\n         * Message Digest Service Provider Interface - <a\n         * href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/security/MessageDigestSpi.html\">[Sun's\n         * docs]</a>.\n         */\n        var MessageDigestSpi = (function () {\n            function MessageDigestSpi() {\n            }\n            MessageDigestSpi.prototype.engineDigest$ = function () { throw new Error('cannot invoke abstract overloaded method... check your argument(s) type(s)'); };\n            MessageDigestSpi.prototype.engineDigest = function (buf, offset, len) {\n                var _this = this;\n                if (((buf != null && buf instanceof Array) || buf === null) && ((typeof offset === 'number') || offset === null) && ((typeof len === 'number') || len === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var digest = _this.engineDigest();\n                        if (buf.length < digest.length + offset) {\n                            throw new java.security.DigestException(\"Insufficient buffer space for digest\");\n                        }\n                        if (len < digest.length) {\n                            throw new java.security.DigestException(\"Length not large enough to hold digest\");\n                        }\n                        java.lang.System.arraycopy(digest, 0, buf, offset, digest.length);\n                        return digest.length;\n                    })();\n                }\n                else if (buf === undefined && offset === undefined && len === undefined) {\n                    return this.engineDigest$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            MessageDigestSpi.prototype.engineGetDigestLength = function () {\n                return 0;\n            };\n            MessageDigestSpi.prototype.engineUpdate$byte = function (input) { throw new Error('cannot invoke abstract overloaded method... check your argument(s) type(s)'); };\n            MessageDigestSpi.prototype.engineUpdate = function (input, offset, len) {\n                if (((input != null && input instanceof Array) || input === null) && ((typeof offset === 'number') || offset === null) && ((typeof len === 'number') || len === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                }\n                else if (((typeof input === 'number') || input === null) && offset === undefined && len === undefined) {\n                    return this.engineUpdate$byte(input);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            return MessageDigestSpi;\n        }());\n        security.MessageDigestSpi = MessageDigestSpi;\n        MessageDigestSpi[\"__class\"] = \"java.security.MessageDigestSpi\";\n    })(security = java.security || (java.security = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Skeletal implementation of the Collection interface. <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/AbstractCollection.html\">[Sun\n         * docs]</a>\n         *\n         * @param <E> the element type.\n         */\n        var AbstractCollection = (function () {\n            function AbstractCollection() {\n            }\n            AbstractCollection.prototype.forEach = function (action) {\n                javaemul.internal.InternalPreconditions.checkNotNull(action);\n                for (var index122 = this.iterator(); index122.hasNext();) {\n                    var t = index122.next();\n                    {\n                        action(t);\n                    }\n                }\n            };\n            AbstractCollection.prototype.add = function (index, element) {\n                if (((index != null) || index === null) && element === undefined) {\n                    return this.add$java_lang_Object(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractCollection.prototype.add$java_lang_Object = function (o) {\n                throw new java.lang.UnsupportedOperationException(\"Add not supported on this collection\");\n            };\n            AbstractCollection.prototype.addAll = function (index, c) {\n                if (((index != null && (index[\"__interfaces\"] != null && index[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || index.constructor != null && index.constructor[\"__interfaces\"] != null && index.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || index === null) && c === undefined) {\n                    return this.addAll$java_util_Collection(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractCollection.prototype.addAll$java_util_Collection = function (c) {\n                javaemul.internal.InternalPreconditions.checkNotNull(c);\n                var changed = false;\n                for (var index123 = c.iterator(); index123.hasNext();) {\n                    var e = index123.next();\n                    {\n                        changed = changed || this.add(e);\n                    }\n                }\n                return changed;\n            };\n            AbstractCollection.prototype.clear = function () {\n                for (var iter = this.iterator(); iter.hasNext();) {\n                    iter.next();\n                    iter.remove();\n                }\n            };\n            AbstractCollection.prototype.contains = function (o) {\n                return this.advanceToFind(o, false);\n            };\n            AbstractCollection.prototype.containsAll = function (c) {\n                javaemul.internal.InternalPreconditions.checkNotNull(c);\n                for (var index124 = c.iterator(); index124.hasNext();) {\n                    var e = index124.next();\n                    {\n                        if (!this.contains(e)) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            };\n            AbstractCollection.prototype.isEmpty = function () {\n                return this.size() === 0;\n            };\n            AbstractCollection.prototype.remove = function (index) {\n                if (((index != null) || index === null)) {\n                    return this.remove$java_lang_Object(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractCollection.prototype.remove$java_lang_Object = function (o) {\n                return this.advanceToFind(o, true);\n            };\n            AbstractCollection.prototype.removeAll = function (c) {\n                javaemul.internal.InternalPreconditions.checkNotNull(c);\n                var changed = false;\n                for (var iter = this.iterator(); iter.hasNext();) {\n                    var o = iter.next();\n                    if (c.contains(o)) {\n                        iter.remove();\n                        changed = true;\n                    }\n                }\n                return changed;\n            };\n            AbstractCollection.prototype.retainAll = function (c) {\n                javaemul.internal.InternalPreconditions.checkNotNull(c);\n                var changed = false;\n                for (var iter = this.iterator(); iter.hasNext();) {\n                    var o = iter.next();\n                    if (!c.contains(o)) {\n                        iter.remove();\n                        changed = true;\n                    }\n                }\n                return changed;\n            };\n            AbstractCollection.prototype.toArray$ = function () {\n                return this.toArray(new Array(this.size()));\n            };\n            AbstractCollection.prototype.toArray = function (a) {\n                var _this = this;\n                if (((a != null && a instanceof Array) || a === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var size = _this.size();\n                        if (a.length < size) {\n                            a = javaemul.internal.ArrayHelper.createFrom(a, size);\n                        }\n                        var result = a;\n                        var it = _this.iterator();\n                        for (var i = 0; i < size; ++i) {\n                            result[i] = it.next();\n                        }\n                        if (a.length > size) {\n                            a[size] = null;\n                        }\n                        return a;\n                    })();\n                }\n                else if (a === undefined) {\n                    return this.toArray$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractCollection.prototype.toString = function () {\n                var joiner = new java.util.StringJoiner(\", \", \"[\", \"]\");\n                for (var index125 = this.iterator(); index125.hasNext();) {\n                    var e = index125.next();\n                    {\n                        joiner.add(e === this ? \"(this Collection)\" : new String(e).toString());\n                    }\n                }\n                return joiner.toString();\n            };\n            AbstractCollection.prototype.advanceToFind = function (o, remove) {\n                for (var iter = this.iterator(); iter.hasNext();) {\n                    var e = iter.next();\n                    if (java.util.Objects.equals(o, e)) {\n                        if (remove) {\n                            iter.remove();\n                        }\n                        return true;\n                    }\n                }\n                return false;\n            };\n            return AbstractCollection;\n        }());\n        util.AbstractCollection = AbstractCollection;\n        AbstractCollection[\"__class\"] = \"java.util.AbstractCollection\";\n        AbstractCollection[\"__interfaces\"] = [\"java.util.Collection\", \"java.lang.Iterable\"];\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Basic {@link Map.Entry} implementation that implements hashCode, equals, and\n         * toString.\n         */\n        var AbstractMapEntry = (function () {\n            function AbstractMapEntry() {\n            }\n            AbstractMapEntry.prototype.equals = function (other) {\n                if (!(other != null && (other[\"__interfaces\"] != null && other[\"__interfaces\"].indexOf(\"java.util.Map.Entry\") >= 0 || other.constructor != null && other.constructor[\"__interfaces\"] != null && other.constructor[\"__interfaces\"].indexOf(\"java.util.Map.Entry\") >= 0))) {\n                    return false;\n                }\n                var entry = other;\n                return java.util.Objects.equals(this.getKey(), entry.getKey()) && java.util.Objects.equals(this.getValue(), entry.getValue());\n            };\n            /**\n             * Calculate the hash code using Sun's specified algorithm.\n             */\n            AbstractMapEntry.prototype.hashCode = function () {\n                return java.util.Objects.hashCode(this.getKey()) ^ java.util.Objects.hashCode(this.getValue());\n            };\n            AbstractMapEntry.prototype.toString = function () {\n                return this.getKey() + \"=\" + this.getValue();\n            };\n            return AbstractMapEntry;\n        }());\n        util.AbstractMapEntry = AbstractMapEntry;\n        AbstractMapEntry[\"__class\"] = \"java.util.AbstractMapEntry\";\n        AbstractMapEntry[\"__interfaces\"] = [\"java.util.Map.Entry\"];\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Incomplete and naive implementation of the BitSet utility (mainly for\n         * compatibility/compilation purpose).\n         *\n         * @author Renaud Pawlak\n         */\n        var BitSet = (function () {\n            function BitSet(nbits) {\n                var _this = this;\n                this.bits = [];\n                if (((typeof nbits === 'number') || nbits === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    this.bits = [];\n                    (function () {\n                        while ((nbits > 0)) {\n                            (_this.bits).push(false);\n                        }\n                        ;\n                    })();\n                }\n                else if (nbits === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    this.bits = [];\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            BitSet.valueOf = function (longs) {\n                var bs = new BitSet();\n                bs.bits = new Array(longs.length * 64);\n                for (var n = 0; n < longs.length * 64; n++) {\n                    bs.bits[n] = ((longs[(n / 64 | 0)] & (1 << (n % 64))) !== 0);\n                }\n                return bs;\n            };\n            BitSet.prototype.flip$int = function (bitIndex) {\n                this.bits[bitIndex] = !this.bits[bitIndex];\n            };\n            BitSet.prototype.flip = function (fromIndex, toIndex) {\n                var _this = this;\n                if (((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        for (var i = fromIndex; i <= toIndex; i++) {\n                            _this.flip(i);\n                        }\n                    })();\n                }\n                else if (((typeof fromIndex === 'number') || fromIndex === null) && toIndex === undefined) {\n                    return this.flip$int(fromIndex);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            BitSet.prototype.set$int = function (bitIndex) {\n                this.bits[bitIndex] = true;\n            };\n            BitSet.prototype.set$int$boolean = function (bitIndex, value) {\n                if (value) {\n                    this.set(bitIndex);\n                }\n                else {\n                    this.clear(bitIndex);\n                }\n            };\n            BitSet.prototype.set$int$int = function (fromIndex, toIndex) {\n                for (var i = fromIndex; i <= toIndex; i++) {\n                    this.set(i);\n                }\n            };\n            BitSet.prototype.set = function (fromIndex, toIndex, value) {\n                var _this = this;\n                if (((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null) && ((typeof value === 'boolean') || value === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (value) {\n                            _this.set(fromIndex, toIndex);\n                        }\n                        else {\n                            _this.clear(fromIndex, toIndex);\n                        }\n                    })();\n                }\n                else if (((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'boolean') || toIndex === null) && value === undefined) {\n                    return this.set$int$boolean(fromIndex, toIndex);\n                }\n                else if (((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null) && value === undefined) {\n                    return this.set$int$int(fromIndex, toIndex);\n                }\n                else if (((typeof fromIndex === 'number') || fromIndex === null) && toIndex === undefined && value === undefined) {\n                    return this.set$int(fromIndex);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            BitSet.prototype.clear$int = function (bitIndex) {\n                this.bits[bitIndex] = false;\n            };\n            BitSet.prototype.clear = function (fromIndex, toIndex) {\n                var _this = this;\n                if (((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        for (var i = fromIndex; i <= toIndex; i++) {\n                            _this.clear(i);\n                        }\n                    })();\n                }\n                else if (((typeof fromIndex === 'number') || fromIndex === null) && toIndex === undefined) {\n                    return this.clear$int(fromIndex);\n                }\n                else if (fromIndex === undefined && toIndex === undefined) {\n                    return this.clear$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            BitSet.prototype.clear$ = function () {\n                this.bits = new Array(0);\n            };\n            BitSet.prototype.get$int = function (bitIndex) {\n                return this.bits[bitIndex];\n            };\n            BitSet.prototype.get = function (fromIndex, toIndex) {\n                var _this = this;\n                if (((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var bs = new BitSet();\n                        for (var i = fromIndex; i <= toIndex; i++) {\n                            (bs.bits).push(_this.bits[i]);\n                        }\n                        return bs;\n                    })();\n                }\n                else if (((typeof fromIndex === 'number') || fromIndex === null) && toIndex === undefined) {\n                    return this.get$int(fromIndex);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            BitSet.prototype.length = function () {\n                return this.bits.length;\n            };\n            BitSet.prototype.isEmpty = function () {\n                return this.bits.length === 0;\n            };\n            BitSet.prototype.cardinality = function () {\n                var sum = 0;\n                for (var i = 0; i < this.bits.length; i++) {\n                    sum += this.bits[i] ? 1 : 0;\n                }\n                return sum;\n            };\n            BitSet.prototype.and = function (set) {\n                for (var i = 0; i < this.bits.length; i++) {\n                    this.bits[i] = this.bits[i] && set.get(i);\n                }\n            };\n            BitSet.prototype.or = function (set) {\n                for (var i = 0; i < this.bits.length; i++) {\n                    this.bits[i] = this.bits[i] || set.get(i);\n                }\n            };\n            BitSet.prototype.xor = function (set) {\n                for (var i = 0; i < this.bits.length; i++) {\n                    this.bits[i] = (this.bits[i] && !set.get(i)) || (!this.bits[i] && set.get(i));\n                }\n            };\n            BitSet.prototype.andNot = function (set) {\n                for (var i = 0; i < this.bits.length; i++) {\n                    this.bits[i] = this.bits[i] && !set.get(i);\n                }\n            };\n            BitSet.prototype.size = function () {\n                return this.bits.length;\n            };\n            BitSet.prototype.equals = function (obj) {\n                if (!(obj != null && obj instanceof java.util.BitSet))\n                    return false;\n                if (this === obj)\n                    return true;\n                var set = obj;\n                if (set.bits.length !== this.bits.length) {\n                    return false;\n                }\n                for (var i = 0; i < set.bits.length; i++) {\n                    if (!(set.bits[i] == this.bits[i])) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            BitSet.prototype.clone = function () {\n                var bs = new BitSet();\n                bs.bits = (this.bits).slice(0, this.bits.length);\n                return bs;\n            };\n            return BitSet;\n        }());\n        util.BitSet = BitSet;\n        BitSet[\"__class\"] = \"java.util.BitSet\";\n        BitSet[\"__interfaces\"] = [\"java.lang.Cloneable\", \"java.io.Serializable\"];\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        var Comparators = (function () {\n            function Comparators() {\n            }\n            Comparators.NATURAL_$LI$ = function () { if (Comparators.NATURAL == null)\n                Comparators.NATURAL = new Comparators.NaturalComparator(); return Comparators.NATURAL; };\n            ;\n            /**\n             * Returns the natural Comparator.\n             * <p>\n             * Example:\n             *\n             * <pre>Comparator&lt;String&gt; compareString = Comparators.natural()</pre>\n             *\n             * @return the natural Comparator\n             */\n            Comparators.natural = function () {\n                return Comparators.NATURAL_$LI$();\n            };\n            return Comparators;\n        }());\n        util.Comparators = Comparators;\n        Comparators[\"__class\"] = \"java.util.Comparators\";\n        var Comparators;\n        (function (Comparators) {\n            var NaturalComparator = (function () {\n                function NaturalComparator() {\n                }\n                NaturalComparator.prototype.compare = function (o1, o2) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(o1);\n                    javaemul.internal.InternalPreconditions.checkNotNull(o2);\n                    return o1.compareTo(o2);\n                };\n                return NaturalComparator;\n            }());\n            Comparators.NaturalComparator = NaturalComparator;\n            NaturalComparator[\"__class\"] = \"java.util.Comparators.NaturalComparator\";\n            NaturalComparator[\"__interfaces\"] = [\"java.util.Comparator\"];\n        })(Comparators = util.Comparators || (util.Comparators = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Represents a date and time.\n         */\n        var Date = (function () {\n            function Date(year, month, date, hrs, min, sec) {\n                var _this = this;\n                if (((typeof year === 'number') || year === null) && ((typeof month === 'number') || month === null) && ((typeof date === 'number') || date === null) && ((typeof hrs === 'number') || hrs === null) && ((typeof min === 'number') || min === null) && ((typeof sec === 'number') || sec === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    (function () {\n                        _this.jsdate = new (Date.jsdateClass())();\n                        _this.jsdate[\"setFullYear\"](_this.jsdate, year + 1900, month, date);\n                        _this.jsdate[\"setHours\"](_this.jsdate, hrs, min, sec, 0);\n                        _this.fixDaylightSavings(hrs);\n                    })();\n                }\n                else if (((typeof year === 'number') || year === null) && ((typeof month === 'number') || month === null) && ((typeof date === 'number') || date === null) && ((typeof hrs === 'number') || hrs === null) && ((typeof min === 'number') || min === null) && sec === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    {\n                        var __args_7 = Array.prototype.slice.call(arguments);\n                        var sec_1 = 0;\n                        (function () {\n                            _this.jsdate = new (Date.jsdateClass())();\n                            _this.jsdate[\"setFullYear\"](_this.jsdate, year + 1900, month, date);\n                            _this.jsdate[\"setHours\"](_this.jsdate, hrs, min, sec_1, 0);\n                            _this.fixDaylightSavings(hrs);\n                        })();\n                    }\n                }\n                else if (((typeof year === 'number') || year === null) && ((typeof month === 'number') || month === null) && ((typeof date === 'number') || date === null) && hrs === undefined && min === undefined && sec === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    {\n                        var __args_8 = Array.prototype.slice.call(arguments);\n                        var hrs_1 = 0;\n                        var min_1 = 0;\n                        var sec_2 = 0;\n                        (function () {\n                            _this.jsdate = new (Date.jsdateClass())();\n                            _this.jsdate[\"setFullYear\"](_this.jsdate, year + 1900, month, date);\n                            _this.jsdate[\"setHours\"](_this.jsdate, hrs_1, min_1, sec_2, 0);\n                            _this.fixDaylightSavings(hrs_1);\n                        })();\n                    }\n                }\n                else if (((typeof year === 'string') || year === null) && month === undefined && date === undefined && hrs === undefined && min === undefined && sec === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var date_1 = __args[0];\n                    {\n                        var __args_9 = Array.prototype.slice.call(arguments);\n                        var date_2 = Date.parse(__args_9[0]);\n                        (function () {\n                            _this.jsdate = new Date(date_2);\n                        })();\n                    }\n                }\n                else if (((typeof year === 'number') || year === null) && month === undefined && date === undefined && hrs === undefined && min === undefined && sec === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var date_3 = __args[0];\n                    (function () {\n                        _this.jsdate = new Date(date_3);\n                    })();\n                }\n                else if (year === undefined && month === undefined && date === undefined && hrs === undefined && min === undefined && sec === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    (function () {\n                        _this.jsdate = new (Date.jsdateClass())();\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            Date.parse = function (s) {\n                var parsed = Date.jsdateClass()[\"parse\"](s);\n                if (isNaN(parsed)) {\n                    throw new java.lang.IllegalArgumentException();\n                }\n                return Math.round(parsed);\n            };\n            Date.UTC = function (year, month, date, hrs, min, sec) {\n                return Math.round(Date.jsdateClass()[\"UTC\"](year + 1900, month, date, hrs, min, sec, 0));\n            };\n            /**\n             * Ensure a number is displayed with two digits.\n             *\n             * @return a two-character base 10 representation of the number\n             */\n            Date.padTwo = function (number) {\n                if (number < 10) {\n                    return \"0\" + number;\n                }\n                else {\n                    return new String(number).toString();\n                }\n            };\n            Date.jsdateClass = function () {\n                return window[\"Date\"];\n            };\n            Date.prototype.after = function (ts) {\n                if (((ts != null && ts instanceof java.util.Date) || ts === null)) {\n                    return this.after$java_util_Date(ts);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Date.prototype.after$java_util_Date = function (when) {\n                return this.getTime() > when.getTime();\n            };\n            Date.prototype.before = function (ts) {\n                if (((ts != null && ts instanceof java.util.Date) || ts === null)) {\n                    return this.before$java_util_Date(ts);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Date.prototype.before$java_util_Date = function (when) {\n                return this.getTime() < when.getTime();\n            };\n            Date.prototype.clone = function () {\n                return new Date(this.getTime());\n            };\n            Date.prototype.compareTo = function (other) {\n                var _this = this;\n                if (((other != null && other instanceof java.util.Date) || other === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return javaemul.internal.LongHelper.compare(_this.getTime(), other.getTime());\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Date.prototype.equals = function (ts) {\n                if (((ts != null) || ts === null)) {\n                    return this.equals$java_lang_Object(ts);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Date.prototype.equals$java_lang_Object = function (obj) {\n                return ((obj != null && obj instanceof java.util.Date) && (this.getTime() === obj.getTime()));\n            };\n            Date.prototype.getDate = function () {\n                return (this.jsdate[\"getDate\"](this.jsdate) | 0);\n            };\n            Date.prototype.getDay = function () {\n                return (this.jsdate[\"getDay\"](this.jsdate) | 0);\n            };\n            Date.prototype.getHours = function () {\n                return (this.jsdate[\"getHours\"](this.jsdate) | 0);\n            };\n            Date.prototype.getMinutes = function () {\n                return (this.jsdate[\"getMinutes\"](this.jsdate) | 0);\n            };\n            Date.prototype.getMonth = function () {\n                return (this.jsdate[\"getMonth\"](this.jsdate) | 0);\n            };\n            Date.prototype.getSeconds = function () {\n                return (this.jsdate[\"getSeconds\"](this.jsdate) | 0);\n            };\n            Date.prototype.getTime = function () {\n                return Math.round(this.jsdate[\"getTime\"](this.jsdate));\n            };\n            Date.prototype.getTimezoneOffset = function () {\n                return (this.jsdate[\"getTimezoneOffset\"](this.jsdate) | 0);\n            };\n            Date.prototype.getYear = function () {\n                return (this.jsdate[\"getFullYear\"](this.jsdate) | 0) - 1900;\n            };\n            Date.prototype.hashCode = function () {\n                var time = this.getTime();\n                return ((time ^ (time >>> 32)) | 0);\n            };\n            Date.prototype.setDate = function (date) {\n                var hours = this.getHours();\n                this.jsdate[\"setDate\"](this.jsdate, date);\n                this.fixDaylightSavings(hours);\n            };\n            Date.prototype.setHours = function (hours) {\n                this.jsdate[\"setHours\"](this.jsdate, hours);\n                this.fixDaylightSavings(hours);\n            };\n            Date.prototype.setMinutes = function (minutes) {\n                var hours = this.getHours() + (minutes / 60 | 0);\n                this.jsdate[\"setMinutes\"](this.jsdate, minutes);\n                this.fixDaylightSavings(hours);\n            };\n            Date.prototype.setMonth = function (month) {\n                var hours = this.getHours();\n                this.jsdate[\"setMonth\"](this.jsdate, month);\n                this.fixDaylightSavings(hours);\n            };\n            Date.prototype.setSeconds = function (seconds) {\n                var hours = this.getHours() + (seconds / (60 * 60) | 0);\n                this.jsdate[\"setSeconds\"](this.jsdate, seconds);\n                this.fixDaylightSavings(hours);\n            };\n            Date.prototype.setTime = function (time) {\n                this.jsdate[\"setTime\"](this.jsdate, time);\n            };\n            Date.prototype.setYear = function (year) {\n                var hours = this.getHours();\n                this.jsdate[\"setFullYear\"](this.jsdate, year + 1900);\n                this.fixDaylightSavings(hours);\n            };\n            Date.prototype.toGMTString = function () {\n                return this.jsdate[\"getUTCDate\"](this.jsdate) + \" \" + Date.StringData.MONTHS_$LI$()[(this.jsdate[\"getUTCMonth\"](this.jsdate) | 0)] + \" \" + this.jsdate[\"getUTCFullYear\"](this.jsdate) + \" \" + Date.padTwo((this.jsdate[\"getUTCHours\"](this.jsdate) | 0)) + \":\" + Date.padTwo((this.jsdate[\"getUTCMinutes\"](this.jsdate) | 0)) + \":\" + Date.padTwo((this.jsdate[\"getUTCSeconds\"](this.jsdate) | 0)) + \" GMT\";\n            };\n            Date.prototype.toLocaleString = function () {\n                return this.jsdate.toLocaleString();\n            };\n            Date.prototype.toString = function () {\n                var offset = -(this.getTimezoneOffset() | 0);\n                var hourOffset = ((offset >= 0) ? \"+\" : \"\") + ((offset / 60 | 0));\n                var minuteOffset = Date.padTwo(Math.abs(offset) % 60);\n                return Date.StringData.DAYS_$LI$()[(this.getDay() | 0)] + \" \" + Date.StringData.MONTHS_$LI$()[(this.getMonth() | 0)] + \" \" + Date.padTwo((this.getDate() | 0)) + \" \" + Date.padTwo((this.getHours() | 0)) + \":\" + Date.padTwo((this.getMinutes() | 0)) + \":\" + Date.padTwo((this.getSeconds() | 0)) + \" GMT\" + hourOffset + minuteOffset + \" \" + this.jsdate[\"getFullYear\"](this.jsdate);\n            };\n            Date.ONE_HOUR_IN_MILLISECONDS_$LI$ = function () { if (Date.ONE_HOUR_IN_MILLISECONDS == null)\n                Date.ONE_HOUR_IN_MILLISECONDS = 60 * 60 * 1000; return Date.ONE_HOUR_IN_MILLISECONDS; };\n            ;\n            /**\n             * Detects if the requested time falls into a non-existent time range due to\n             * local time advancing into daylight savings time or is ambiguous due to\n             * going out of daylight savings. If so, adjust accordingly.\n             */\n            Date.prototype.fixDaylightSavings = function (requestedHours) {\n                requestedHours %= 24;\n                if (this.getHours() !== requestedHours) {\n                    var copy = new (Date.jsdateClass())(this.getTime());\n                    copy[\"setDate\"](((copy[\"getDate\"](copy) | 0) + 1));\n                    var timeDiff = (this.jsdate[\"getTimezoneOffset\"](this.jsdate) | 0) - (copy[\"getTimezoneOffset\"](copy) | 0);\n                    if (timeDiff > 0) {\n                        var timeDiffHours = (timeDiff / 60 | 0);\n                        var timeDiffMinutes = timeDiff % 60;\n                        var day = (this.getDate() | 0);\n                        var badHours = (this.getHours() | 0);\n                        if (badHours + timeDiffHours >= 24) {\n                            day++;\n                        }\n                        var newTime = new (Date.jsdateClass())((this.jsdate[\"getFullYear\"](this.jsdate) | 0), this.getMonth(), day, requestedHours + timeDiffHours, this.getMinutes() + timeDiffMinutes, this.getSeconds(), Math.round(this.jsdate[\"getMilliseconds\"](this.jsdate)));\n                        this.setTime(newTime[\"getMilliseconds\"](newTime));\n                    }\n                }\n                var originalTimeInMillis = this.getTime();\n                this.setTime(originalTimeInMillis + Date.ONE_HOUR_IN_MILLISECONDS_$LI$());\n                if (this.getHours() !== requestedHours) {\n                    this.setTime(originalTimeInMillis);\n                }\n            };\n            return Date;\n        }());\n        util.Date = Date;\n        Date[\"__class\"] = \"java.util.Date\";\n        Date[\"__interfaces\"] = [\"java.lang.Cloneable\", \"java.lang.Comparable\", \"java.io.Serializable\"];\n        var Date;\n        (function (Date) {\n            /**\n             * Encapsulates static data to avoid Date itself having a static\n             * initializer.\n             */\n            var StringData = (function () {\n                function StringData() {\n                }\n                StringData.DAYS_$LI$ = function () { if (StringData.DAYS == null)\n                    StringData.DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]; return StringData.DAYS; };\n                ;\n                StringData.MONTHS_$LI$ = function () { if (StringData.MONTHS == null)\n                    StringData.MONTHS = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]; return StringData.MONTHS; };\n                ;\n                return StringData;\n            }());\n            Date.StringData = StringData;\n            StringData[\"__class\"] = \"java.util.Date.StringData\";\n        })(Date = util.Date || (util.Date = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        var EventListenerProxy = (function () {\n            function EventListenerProxy(listener) {\n                this.listener = listener;\n            }\n            EventListenerProxy.prototype.getListener = function () {\n                return this.listener;\n            };\n            return EventListenerProxy;\n        }());\n        util.EventListenerProxy = EventListenerProxy;\n        EventListenerProxy[\"__class\"] = \"java.util.EventListenerProxy\";\n        EventListenerProxy[\"__interfaces\"] = [\"java.util.EventListener\"];\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Available as a superclass of event objects.\n         */\n        var EventObject = (function () {\n            function EventObject(source) {\n                this.source = source;\n            }\n            EventObject.prototype.getSource = function () {\n                return this.source;\n            };\n            return EventObject;\n        }());\n        util.EventObject = EventObject;\n        EventObject[\"__class\"] = \"java.util.EventObject\";\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * A simple wrapper around JavaScriptObject to provide {@link java.util.Map}-like semantics for any\n         * key type.\n         * <p>\n         * Implementation notes:\n         * <p>\n         * A key's hashCode is the index in backingMap which should contain that key. Since several keys may\n         * have the same hash, each value in hashCodeMap is actually an array containing all entries whose\n         * keys share the same hash.\n         */\n        var InternalHashCodeMap = (function () {\n            function InternalHashCodeMap(host) {\n                this.backingMap = java.util.InternalJsMapFactory.newJsMap();\n                this.__size = 0;\n                this.host = host;\n            }\n            InternalHashCodeMap.prototype.forEach = function (action) {\n                javaemul.internal.InternalPreconditions.checkNotNull(action);\n                for (var index126 = this.iterator(); index126.hasNext();) {\n                    var t = index126.next();\n                    {\n                        action(t);\n                    }\n                }\n            };\n            InternalHashCodeMap.prototype.put = function (key, value) {\n                var hashCode = this.hash(key);\n                var chain = this.getChainOrEmpty(hashCode);\n                if (chain.length === 0) {\n                    this.backingMap.set(hashCode, chain);\n                }\n                else {\n                    var entry = this.findEntryInChain(key, chain);\n                    if (entry != null) {\n                        return entry.setValue(value);\n                    }\n                }\n                chain[chain.length] = (new java.util.AbstractMap.SimpleEntry(key, value));\n                this.__size++;\n                java.util.ConcurrentModificationDetector.structureChanged(this.host);\n                return null;\n            };\n            InternalHashCodeMap.prototype.remove = function (key) {\n                var hashCode = this.hash(key);\n                var chain = this.getChainOrEmpty(hashCode);\n                for (var i = 0; i < chain.length; i++) {\n                    var entry = chain[i];\n                    if (this.host._equals(key, entry.getKey())) {\n                        if (chain.length === 1) {\n                            javaemul.internal.ArrayHelper.setLength(chain, 0);\n                            this.backingMap.delete(hashCode);\n                        }\n                        else {\n                            javaemul.internal.ArrayHelper.removeFrom(chain, i, 1);\n                        }\n                        this.__size--;\n                        java.util.ConcurrentModificationDetector.structureChanged(this.host);\n                        return entry.getValue();\n                    }\n                }\n                return null;\n            };\n            InternalHashCodeMap.prototype.getEntry = function (key) {\n                return this.findEntryInChain(key, this.getChainOrEmpty(this.hash(key)));\n            };\n            InternalHashCodeMap.prototype.findEntryInChain = function (key, chain) {\n                for (var index127 = 0; index127 < chain.length; index127++) {\n                    var entry = chain[index127];\n                    {\n                        if (this.host._equals(key, entry.getKey())) {\n                            return entry;\n                        }\n                    }\n                }\n                return null;\n            };\n            InternalHashCodeMap.prototype.size = function () {\n                return this.__size;\n            };\n            InternalHashCodeMap.prototype.iterator = function () {\n                return new InternalHashCodeMap.InternalHashCodeMap$0(this);\n            };\n            InternalHashCodeMap.prototype.getChainOrEmpty = function (hashCode) {\n                var chain = this.unsafeCastToArray(this.backingMap.get(hashCode));\n                return chain == null ? this.newEntryChain() : chain;\n            };\n            InternalHashCodeMap.prototype.newEntryChain = function () {\n                return [];\n            };\n            InternalHashCodeMap.prototype.unsafeCastToArray = function (arr) {\n                return arr;\n            };\n            /**\n             * Returns hash code of the key as calculated by {@link AbstractHashMap#getHashCode(Object)} but\n             * also handles null keys as well.\n             */\n            InternalHashCodeMap.prototype.hash = function (key) {\n                return key == null ? 0 : this.host.getHashCode(key);\n            };\n            return InternalHashCodeMap;\n        }());\n        util.InternalHashCodeMap = InternalHashCodeMap;\n        InternalHashCodeMap[\"__class\"] = \"java.util.InternalHashCodeMap\";\n        InternalHashCodeMap[\"__interfaces\"] = [\"java.lang.Iterable\"];\n        var InternalHashCodeMap;\n        (function (InternalHashCodeMap) {\n            var InternalHashCodeMap$0 = (function () {\n                function InternalHashCodeMap$0(__parent) {\n                    this.__parent = __parent;\n                    this.chains = this.__parent.backingMap.entries();\n                    this.itemIndex = 0;\n                    this.chain = this.__parent.newEntryChain();\n                    this.lastEntry = null;\n                }\n                InternalHashCodeMap$0.prototype.forEachRemaining = function (consumer) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(consumer);\n                    while ((this.hasNext())) {\n                        consumer(this.next());\n                    }\n                    ;\n                };\n                InternalHashCodeMap$0.prototype.hasNext = function () {\n                    if (this.itemIndex < this.chain.length) {\n                        return true;\n                    }\n                    var current = this.chains.next();\n                    if (!current.done) {\n                        this.chain = this.__parent.unsafeCastToArray(current.value[1]);\n                        this.itemIndex = 0;\n                        return true;\n                    }\n                    return false;\n                };\n                InternalHashCodeMap$0.prototype.next = function () {\n                    this.lastEntry = this.chain[this.itemIndex++];\n                    return this.lastEntry;\n                };\n                InternalHashCodeMap$0.prototype.remove = function () {\n                    this.__parent.remove(this.lastEntry.getKey());\n                    if (this.itemIndex !== 0) {\n                        this.itemIndex--;\n                    }\n                };\n                return InternalHashCodeMap$0;\n            }());\n            InternalHashCodeMap.InternalHashCodeMap$0 = InternalHashCodeMap$0;\n        })(InternalHashCodeMap = util.InternalHashCodeMap || (util.InternalHashCodeMap = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        var InternalJsMap = (function () {\n            function InternalJsMap() {\n            }\n            InternalJsMap.prototype.get$int = function (key) {\n                return null;\n            };\n            InternalJsMap.prototype.get = function (key) {\n                if (((typeof key === 'string') || key === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return null;\n                    })();\n                }\n                else if (((typeof key === 'number') || key === null)) {\n                    return this.get$int(key);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            InternalJsMap.prototype.set$int$java_lang_Object = function (key, value) {\n            };\n            InternalJsMap.prototype.set = function (key, value) {\n                if (((typeof key === 'string') || key === null) && ((value != null) || value === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                    })();\n                }\n                else if (((typeof key === 'number') || key === null) && ((value != null) || value === null)) {\n                    return this.set$int$java_lang_Object(key, value);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            InternalJsMap.prototype.delete$int = function (key) {\n                InternalJsMap.JsHelper.delete(this, key);\n            };\n            InternalJsMap.prototype.delete = function (key) {\n                var _this = this;\n                if (((typeof key === 'string') || key === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        InternalJsMap.JsHelper.delete(_this, key);\n                    })();\n                }\n                else if (((typeof key === 'number') || key === null)) {\n                    return this.delete$int(key);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            InternalJsMap.prototype.entries = function () {\n                return null;\n            };\n            return InternalJsMap;\n        }());\n        util.InternalJsMap = InternalJsMap;\n        InternalJsMap[\"__class\"] = \"java.util.InternalJsMap\";\n        var InternalJsMap;\n        (function (InternalJsMap) {\n            var Iterator = (function () {\n                function Iterator() {\n                }\n                Iterator.prototype.next = function () {\n                    return null;\n                };\n                return Iterator;\n            }());\n            InternalJsMap.Iterator = Iterator;\n            Iterator[\"__class\"] = \"java.util.InternalJsMap.Iterator\";\n            var IteratorEntry = (function () {\n                function IteratorEntry() {\n                    this.done = false;\n                }\n                return IteratorEntry;\n            }());\n            InternalJsMap.IteratorEntry = IteratorEntry;\n            IteratorEntry[\"__class\"] = \"java.util.InternalJsMap.IteratorEntry\";\n            var JsHelper = (function () {\n                function JsHelper() {\n                }\n                JsHelper.delete$java_util_InternalJsMap$int = function (obj, key) {\n                    obj[\"delete\"](key);\n                };\n                JsHelper.delete = function (obj, key) {\n                    if (((obj != null && obj instanceof java.util.InternalJsMap) || obj === null) && ((typeof key === 'string') || key === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            obj[\"delete\"](key);\n                        })();\n                    }\n                    else if (((obj != null && obj instanceof java.util.InternalJsMap) || obj === null) && ((typeof key === 'number') || key === null)) {\n                        return java.util.InternalJsMap.JsHelper.delete$java_util_InternalJsMap$int(obj, key);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                return JsHelper;\n            }());\n            InternalJsMap.JsHelper = JsHelper;\n            JsHelper[\"__class\"] = \"java.util.InternalJsMap.JsHelper\";\n        })(InternalJsMap = util.InternalJsMap || (util.InternalJsMap = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * A factory to create JavaScript Map instances.\n         */\n        var InternalJsMapFactory = (function () {\n            function InternalJsMapFactory() {\n            }\n            InternalJsMapFactory.jsMapCtor_$LI$ = function () { if (InternalJsMapFactory.jsMapCtor == null)\n                InternalJsMapFactory.jsMapCtor = InternalJsMapFactory.getJsMapConstructor(); return InternalJsMapFactory.jsMapCtor; };\n            ;\n            InternalJsMapFactory.getJsMapConstructor = function () {\n                return Map;\n            };\n            InternalJsMapFactory.newJsMap = function () {\n                return new (InternalJsMapFactory.jsMapCtor_$LI$())();\n            };\n            return InternalJsMapFactory;\n        }());\n        util.InternalJsMapFactory = InternalJsMapFactory;\n        InternalJsMapFactory[\"__class\"] = \"java.util.InternalJsMapFactory\";\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * A very simple emulation of Locale for shared-code patterns like\n         * {@code String.toUpperCase(Locale.US)}.\n         * <p>\n         * Note: Any changes to this class should put into account the assumption that\n         * was made in rest of the JRE emulation.\n         */\n        var Locale = (function () {\n            function Locale() {\n            }\n            Locale.ROOT_$LI$ = function () { if (Locale.ROOT == null)\n                Locale.ROOT = new Locale.RootLocale(); return Locale.ROOT; };\n            ;\n            Locale.ENGLISH_$LI$ = function () { if (Locale.ENGLISH == null)\n                Locale.ENGLISH = new Locale.EnglishLocale(); return Locale.ENGLISH; };\n            ;\n            Locale.US_$LI$ = function () { if (Locale.US == null)\n                Locale.US = new Locale.USLocale(); return Locale.US; };\n            ;\n            Locale.defaultLocale_$LI$ = function () { if (Locale.defaultLocale == null)\n                Locale.defaultLocale = new Locale.DefaultLocale(); return Locale.defaultLocale; };\n            ;\n            /**\n             * Returns an instance that represents the browser's default locale (not\n             * necessarily the one defined by 'gwt.locale').\n             */\n            Locale.getDefault = function () {\n                return Locale.defaultLocale_$LI$();\n            };\n            return Locale;\n        }());\n        util.Locale = Locale;\n        Locale[\"__class\"] = \"java.util.Locale\";\n        var Locale;\n        (function (Locale) {\n            var RootLocale = (function (_super) {\n                __extends(RootLocale, _super);\n                function RootLocale() {\n                    _super.apply(this, arguments);\n                }\n                RootLocale.prototype.toString = function () {\n                    return \"\";\n                };\n                return RootLocale;\n            }(java.util.Locale));\n            Locale.RootLocale = RootLocale;\n            RootLocale[\"__class\"] = \"java.util.Locale.RootLocale\";\n            var EnglishLocale = (function (_super) {\n                __extends(EnglishLocale, _super);\n                function EnglishLocale() {\n                    _super.apply(this, arguments);\n                }\n                EnglishLocale.prototype.toString = function () {\n                    return \"en\";\n                };\n                return EnglishLocale;\n            }(java.util.Locale));\n            Locale.EnglishLocale = EnglishLocale;\n            EnglishLocale[\"__class\"] = \"java.util.Locale.EnglishLocale\";\n            var USLocale = (function (_super) {\n                __extends(USLocale, _super);\n                function USLocale() {\n                    _super.apply(this, arguments);\n                }\n                USLocale.prototype.toString = function () {\n                    return \"en_US\";\n                };\n                return USLocale;\n            }(java.util.Locale));\n            Locale.USLocale = USLocale;\n            USLocale[\"__class\"] = \"java.util.Locale.USLocale\";\n            var DefaultLocale = (function (_super) {\n                __extends(DefaultLocale, _super);\n                function DefaultLocale() {\n                    _super.apply(this, arguments);\n                }\n                DefaultLocale.prototype.toString = function () {\n                    return \"unknown\";\n                };\n                return DefaultLocale;\n            }(java.util.Locale));\n            Locale.DefaultLocale = DefaultLocale;\n            DefaultLocale[\"__class\"] = \"java.util.Locale.DefaultLocale\";\n        })(Locale = util.Locale || (util.Locale = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        var logging;\n        (function (logging) {\n            /**\n             * An emulation of the java.util.logging.Formatter class. See\n             * <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/util/logging/Formatter.html\">\n             * The Java API doc for details</a>\n             */\n            var Formatter = (function () {\n                function Formatter() {\n                }\n                Formatter.prototype.formatMessage = function (record) {\n                    return this.format(record);\n                };\n                return Formatter;\n            }());\n            logging.Formatter = Formatter;\n            Formatter[\"__class\"] = \"java.util.logging.Formatter\";\n        })(logging = util.logging || (util.logging = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        var logging;\n        (function (logging) {\n            /**\n             * An emulation of the java.util.logging.Handler class. See\n             * <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/util/logging/Handler.html\">\n             * The Java API doc for details</a>\n             */\n            var Handler = (function () {\n                function Handler() {\n                }\n                Handler.prototype.getFormatter = function () {\n                    return this.formatter;\n                };\n                Handler.prototype.getLevel = function () {\n                    if (this.level != null) {\n                        return this.level;\n                    }\n                    return java.util.logging.Level.ALL_$LI$();\n                };\n                Handler.prototype.isLoggable = function (record) {\n                    return this.getLevel().intValue() <= record.getLevel().intValue();\n                };\n                Handler.prototype.setFormatter = function (newFormatter) {\n                    this.formatter = newFormatter;\n                };\n                Handler.prototype.setLevel = function (newLevel) {\n                    this.level = newLevel;\n                };\n                return Handler;\n            }());\n            logging.Handler = Handler;\n            Handler[\"__class\"] = \"java.util.logging.Handler\";\n        })(logging = util.logging || (util.logging = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        var logging;\n        (function (logging) {\n            /**\n             * An emulation of the java.util.logging.Level class. See\n             * <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/util/logging/Level.html\">\n             * The Java API doc for details</a>\n             */\n            var Level = (function () {\n                function Level() {\n                }\n                Level.ALL_$LI$ = function () { if (Level.ALL == null)\n                    Level.ALL = new Level.LevelAll(); return Level.ALL; };\n                ;\n                Level.CONFIG_$LI$ = function () { if (Level.CONFIG == null)\n                    Level.CONFIG = new Level.LevelConfig(); return Level.CONFIG; };\n                ;\n                Level.FINE_$LI$ = function () { if (Level.FINE == null)\n                    Level.FINE = new Level.LevelFine(); return Level.FINE; };\n                ;\n                Level.FINER_$LI$ = function () { if (Level.FINER == null)\n                    Level.FINER = new Level.LevelFiner(); return Level.FINER; };\n                ;\n                Level.FINEST_$LI$ = function () { if (Level.FINEST == null)\n                    Level.FINEST = new Level.LevelFinest(); return Level.FINEST; };\n                ;\n                Level.INFO_$LI$ = function () { if (Level.INFO == null)\n                    Level.INFO = new Level.LevelInfo(); return Level.INFO; };\n                ;\n                Level.OFF_$LI$ = function () { if (Level.OFF == null)\n                    Level.OFF = new Level.LevelOff(); return Level.OFF; };\n                ;\n                Level.SEVERE_$LI$ = function () { if (Level.SEVERE == null)\n                    Level.SEVERE = new Level.LevelSevere(); return Level.SEVERE; };\n                ;\n                Level.WARNING_$LI$ = function () { if (Level.WARNING == null)\n                    Level.WARNING = new Level.LevelWarning(); return Level.WARNING; };\n                ;\n                Level.parse = function (name) {\n                    java.util.logging.Logger.assertLoggingValues();\n                    var loggingDisabled = (java.lang.System.getProperty(\"gwt.logging.enabled\", \"FALSE\") === \"FALSE\");\n                    if (loggingDisabled) {\n                        return null;\n                    }\n                    var value = name.toUpperCase();\n                    switch ((value)) {\n                        case \"ALL\":\n                            return Level.ALL_$LI$();\n                        case \"CONFIG\":\n                            return Level.CONFIG_$LI$();\n                        case \"FINE\":\n                            return Level.FINE_$LI$();\n                        case \"FINER\":\n                            return Level.FINER_$LI$();\n                        case \"FINEST\":\n                            return Level.FINEST_$LI$();\n                        case \"INFO\":\n                            return Level.INFO_$LI$();\n                        case \"OFF\":\n                            return Level.OFF_$LI$();\n                        case \"SEVERE\":\n                            return Level.SEVERE_$LI$();\n                        case \"WARNING\":\n                            return Level.WARNING_$LI$();\n                        default:\n                            throw new java.lang.IllegalArgumentException(\"Invalid level \\\"\" + name + \"\\\"\");\n                    }\n                };\n                Level.prototype.getName = function () {\n                    return \"DUMMY\";\n                };\n                Level.prototype.intValue = function () {\n                    return -1;\n                };\n                Level.prototype.toString = function () {\n                    return this.getName();\n                };\n                return Level;\n            }());\n            logging.Level = Level;\n            Level[\"__class\"] = \"java.util.logging.Level\";\n            Level[\"__interfaces\"] = [\"java.io.Serializable\"];\n            var Level;\n            (function (Level) {\n                var LevelAll = (function (_super) {\n                    __extends(LevelAll, _super);\n                    function LevelAll() {\n                        _super.call(this);\n                    }\n                    LevelAll.prototype.getName = function () {\n                        return \"ALL\";\n                    };\n                    LevelAll.prototype.intValue = function () {\n                        return javaemul.internal.IntegerHelper.MIN_VALUE;\n                    };\n                    return LevelAll;\n                }(java.util.logging.Level));\n                Level.LevelAll = LevelAll;\n                LevelAll[\"__class\"] = \"java.util.logging.Level.LevelAll\";\n                LevelAll[\"__interfaces\"] = [\"java.io.Serializable\"];\n                var LevelConfig = (function (_super) {\n                    __extends(LevelConfig, _super);\n                    function LevelConfig() {\n                        _super.call(this);\n                    }\n                    LevelConfig.prototype.getName = function () {\n                        return \"CONFIG\";\n                    };\n                    LevelConfig.prototype.intValue = function () {\n                        return 700;\n                    };\n                    return LevelConfig;\n                }(java.util.logging.Level));\n                Level.LevelConfig = LevelConfig;\n                LevelConfig[\"__class\"] = \"java.util.logging.Level.LevelConfig\";\n                LevelConfig[\"__interfaces\"] = [\"java.io.Serializable\"];\n                var LevelFine = (function (_super) {\n                    __extends(LevelFine, _super);\n                    function LevelFine() {\n                        _super.call(this);\n                    }\n                    LevelFine.prototype.getName = function () {\n                        return \"FINE\";\n                    };\n                    LevelFine.prototype.intValue = function () {\n                        return 500;\n                    };\n                    return LevelFine;\n                }(java.util.logging.Level));\n                Level.LevelFine = LevelFine;\n                LevelFine[\"__class\"] = \"java.util.logging.Level.LevelFine\";\n                LevelFine[\"__interfaces\"] = [\"java.io.Serializable\"];\n                var LevelFiner = (function (_super) {\n                    __extends(LevelFiner, _super);\n                    function LevelFiner() {\n                        _super.call(this);\n                    }\n                    LevelFiner.prototype.getName = function () {\n                        return \"FINER\";\n                    };\n                    LevelFiner.prototype.intValue = function () {\n                        return 400;\n                    };\n                    return LevelFiner;\n                }(java.util.logging.Level));\n                Level.LevelFiner = LevelFiner;\n                LevelFiner[\"__class\"] = \"java.util.logging.Level.LevelFiner\";\n                LevelFiner[\"__interfaces\"] = [\"java.io.Serializable\"];\n                var LevelFinest = (function (_super) {\n                    __extends(LevelFinest, _super);\n                    function LevelFinest() {\n                        _super.call(this);\n                    }\n                    LevelFinest.prototype.getName = function () {\n                        return \"FINEST\";\n                    };\n                    LevelFinest.prototype.intValue = function () {\n                        return 300;\n                    };\n                    return LevelFinest;\n                }(java.util.logging.Level));\n                Level.LevelFinest = LevelFinest;\n                LevelFinest[\"__class\"] = \"java.util.logging.Level.LevelFinest\";\n                LevelFinest[\"__interfaces\"] = [\"java.io.Serializable\"];\n                var LevelInfo = (function (_super) {\n                    __extends(LevelInfo, _super);\n                    function LevelInfo() {\n                        _super.call(this);\n                    }\n                    LevelInfo.prototype.getName = function () {\n                        return \"INFO\";\n                    };\n                    LevelInfo.prototype.intValue = function () {\n                        return 800;\n                    };\n                    return LevelInfo;\n                }(java.util.logging.Level));\n                Level.LevelInfo = LevelInfo;\n                LevelInfo[\"__class\"] = \"java.util.logging.Level.LevelInfo\";\n                LevelInfo[\"__interfaces\"] = [\"java.io.Serializable\"];\n                var LevelOff = (function (_super) {\n                    __extends(LevelOff, _super);\n                    function LevelOff() {\n                        _super.call(this);\n                    }\n                    LevelOff.prototype.getName = function () {\n                        return \"OFF\";\n                    };\n                    LevelOff.prototype.intValue = function () {\n                        return javaemul.internal.IntegerHelper.MAX_VALUE;\n                    };\n                    return LevelOff;\n                }(java.util.logging.Level));\n                Level.LevelOff = LevelOff;\n                LevelOff[\"__class\"] = \"java.util.logging.Level.LevelOff\";\n                LevelOff[\"__interfaces\"] = [\"java.io.Serializable\"];\n                var LevelSevere = (function (_super) {\n                    __extends(LevelSevere, _super);\n                    function LevelSevere() {\n                        _super.call(this);\n                    }\n                    LevelSevere.prototype.getName = function () {\n                        return \"SEVERE\";\n                    };\n                    LevelSevere.prototype.intValue = function () {\n                        return 1000;\n                    };\n                    return LevelSevere;\n                }(java.util.logging.Level));\n                Level.LevelSevere = LevelSevere;\n                LevelSevere[\"__class\"] = \"java.util.logging.Level.LevelSevere\";\n                LevelSevere[\"__interfaces\"] = [\"java.io.Serializable\"];\n                var LevelWarning = (function (_super) {\n                    __extends(LevelWarning, _super);\n                    function LevelWarning() {\n                        _super.call(this);\n                    }\n                    LevelWarning.prototype.getName = function () {\n                        return \"WARNING\";\n                    };\n                    LevelWarning.prototype.intValue = function () {\n                        return 900;\n                    };\n                    return LevelWarning;\n                }(java.util.logging.Level));\n                Level.LevelWarning = LevelWarning;\n                LevelWarning[\"__class\"] = \"java.util.logging.Level.LevelWarning\";\n                LevelWarning[\"__interfaces\"] = [\"java.io.Serializable\"];\n            })(Level = logging.Level || (logging.Level = {}));\n        })(logging = util.logging || (util.logging = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        var logging;\n        (function (logging) {\n            /**\n             * An emulation of the java.util.logging.LogManager class. See\n             * <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/util/logging/LogManger.html\">\n             * The Java API doc for details</a>\n             */\n            var LogManager = (function () {\n                function LogManager() {\n                    this.loggerMap = (new java.util.HashMap());\n                }\n                LogManager.getLogManager = function () {\n                    if (LogManager.singleton == null) {\n                        LogManager.singleton = new LogManager();\n                        var rootLogger = new java.util.logging.Logger(\"\", null);\n                        rootLogger.setLevel(java.util.logging.Level.INFO_$LI$());\n                        LogManager.singleton.addLoggerImpl(rootLogger);\n                    }\n                    return LogManager.singleton;\n                };\n                LogManager.prototype.addLogger = function (logger) {\n                    if (this.getLogger(logger.getName()) != null) {\n                        return false;\n                    }\n                    this.addLoggerAndEnsureParents(logger);\n                    return true;\n                };\n                LogManager.prototype.getLogger = function (name) {\n                    return this.loggerMap.get(name);\n                };\n                LogManager.prototype.getLoggerNames = function () {\n                    return java.util.Collections.enumeration(this.loggerMap.keySet());\n                };\n                /**\n                 * Helper function to add a logger when we have already determined that it\n                 * does not exist.  When we add a logger, we recursively add all of it's\n                 * ancestors. Since loggers do not get removed, logger creation is cheap,\n                 * and there are not usually too many loggers in an ancestry chain,\n                 * this is a simple way to ensure that the parent/child relationships are\n                 * always correctly set up.\n                 */\n                LogManager.prototype.addLoggerAndEnsureParents = function (logger) {\n                    var name = logger.getName();\n                    var parentName = name.substring(0, Math.max(0, name.lastIndexOf('.')));\n                    logger.setParent(this.ensureLogger(parentName));\n                    this.addLoggerImpl(logger);\n                };\n                LogManager.prototype.addLoggerImpl = function (logger) {\n                    if ((java.lang.System.getProperty(\"gwt.logging.simpleConsoleHandler\", \"ENABLED\") === \"ENABLED\")) {\n                        if ((logger.getName().length === 0)) {\n                            logger.addHandler(new java.util.logging.SimpleConsoleLogHandler());\n                        }\n                    }\n                    this.loggerMap.put(logger.getName(), logger);\n                };\n                /**\n                 * Helper function to create a logger if it does not exist since the public\n                 * APIs for getLogger and addLogger make it difficult to use those functions\n                 * for this.\n                 */\n                LogManager.prototype.ensureLogger = function (name) {\n                    var logger = this.getLogger(name);\n                    if (logger == null) {\n                        var newLogger = new java.util.logging.Logger(name, null);\n                        this.addLoggerAndEnsureParents(newLogger);\n                        return newLogger;\n                    }\n                    return logger;\n                };\n                return LogManager;\n            }());\n            logging.LogManager = LogManager;\n            LogManager[\"__class\"] = \"java.util.logging.LogManager\";\n        })(logging = util.logging || (util.logging = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        var logging;\n        (function (logging) {\n            /**\n             * An emulation of the java.util.logging.LogRecord class. See\n             * <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/util/logging/LogRecord.html\">\n             * The Java API doc for details</a>\n             */\n            var LogRecord = (function () {\n                function LogRecord(level, msg) {\n                    var _this = this;\n                    this.loggerName = \"\";\n                    this.thrown = null;\n                    if (((level != null && level instanceof java.util.logging.Level) || level === null) && ((typeof msg === 'string') || msg === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        this.loggerName = \"\";\n                        this.thrown = null;\n                        this.millis = 0;\n                        (function () {\n                            _this.level = level;\n                            _this.msg = msg;\n                            _this.millis = java.lang.System.currentTimeMillis();\n                        })();\n                    }\n                    else if (level === undefined && msg === undefined) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        this.loggerName = \"\";\n                        this.thrown = null;\n                        this.millis = 0;\n                    }\n                    else\n                        throw new Error('invalid overload');\n                }\n                LogRecord.prototype.getLevel = function () {\n                    return this.level;\n                };\n                LogRecord.prototype.getLoggerName = function () {\n                    return this.loggerName;\n                };\n                LogRecord.prototype.getMessage = function () {\n                    return this.msg;\n                };\n                LogRecord.prototype.getMillis = function () {\n                    return this.millis;\n                };\n                LogRecord.prototype.getThrown = function () {\n                    return this.thrown;\n                };\n                LogRecord.prototype.setLevel = function (newLevel) {\n                    this.level = newLevel;\n                };\n                LogRecord.prototype.setLoggerName = function (newName) {\n                    this.loggerName = newName;\n                };\n                LogRecord.prototype.setMessage = function (newMessage) {\n                    this.msg = newMessage;\n                };\n                LogRecord.prototype.setMillis = function (newMillis) {\n                    this.millis = newMillis;\n                };\n                LogRecord.prototype.setThrown = function (newThrown) {\n                    this.thrown = newThrown;\n                };\n                return LogRecord;\n            }());\n            logging.LogRecord = LogRecord;\n            LogRecord[\"__class\"] = \"java.util.logging.LogRecord\";\n            LogRecord[\"__interfaces\"] = [\"java.io.Serializable\"];\n        })(logging = util.logging || (util.logging = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * See <a\n         * href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Objects.html\">the\n         * official Java API doc</a> for details.\n         */\n        var Objects = (function () {\n            function Objects() {\n            }\n            Objects.compare = function (a, b, c) {\n                return a === b ? 0 : c.compare(a, b);\n            };\n            Objects.deepEquals = function (a, b) {\n                if (a === b) {\n                    return true;\n                }\n                if (a == null || b == null) {\n                    return false;\n                }\n                if ((a === b)) {\n                    return true;\n                }\n                var class1 = a.constructor;\n                var class2 = b.constructor;\n                if (!class1.isArray() || !class1.equals(class2)) {\n                    return false;\n                }\n                if (a != null && a instanceof Array) {\n                    return java.util.Arrays.deepEquals(a, b);\n                }\n                if (a != null && a instanceof Array) {\n                    return java.util.Arrays.equals(a, b);\n                }\n                if (a != null && a instanceof Array) {\n                    return java.util.Arrays.equals(a, b);\n                }\n                if (a != null && a instanceof Array) {\n                    return java.util.Arrays.equals(a, b);\n                }\n                if (a != null && a instanceof Array) {\n                    return java.util.Arrays.equals(a, b);\n                }\n                if (a != null && a instanceof Array) {\n                    return java.util.Arrays.equals(a, b);\n                }\n                if (a != null && a instanceof Array) {\n                    return java.util.Arrays.equals(a, b);\n                }\n                if (a != null && a instanceof Array) {\n                    return java.util.Arrays.equals(a, b);\n                }\n                if (a != null && a instanceof Array) {\n                    return java.util.Arrays.equals(a, b);\n                }\n                return true;\n            };\n            Objects.equals = function (a, b) {\n                return (a === b) || (a != null && (a === b));\n            };\n            Objects.hashCode = function (o) {\n                return o != null ? o.toString() : 0;\n            };\n            Objects.hash = function () {\n                var values = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    values[_i - 0] = arguments[_i];\n                }\n                return java.util.Arrays.hashCode(values);\n            };\n            Objects.isNull = function (obj) {\n                return obj == null;\n            };\n            Objects.nonNull = function (obj) {\n                return obj != null;\n            };\n            Objects.requireNonNull$java_lang_Object = function (obj) {\n                if (obj == null) {\n                    throw new java.lang.NullPointerException();\n                }\n                return obj;\n            };\n            Objects.requireNonNull = function (obj, message) {\n                if (((obj != null) || obj === null) && ((typeof message === 'string') || message === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (obj == null) {\n                            throw new java.lang.NullPointerException(message);\n                        }\n                        return obj;\n                    })();\n                }\n                else if (((obj != null) || obj === null) && ((typeof message === 'function' && message.length == 0) || message === null)) {\n                    return java.util.Objects.requireNonNull$java_lang_Object$java_util_function_Supplier(obj, message);\n                }\n                else if (((obj != null) || obj === null) && message === undefined) {\n                    return java.util.Objects.requireNonNull$java_lang_Object(obj);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Objects.requireNonNull$java_lang_Object$java_util_function_Supplier = function (obj, messageSupplier) {\n                if (obj == null) {\n                    throw new java.lang.NullPointerException(messageSupplier());\n                }\n                return obj;\n            };\n            Objects.toString$java_lang_Object = function (o) {\n                return new String(o).toString();\n            };\n            Objects.toString = function (o, nullDefault) {\n                if (((o != null) || o === null) && ((typeof nullDefault === 'string') || nullDefault === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return o != null ? o.toString() : nullDefault;\n                    })();\n                }\n                else if (((o != null) || o === null) && nullDefault === undefined) {\n                    return java.util.Objects.toString$java_lang_Object(o);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            return Objects;\n        }());\n        util.Objects = Objects;\n        Objects[\"__class\"] = \"java.util.Objects\";\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Implementation of the observable class.\n         */\n        var Observable = (function () {\n            /**\n             * Construct an Observable with zero Observers.\n             */\n            function Observable() {\n                this.changed = false;\n                this.obs = (new java.util.Vector());\n            }\n            /**\n             * Adds an observer to the set of observers for this object, provided that\n             * it is not the same as some observer already in the set. The order in\n             * which notifications will be delivered to multiple observers is not\n             * specified. See the class comment.\n             *\n             * @param o\n             * an observer to be added.\n             * @throws NullPointerException\n             * if the parameter o is null.\n             */\n            Observable.prototype.addObserver = function (o) {\n                if (o == null)\n                    throw new java.lang.NullPointerException();\n                if (!this.obs.contains(o)) {\n                    this.obs.addElement(o);\n                }\n            };\n            /**\n             * Deletes an observer from the set of observers of this object. Passing\n             * <CODE>null</CODE> to this method will have no effect.\n             *\n             * @param o\n             * the observer to be deleted.\n             */\n            Observable.prototype.deleteObserver = function (o) {\n                this.obs.removeElement(o);\n            };\n            /**\n             * If this object has changed, as indicated by the <code>hasChanged</code>\n             * method, then notify all of its observers and then call the\n             * <code>clearChanged</code> method to indicate that this object has no\n             * longer changed.\n             * <p>\n             * Each observer has its <code>update</code> method called with two\n             * arguments: this observable object and the <code>arg</code> argument.\n             *\n             * @param arg\n             * any object.\n             * @see java.util.Observable#clearChanged()\n             * @see java.util.Observable#hasChanged()\n             * @see java.util.Observer#update(java.util.Observable, java.lang.Object)\n             */\n            Observable.prototype.notifyObservers = function (arg) {\n                if (arg === void 0) { arg = null; }\n                var arrLocal;\n                if (!this.changed)\n                    return;\n                arrLocal = this.obs.toArray();\n                this.clearChanged();\n                for (var i = arrLocal.length - 1; i >= 0; i--)\n                    arrLocal[i].update(this, arg);\n            };\n            /**\n             * Clears the observer list so that this object no longer has any observers.\n             */\n            Observable.prototype.deleteObservers = function () {\n                this.obs.removeAllElements();\n            };\n            /**\n             * Marks this <tt>Observable</tt> object as having been changed; the\n             * <tt>hasChanged</tt> method will now return <tt>true</tt>.\n             */\n            Observable.prototype.setChanged = function () {\n                this.changed = true;\n            };\n            /**\n             * Indicates that this object has no longer changed, or that it has already\n             * notified all of its observers of its most recent change, so that the\n             * <tt>hasChanged</tt> method will now return <tt>false</tt>. This method is\n             * called automatically by the <code>notifyObservers</code> methods.\n             *\n             * @see java.util.Observable#notifyObservers()\n             * @see java.util.Observable#notifyObservers(java.lang.Object)\n             */\n            Observable.prototype.clearChanged = function () {\n                this.changed = false;\n            };\n            /**\n             * Tests if this object has changed.\n             *\n             * @return <code>true</code> if and only if the <code>setChanged</code>\n             * method has been called more recently than the\n             * <code>clearChanged</code> method on this object;\n             * <code>false</code> otherwise.\n             * @see java.util.Observable#clearChanged()\n             * @see java.util.Observable#setChanged()\n             */\n            Observable.prototype.hasChanged = function () {\n                return this.changed;\n            };\n            /**\n             * Returns the number of observers of this <tt>Observable</tt> object.\n             *\n             * @return the number of observers of this object.\n             */\n            Observable.prototype.countObservers = function () {\n                return this.obs.size();\n            };\n            return Observable;\n        }());\n        util.Observable = Observable;\n        Observable[\"__class\"] = \"java.util.Observable\";\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * See <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html\">\n         * the official Java API doc</a> for details.\n         *\n         * @param <T> type of the wrapped reference\n         */\n        var Optional = (function () {\n            function Optional(ref) {\n                var _this = this;\n                if (((ref != null) || ref === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    (function () {\n                        _this.ref = javaemul.internal.InternalPreconditions.checkCriticalNotNull(ref);\n                    })();\n                }\n                else if (ref === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    (function () {\n                        _this.ref = null;\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            Optional.empty = function () {\n                return Optional.EMPTY_$LI$();\n            };\n            Optional.of = function (value) {\n                return (new Optional(value));\n            };\n            Optional.ofNullable = function (value) {\n                return value == null ? Optional.empty() : Optional.of(value);\n            };\n            Optional.EMPTY_$LI$ = function () { if (Optional.EMPTY == null)\n                Optional.EMPTY = new Optional(); return Optional.EMPTY; };\n            ;\n            Optional.prototype.isPresent = function () {\n                return this.ref != null;\n            };\n            Optional.prototype.get = function () {\n                javaemul.internal.InternalPreconditions.checkCriticalElement(this.isPresent());\n                return this.ref;\n            };\n            Optional.prototype.ifPresent = function (consumer) {\n                if (this.isPresent()) {\n                    consumer(this.ref);\n                }\n            };\n            Optional.prototype.filter = function (predicate) {\n                javaemul.internal.InternalPreconditions.checkCriticalNotNull(predicate);\n                if (!this.isPresent() || predicate(this.ref)) {\n                    return this;\n                }\n                return Optional.empty();\n            };\n            Optional.prototype.map = function (mapper) {\n                javaemul.internal.InternalPreconditions.checkCriticalNotNull(mapper);\n                if (this.isPresent()) {\n                    return Optional.ofNullable(mapper(this.ref));\n                }\n                return Optional.empty();\n            };\n            Optional.prototype.flatMap = function (mapper) {\n                javaemul.internal.InternalPreconditions.checkCriticalNotNull(mapper);\n                if (this.isPresent()) {\n                    return javaemul.internal.InternalPreconditions.checkCriticalNotNull(mapper(this.ref));\n                }\n                return Optional.empty();\n            };\n            Optional.prototype.orElse = function (other) {\n                return this.isPresent() ? this.ref : other;\n            };\n            Optional.prototype.orElseGet = function (other) {\n                return this.isPresent() ? this.ref : other();\n            };\n            Optional.prototype.orElseThrow = function (exceptionSupplier) {\n                if (this.isPresent()) {\n                    return this.ref;\n                }\n                throw exceptionSupplier();\n            };\n            Optional.prototype.equals = function (obj) {\n                if (obj === this) {\n                    return true;\n                }\n                if (!(obj != null && obj instanceof java.util.Optional)) {\n                    return false;\n                }\n                var other = obj;\n                return java.util.Objects.equals(this.ref, other.ref);\n            };\n            Optional.prototype.hashCode = function () {\n                return java.util.Objects.hashCode(this.ref);\n            };\n            Optional.prototype.toString = function () {\n                return this.isPresent() ? \"Optional.of(\" + new String(this.ref).toString() + \")\" : \"Optional.empty()\";\n            };\n            return Optional;\n        }());\n        util.Optional = Optional;\n        Optional[\"__class\"] = \"java.util.Optional\";\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * See <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/OptionalDouble.html\">\n         * the official Java API doc</a> for details.\n         */\n        var OptionalDouble = (function () {\n            function OptionalDouble(value) {\n                var _this = this;\n                if (((typeof value === 'number') || value === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    this.ref = 0;\n                    this.present = false;\n                    (function () {\n                        _this.ref = value;\n                        _this.present = true;\n                    })();\n                }\n                else if (value === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    this.ref = 0;\n                    this.present = false;\n                    (function () {\n                        _this.ref = 0;\n                        _this.present = false;\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            OptionalDouble.empty = function () {\n                return OptionalDouble.EMPTY_$LI$();\n            };\n            OptionalDouble.of = function (value) {\n                return new OptionalDouble(value);\n            };\n            OptionalDouble.EMPTY_$LI$ = function () { if (OptionalDouble.EMPTY == null)\n                OptionalDouble.EMPTY = new OptionalDouble(); return OptionalDouble.EMPTY; };\n            ;\n            OptionalDouble.prototype.isPresent = function () {\n                return this.present;\n            };\n            OptionalDouble.prototype.getAsDouble = function () {\n                javaemul.internal.InternalPreconditions.checkCriticalElement(this.present);\n                return this.ref;\n            };\n            OptionalDouble.prototype.ifPresent = function (consumer) {\n                if (this.present) {\n                    consumer(this.ref);\n                }\n            };\n            OptionalDouble.prototype.orElse = function (other) {\n                return this.present ? this.ref : other;\n            };\n            OptionalDouble.prototype.orElseGet = function (other) {\n                return this.present ? this.ref : other();\n            };\n            OptionalDouble.prototype.orElseThrow = function (exceptionSupplier) {\n                if (this.present) {\n                    return this.ref;\n                }\n                throw exceptionSupplier();\n            };\n            OptionalDouble.prototype.equals = function (obj) {\n                if (obj === this) {\n                    return true;\n                }\n                if (!(obj != null && obj instanceof java.util.OptionalDouble)) {\n                    return false;\n                }\n                var other = obj;\n                return this.present === other.present && javaemul.internal.DoubleHelper.compare(this.ref, other.ref) === 0;\n            };\n            OptionalDouble.prototype.hashCode = function () {\n                return this.present ? javaemul.internal.DoubleHelper.hashCode(this.ref) : 0;\n            };\n            OptionalDouble.prototype.toString = function () {\n                return this.present ? \"OptionalDouble.of(\" + ('' + this.ref) + \")\" : \"OptionalDouble.empty()\";\n            };\n            return OptionalDouble;\n        }());\n        util.OptionalDouble = OptionalDouble;\n        OptionalDouble[\"__class\"] = \"java.util.OptionalDouble\";\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * See <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/OptionalInt.html\">\n         * the official Java API doc</a> for details.\n         */\n        var OptionalInt = (function () {\n            function OptionalInt(value) {\n                var _this = this;\n                if (((typeof value === 'number') || value === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    this.ref = 0;\n                    this.present = false;\n                    (function () {\n                        _this.ref = value;\n                        _this.present = true;\n                    })();\n                }\n                else if (value === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    this.ref = 0;\n                    this.present = false;\n                    (function () {\n                        _this.ref = 0;\n                        _this.present = false;\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            OptionalInt.empty = function () {\n                return OptionalInt.EMPTY_$LI$();\n            };\n            OptionalInt.of = function (value) {\n                return new OptionalInt(value);\n            };\n            OptionalInt.EMPTY_$LI$ = function () { if (OptionalInt.EMPTY == null)\n                OptionalInt.EMPTY = new OptionalInt(); return OptionalInt.EMPTY; };\n            ;\n            OptionalInt.prototype.isPresent = function () {\n                return this.present;\n            };\n            OptionalInt.prototype.getAsInt = function () {\n                javaemul.internal.InternalPreconditions.checkCriticalElement(this.present);\n                return this.ref;\n            };\n            OptionalInt.prototype.ifPresent = function (consumer) {\n                if (this.present) {\n                    consumer(this.ref);\n                }\n            };\n            OptionalInt.prototype.orElse = function (other) {\n                return this.present ? this.ref : other;\n            };\n            OptionalInt.prototype.orElseGet = function (other) {\n                return this.present ? this.ref : other();\n            };\n            OptionalInt.prototype.orElseThrow = function (exceptionSupplier) {\n                if (this.present) {\n                    return this.ref;\n                }\n                throw exceptionSupplier();\n            };\n            OptionalInt.prototype.equals = function (obj) {\n                if (obj === this) {\n                    return true;\n                }\n                if (!(obj != null && obj instanceof java.util.OptionalInt)) {\n                    return false;\n                }\n                var other = obj;\n                return this.present === other.present && javaemul.internal.IntegerHelper.compare(this.ref, other.ref) === 0;\n            };\n            OptionalInt.prototype.hashCode = function () {\n                return this.present ? javaemul.internal.IntegerHelper.hashCode(this.ref) : 0;\n            };\n            OptionalInt.prototype.toString = function () {\n                return this.present ? \"OptionalInt.of(\" + ('' + this.ref) + \")\" : \"OptionalInt.empty()\";\n            };\n            return OptionalInt;\n        }());\n        util.OptionalInt = OptionalInt;\n        OptionalInt[\"__class\"] = \"java.util.OptionalInt\";\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * See <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/OptionalLong.html\">\n         * the official Java API doc</a> for details.\n         */\n        var OptionalLong = (function () {\n            function OptionalLong(value) {\n                var _this = this;\n                if (((typeof value === 'number') || value === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    this.ref = 0;\n                    this.present = false;\n                    (function () {\n                        _this.ref = value;\n                        _this.present = true;\n                    })();\n                }\n                else if (value === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    this.ref = 0;\n                    this.present = false;\n                    (function () {\n                        _this.ref = 0;\n                        _this.present = false;\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            OptionalLong.empty = function () {\n                return OptionalLong.EMPTY_$LI$();\n            };\n            OptionalLong.of = function (value) {\n                return new OptionalLong(value);\n            };\n            OptionalLong.EMPTY_$LI$ = function () { if (OptionalLong.EMPTY == null)\n                OptionalLong.EMPTY = new OptionalLong(); return OptionalLong.EMPTY; };\n            ;\n            OptionalLong.prototype.isPresent = function () {\n                return this.present;\n            };\n            OptionalLong.prototype.getAsLong = function () {\n                javaemul.internal.InternalPreconditions.checkCriticalElement(this.present);\n                return this.ref;\n            };\n            OptionalLong.prototype.ifPresent = function (consumer) {\n                if (this.present) {\n                    consumer(this.ref);\n                }\n            };\n            OptionalLong.prototype.orElse = function (other) {\n                return this.present ? this.ref : other;\n            };\n            OptionalLong.prototype.orElseGet = function (other) {\n                return this.present ? this.ref : other();\n            };\n            OptionalLong.prototype.orElseThrow = function (exceptionSupplier) {\n                if (this.present) {\n                    return this.ref;\n                }\n                throw exceptionSupplier();\n            };\n            OptionalLong.prototype.equals = function (obj) {\n                if (obj === this) {\n                    return true;\n                }\n                if (!(obj != null && obj instanceof java.util.OptionalLong)) {\n                    return false;\n                }\n                var other = obj;\n                return this.present === other.present && javaemul.internal.LongHelper.compare(this.ref, other.ref) === 0;\n            };\n            OptionalLong.prototype.hashCode = function () {\n                return this.present ? javaemul.internal.LongHelper.hashCode(this.ref) : 0;\n            };\n            OptionalLong.prototype.toString = function () {\n                return this.present ? \"OptionalLong.of(\" + ('' + this.ref) + \")\" : \"OptionalLong.empty()\";\n            };\n            return OptionalLong;\n        }());\n        util.OptionalLong = OptionalLong;\n        OptionalLong[\"__class\"] = \"java.util.OptionalLong\";\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * This class provides methods that generates pseudo-random numbers of different\n         * types, such as {@code int}, {@code long}, {@code double}, and {@code float}.\n         * It follows the algorithms specified in the JRE javadoc.\n         *\n         * This emulated version of Random is not serializable.\n         */\n        var Random = (function () {\n            /**\n             * Construct a random generator with the given {@code seed} as the initial\n             * state.\n             *\n             * @param seed the seed that will determine the initial state of this random\n             * number generator.\n             * @see #setSeed\n             */\n            function Random(seed) {\n                var _this = this;\n                /**\n                 * The boolean value indicating if the second Gaussian number is available.\n                 */\n                this.haveNextNextGaussian = false;\n                if (((typeof seed === 'number') || seed === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    this.haveNextNextGaussian = false;\n                    this.nextNextGaussian = 0;\n                    this.seedhi = 0;\n                    this.seedlo = 0;\n                    (function () {\n                        _this.setSeed(seed);\n                    })();\n                }\n                else if (seed === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    this.haveNextNextGaussian = false;\n                    this.nextNextGaussian = 0;\n                    this.seedhi = 0;\n                    this.seedlo = 0;\n                    (function () {\n                        var seed = Random.uniqueSeed++ + javaemul.internal.DateUtil.now();\n                        var hi = (Math.floor(seed * Random.twoToTheMinus24) | 0) & 16777215;\n                        var lo = ((seed - (hi * Random.twoToThe24)) | 0);\n                        _this.setSeed(hi, lo);\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            Random.__static_initialize = function () { if (!Random.__static_initialized) {\n                Random.__static_initialized = true;\n                Random.__static_initializer_0();\n            } };\n            Random.twoToTheXMinus24_$LI$ = function () { Random.__static_initialize(); if (Random.twoToTheXMinus24 == null)\n                Random.twoToTheXMinus24 = new Array(25); return Random.twoToTheXMinus24; };\n            ;\n            Random.twoToTheXMinus48_$LI$ = function () { Random.__static_initialize(); if (Random.twoToTheXMinus48 == null)\n                Random.twoToTheXMinus48 = new Array(33); return Random.twoToTheXMinus48; };\n            ;\n            Random.__static_initializer_0 = function () {\n                var twoToTheXMinus48Tmp = 1.52587890625E-5;\n                for (var i = 32; i >= 0; i--) {\n                    Random.twoToTheXMinus48_$LI$()[i] = twoToTheXMinus48Tmp;\n                    twoToTheXMinus48Tmp *= 0.5;\n                }\n                var twoToTheXMinus24Tmp = 1.0;\n                for (var i = 24; i >= 0; i--) {\n                    Random.twoToTheXMinus24_$LI$()[i] = twoToTheXMinus24Tmp;\n                    twoToTheXMinus24Tmp *= 0.5;\n                }\n            };\n            /**\n             * Returns the next pseudo-random, uniformly distributed {@code boolean} value\n             * generated by this generator.\n             *\n             * @return a pseudo-random, uniformly distributed boolean value.\n             */\n            Random.prototype.nextBoolean = function () {\n                return this.nextInternal(1) !== 0;\n            };\n            /**\n             * Modifies the {@code byte} array by a random sequence of {@code byte}s\n             * generated by this random number generator.\n             *\n             * @param buf non-null array to contain the new random {@code byte}s.\n             * @see #next\n             */\n            Random.prototype.nextBytes = function (buf) {\n                javaemul.internal.InternalPreconditions.checkNotNull(buf);\n                var rand = 0;\n                var count = 0;\n                var loop = 0;\n                while ((count < buf.length)) {\n                    if (loop === 0) {\n                        rand = (this.nextInternal(32) | 0);\n                        loop = 3;\n                    }\n                    else {\n                        loop--;\n                    }\n                    buf[count++] = (rand | 0);\n                    rand >>= 8;\n                }\n                ;\n            };\n            /**\n             * Generates a normally distributed random {@code double} number between 0.0\n             * inclusively and 1.0 exclusively.\n             *\n             * @return a random {@code double} in the range [0.0 - 1.0)\n             * @see #nextFloat\n             */\n            Random.prototype.nextDouble = function () {\n                return this.nextInternal(26) * Random.twoToTheMinus26 + this.nextInternal(27) * Random.twoToTheMinus53;\n            };\n            /**\n             * Generates a normally distributed random {@code float} number between 0.0\n             * inclusively and 1.0 exclusively.\n             *\n             * @return float a random {@code float} number between [0.0 and 1.0)\n             * @see #nextDouble\n             */\n            Random.prototype.nextFloat = function () {\n                return (this.nextInternal(24) * Random.twoToTheMinus24);\n            };\n            /**\n             * Pseudo-randomly generates (approximately) a normally distributed {@code\n             * double} value with mean 0.0 and a standard deviation value of {@code 1.0}\n             * using the <i>polar method<i> of G. E. P. Box, M. E. Muller, and G.\n             * Marsaglia, as described by Donald E. Knuth in <i>The Art of Computer\n             * Programming, Volume 2: Seminumerical Algorithms</i>, section 3.4.1,\n             * subsection C, algorithm P.\n             *\n             * @return a random {@code double}\n             * @see #nextDouble\n             */\n            Random.prototype.nextGaussian = function () {\n                if (this.haveNextNextGaussian) {\n                    this.haveNextNextGaussian = false;\n                    return this.nextNextGaussian;\n                }\n                var v1;\n                var v2;\n                var s;\n                do {\n                    v1 = 2 * this.nextDouble() - 1;\n                    v2 = 2 * this.nextDouble() - 1;\n                    s = v1 * v1 + v2 * v2;\n                } while ((s >= 1));\n                var norm = (s === 0) ? 0.0 : Math.sqrt(-2.0 * Math.log(s) / s);\n                this.nextNextGaussian = v2 * norm;\n                this.haveNextNextGaussian = true;\n                return v1 * norm;\n            };\n            /**\n             * Generates a uniformly distributed 32-bit {@code int} value from the random\n             * number sequence.\n             *\n             * @return a uniformly distributed {@code int} value.\n             * @see java.lang.Integer#MAX_VALUE\n             * @see java.lang.Integer#MIN_VALUE\n             * @see #next\n             * @see #nextLong\n             */\n            Random.prototype.nextInt$ = function () {\n                return (this.nextInternal(32) | 0);\n            };\n            /**\n             * Returns a new pseudo-random {@code int} value which is uniformly\n             * distributed between 0 (inclusively) and the value of {@code n}\n             * (exclusively).\n             *\n             * @param n the exclusive upper border of the range [0 - n).\n             * @return a random {@code int}.\n             */\n            Random.prototype.nextInt = function (n) {\n                var _this = this;\n                if (((typeof n === 'number') || n === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        javaemul.internal.InternalPreconditions.checkCriticalArgument(n > 0);\n                        if ((n & -n) === n) {\n                            return (((n * _this.nextInternal(31)) * Random.twoToTheMinus31) | 0);\n                        }\n                        var bits;\n                        var val;\n                        do {\n                            bits = _this.nextInternal(31);\n                            val = bits % n;\n                        } while ((bits - val + (n - 1) < 0));\n                        return (val | 0);\n                    })();\n                }\n                else if (n === undefined) {\n                    return this.nextInt$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Generates a uniformly distributed 64-bit integer value from the random\n             * number sequence.\n             *\n             * @return 64-bit random integer.\n             * @see java.lang.Integer#MAX_VALUE\n             * @see java.lang.Integer#MIN_VALUE\n             * @see #next\n             * @see #nextInt()\n             * @see #nextInt(int)\n             */\n            Random.prototype.nextLong = function () {\n                return (Math.round(this.nextInternal(32)) << 32) + Math.round(this.nextInternal(32));\n            };\n            /**\n             * Modifies the seed a using linear congruential formula presented in <i>The\n             * Art of Computer Programming, Volume 2</i>, Section 3.2.1.\n             *\n             * @param seed the seed that alters the state of the random number generator.\n             * @see #next\n             * @see #Random()\n             * @see #Random(long)\n             */\n            Random.prototype.setSeed$long = function (seed) {\n                this.setSeed((((seed >> 24) & 16777215) | 0), ((seed & 16777215) | 0));\n            };\n            /**\n             * Returns a pseudo-random uniformly distributed {@code int} value of the\n             * number of bits specified by the argument {@code bits} as described by\n             * Donald E. Knuth in <i>The Art of Computer Programming, Volume 2:\n             * Seminumerical Algorithms</i>, section 3.2.1.\n             *\n             * @param bits number of bits of the returned value.\n             * @return a pseudo-random generated int number.\n             * @see #nextBytes\n             * @see #nextDouble\n             * @see #nextFloat\n             * @see #nextInt()\n             * @see #nextInt(int)\n             * @see #nextGaussian\n             * @see #nextLong\n             */\n            Random.prototype.next = function (bits) {\n                return (this.nextInternal(bits) | 0);\n            };\n            Random.prototype.nextInternal = function (bits) {\n                var hi = this.seedhi * Random.multiplierLo + this.seedlo * Random.multiplierHi;\n                var lo = this.seedlo * Random.multiplierLo + 11;\n                var carry = Math.floor(lo * Random.twoToTheMinus24);\n                hi += carry;\n                lo -= carry * Random.twoToThe24;\n                hi %= Random.twoToThe24;\n                this.seedhi = hi;\n                this.seedlo = lo;\n                if (bits <= 24) {\n                    return Math.floor(this.seedhi * Random.twoToTheXMinus24_$LI$()[bits]);\n                }\n                else {\n                    var h = this.seedhi * (1 << (bits - 24));\n                    var l = Math.floor(this.seedlo * Random.twoToTheXMinus48_$LI$()[bits]);\n                    var dval = h + l;\n                    if (dval >= Random.twoToThe31) {\n                        dval -= Random.twoToThe32;\n                    }\n                    return dval;\n                }\n            };\n            Random.prototype.setSeed = function (seedhi, seedlo) {\n                var _this = this;\n                if (((typeof seedhi === 'number') || seedhi === null) && ((typeof seedlo === 'number') || seedlo === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        _this.seedhi = seedhi ^ 1502;\n                        _this.seedlo = seedlo ^ 15525485;\n                        _this.haveNextNextGaussian = false;\n                    })();\n                }\n                else if (((typeof seedhi === 'number') || seedhi === null) && seedlo === undefined) {\n                    return this.setSeed$long(seedhi);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Random.__static_initialized = false;\n            Random.multiplierHi = 1502;\n            Random.multiplierLo = 15525485;\n            Random.twoToThe24 = 1.6777216E7;\n            Random.twoToThe31 = 2.147483648E9;\n            Random.twoToThe32 = 4.294967296E9;\n            Random.twoToTheMinus24 = 5.9604644775390625E-8;\n            Random.twoToTheMinus26 = 1.4901161193847656E-8;\n            Random.twoToTheMinus31 = 4.6566128730773926E-10;\n            Random.twoToTheMinus53 = 1.1102230246251565E-16;\n            /**\n             * A value used to avoid two random number generators produced at the same\n             * time having the same seed.\n             */\n            Random.uniqueSeed = 0;\n            return Random;\n        }());\n        util.Random = Random;\n        Random[\"__class\"] = \"java.util.Random\";\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * See <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/StringJoiner.html\">\n         * the official Java API doc</a> for details.\n         */\n        var StringJoiner = (function () {\n            function StringJoiner(delimiter, prefix, suffix) {\n                if (prefix === void 0) { prefix = \"\"; }\n                if (suffix === void 0) { suffix = \"\"; }\n                javaemul.internal.InternalPreconditions.checkNotNull(delimiter, \"delimiter\");\n                javaemul.internal.InternalPreconditions.checkNotNull(prefix, \"prefix\");\n                javaemul.internal.InternalPreconditions.checkNotNull(suffix, \"suffix\");\n                this.delimiter = delimiter.toString();\n                this.prefix = prefix.toString();\n                this.suffix = suffix.toString();\n                this.emptyValue = this.prefix + this.suffix;\n            }\n            StringJoiner.prototype.add = function (newElement) {\n                this.initBuilderOrAddDelimiter();\n                this.builder.append(newElement);\n                return this;\n            };\n            StringJoiner.prototype.length = function () {\n                if (this.builder == null) {\n                    return this.emptyValue.length;\n                }\n                return this.builder.length() + this.suffix.length;\n            };\n            StringJoiner.prototype.merge = function (other) {\n                if (other.builder != null) {\n                    var otherLength = other.builder.length();\n                    this.initBuilderOrAddDelimiter();\n                    this.builder.append(other.builder, other.prefix.length, otherLength);\n                }\n                return this;\n            };\n            StringJoiner.prototype.setEmptyValue = function (emptyValue) {\n                javaemul.internal.InternalPreconditions.checkNotNull(emptyValue);\n                this.emptyValue = emptyValue.toString();\n                return this;\n            };\n            StringJoiner.prototype.toString = function () {\n                if (this.builder == null) {\n                    return this.emptyValue;\n                }\n                else if ((this.suffix.length === 0)) {\n                    return this.builder.toString();\n                }\n                else {\n                    return this.builder.toString() + this.suffix;\n                }\n            };\n            StringJoiner.prototype.initBuilderOrAddDelimiter = function () {\n                if (this.builder == null) {\n                    this.builder = new java.lang.StringBuilder(this.prefix);\n                }\n                else {\n                    this.builder.append(this.delimiter);\n                }\n            };\n            return StringJoiner;\n        }());\n        util.StringJoiner = StringJoiner;\n        StringJoiner[\"__class\"] = \"java.util.StringJoiner\";\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * Provides utilities to perform operations on Arrays.\n         */\n        var ArrayHelper = (function () {\n            function ArrayHelper() {\n            }\n            ArrayHelper.clone = function (array, fromIndex, toIndex) {\n                var result = ArrayHelper.unsafeClone(array, fromIndex, toIndex);\n                return javaemul.internal.ArrayStamper.stampJavaTypeInfo(result, array);\n            };\n            /**\n             * Unlike clone, this method returns a copy of the array that is not type\n             * marked. This is only safe for temp arrays as returned array will not do\n             * any type checks.\n             */\n            ArrayHelper.unsafeClone = function (array, fromIndex, toIndex) {\n                return array.slice(fromIndex, toIndex);\n            };\n            ArrayHelper.createFrom = function (array, length) {\n                var result = ArrayHelper.createNativeArray(length);\n                return javaemul.internal.ArrayStamper.stampJavaTypeInfo(result, array);\n            };\n            ArrayHelper.createNativeArray = function (length) {\n                return (new Array(length));\n            };\n            ArrayHelper.getLength = function (array) {\n                return (array.length | 0);\n            };\n            ArrayHelper.setLength = function (array, length) {\n                array.length = length;\n            };\n            ArrayHelper.removeFrom = function (array, index, deleteCount) {\n                array.splice(index, deleteCount);\n            };\n            ArrayHelper.insertTo$java_lang_Object$int$java_lang_Object = function (array, index, value) {\n                array.splice(index, 0, value);\n            };\n            ArrayHelper.insertTo = function (array, index, values) {\n                if (((array != null) || array === null) && ((typeof index === 'number') || index === null) && ((values != null && values instanceof Array) || values === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        ArrayHelper.copy(values, 0, array, index, values.length, false);\n                    })();\n                }\n                else if (((array != null) || array === null) && ((typeof index === 'number') || index === null) && ((values != null) || values === null)) {\n                    return javaemul.internal.ArrayHelper.insertTo$java_lang_Object$int$java_lang_Object(array, index, values);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            ArrayHelper.copy = function (src, srcOfs, dest, destOfs, len, overwrite) {\n                if (overwrite === void 0) { overwrite = true; }\n                if (src === dest) {\n                    src = ArrayHelper.unsafeClone(src, srcOfs, srcOfs + len);\n                    srcOfs = 0;\n                }\n                for (var batchStart = srcOfs, end = srcOfs + len; batchStart < end;) {\n                    var batchEnd = Math.min(batchStart + ArrayHelper.ARRAY_PROCESS_BATCH_SIZE, end);\n                    len = batchEnd - batchStart;\n                    ArrayHelper.applySplice(dest, destOfs, overwrite ? len : 0, ArrayHelper.unsafeClone(src, batchStart, batchEnd));\n                    batchStart = batchEnd;\n                    destOfs += len;\n                }\n            };\n            ArrayHelper.applySplice = function (arrayObject, index, deleteCount, arrayToAdd) {\n                Array.prototype.splice.apply(arrayObject, [index, deleteCount].concat(arrayToAdd));\n            };\n            ArrayHelper.ARRAY_PROCESS_BATCH_SIZE = 10000;\n            return ArrayHelper;\n        }());\n        internal.ArrayHelper = ArrayHelper;\n        ArrayHelper[\"__class\"] = \"javaemul.internal.ArrayHelper\";\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * A utility to provide array stamping. Provided as a separate class to simplify\n         * super-source.\n         */\n        var ArrayStamper = (function () {\n            function ArrayStamper() {\n            }\n            ArrayStamper.stampJavaTypeInfo = function (array, referenceType) {\n                return array;\n            };\n            return ArrayStamper;\n        }());\n        internal.ArrayStamper = ArrayStamper;\n        ArrayStamper[\"__class\"] = \"javaemul.internal.ArrayStamper\";\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * Wraps native <code>boolean</code> as an object.\n         */\n        var BooleanHelper = (function () {\n            function BooleanHelper() {\n            }\n            BooleanHelper.TYPE_$LI$ = function () { if (BooleanHelper.TYPE == null)\n                BooleanHelper.TYPE = Boolean; return BooleanHelper.TYPE; };\n            ;\n            BooleanHelper.compare = function (x, y) {\n                return (x === y) ? 0 : (x ? 1 : -1);\n            };\n            BooleanHelper.hashCode = function (value) {\n                return value ? 1231 : 1237;\n            };\n            BooleanHelper.logicalAnd = function (a, b) {\n                return a && b;\n            };\n            BooleanHelper.logicalOr = function (a, b) {\n                return a || b;\n            };\n            BooleanHelper.logicalXor = function (a, b) {\n                return a !== b;\n            };\n            BooleanHelper.parseBoolean = function (s) {\n                return (function (o1, o2) { return o1.toUpperCase() === (o2 === null ? o2 : o2.toUpperCase()); })(\"true\", s);\n            };\n            BooleanHelper.toString = function (x) {\n                return new String(x).toString();\n            };\n            BooleanHelper.valueOf$boolean = function (b) {\n                return b ? BooleanHelper.TRUE : BooleanHelper.FALSE;\n            };\n            BooleanHelper.valueOf = function (s) {\n                if (((typeof s === 'string') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return BooleanHelper.valueOf(BooleanHelper.parseBoolean(s));\n                    })();\n                }\n                else if (((typeof s === 'boolean') || s === null)) {\n                    return javaemul.internal.BooleanHelper.valueOf$boolean(s);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            BooleanHelper.prototype.booleanValue = function () {\n                return BooleanHelper.unsafeCast(javaemul.internal.InternalPreconditions.checkNotNull(this));\n            };\n            BooleanHelper.unsafeCast = function (value) {\n                return value;\n            };\n            BooleanHelper.prototype.compareTo = function (b) {\n                var _this = this;\n                if (((b != null && b instanceof javaemul.internal.BooleanHelper) || b === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return BooleanHelper.compare(_this.booleanValue(), b.booleanValue());\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            BooleanHelper.prototype.equals = function (o) {\n                return javaemul.internal.InternalPreconditions.checkNotNull(this) === o;\n            };\n            BooleanHelper.prototype.hashCode = function () {\n                return BooleanHelper.hashCode(this.booleanValue());\n            };\n            BooleanHelper.prototype.toString = function () {\n                return BooleanHelper.toString(this.booleanValue());\n            };\n            BooleanHelper.FALSE = false;\n            BooleanHelper.TRUE = true;\n            return BooleanHelper;\n        }());\n        internal.BooleanHelper = BooleanHelper;\n        BooleanHelper[\"__class\"] = \"javaemul.internal.BooleanHelper\";\n        BooleanHelper[\"__interfaces\"] = [\"java.lang.Comparable\", \"java.io.Serializable\"];\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * Wraps a native <code>char</code> as an object.\n         *\n         * TODO(jat): many of the classification methods implemented here are not\n         * correct in that they only handle ASCII characters, and many other methods are\n         * not currently implemented. I think the proper approach is to introduce * a\n         * deferred binding parameter which substitutes an implementation using a\n         * fully-correct Unicode character database, at the expense of additional data\n         * being downloaded. That way developers that need the functionality can get it\n         * without those who don't need it paying for it.\n         *\n         * <pre>\n         * The following methods are still not implemented -- most would require Unicode\n         * character db to be useful:\n         * - digit / is* / to*(int codePoint)\n         * - isDefined(char)\n         * - isIdentifierIgnorable(char)\n         * - isJavaIdentifierPart(char)\n         * - isJavaIdentifierStart(char)\n         * - isJavaLetter(char) -- deprecated, so probably not\n         * - isJavaLetterOrDigit(char) -- deprecated, so probably not\n         * - isISOControl(char)\n         * - isMirrored(char)\n         * - isSpaceChar(char)\n         * - isTitleCase(char)\n         * - isUnicodeIdentifierPart(char)\n         * - isUnicodeIdentifierStart(char)\n         * - getDirectionality(*)\n         * - getNumericValue(*)\n         * - getType(*)\n         * - reverseBytes(char) -- any use for this at all in the browser?\n         * - toTitleCase(*)\n         * - all the category constants for classification\n         *\n         * The following do not properly handle characters outside of ASCII:\n         * - digit(char c, int radix)\n         * - isDigit(char c)\n         * - isLetter(char c)\n         * - isLetterOrDigit(char c)\n         * - isLowerCase(char c)\n         * - isUpperCase(char c)\n         * </pre>\n         */\n        var CharacterHelper = (function () {\n            function CharacterHelper(value) {\n                this.value = null;\n                this.value = value;\n            }\n            CharacterHelper.TYPE_$LI$ = function () { if (CharacterHelper.TYPE == null)\n                CharacterHelper.TYPE = String; return CharacterHelper.TYPE; };\n            ;\n            CharacterHelper.charCount = function (codePoint) {\n                return codePoint >= CharacterHelper.MIN_SUPPLEMENTARY_CODE_POINT ? 2 : 1;\n            };\n            CharacterHelper.codePointAt$char_A$int = function (a, index) {\n                return CharacterHelper.codePointAt(new String(a), index, a.length);\n            };\n            CharacterHelper.codePointAt = function (a, index, limit) {\n                if (((a != null && a instanceof Array) || a === null) && ((typeof index === 'number') || index === null) && ((typeof limit === 'number') || limit === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return CharacterHelper.codePointAt(new String(a), index, limit);\n                    })();\n                }\n                else if (((a != null && (a[\"__interfaces\"] != null && a[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || a.constructor != null && a.constructor[\"__interfaces\"] != null && a.constructor[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || typeof a === \"string\")) || a === null) && ((typeof index === 'number') || index === null) && ((typeof limit === 'number') || limit === null)) {\n                    return javaemul.internal.CharacterHelper.codePointAt$java_lang_CharSequence$int$int(a, index, limit);\n                }\n                else if (((a != null && a instanceof Array) || a === null) && ((typeof index === 'number') || index === null) && limit === undefined) {\n                    return javaemul.internal.CharacterHelper.codePointAt$char_A$int(a, index);\n                }\n                else if (((a != null && (a[\"__interfaces\"] != null && a[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || a.constructor != null && a.constructor[\"__interfaces\"] != null && a.constructor[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || typeof a === \"string\")) || a === null) && ((typeof index === 'number') || index === null) && limit === undefined) {\n                    return javaemul.internal.CharacterHelper.codePointAt$java_lang_CharSequence$int(a, index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            CharacterHelper.codePointAt$java_lang_CharSequence$int = function (seq, index) {\n                return CharacterHelper.codePointAt(seq, index, seq.length);\n            };\n            CharacterHelper.codePointBefore$char_A$int = function (a, index) {\n                return CharacterHelper.codePointBefore(new String(a), index, 0);\n            };\n            CharacterHelper.codePointBefore = function (a, index, start) {\n                if (((a != null && a instanceof Array) || a === null) && ((typeof index === 'number') || index === null) && ((typeof start === 'number') || start === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return CharacterHelper.codePointBefore(new String(a), index, start);\n                    })();\n                }\n                else if (((a != null && (a[\"__interfaces\"] != null && a[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || a.constructor != null && a.constructor[\"__interfaces\"] != null && a.constructor[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || typeof a === \"string\")) || a === null) && ((typeof index === 'number') || index === null) && ((typeof start === 'number') || start === null)) {\n                    return javaemul.internal.CharacterHelper.codePointBefore$java_lang_CharSequence$int$int(a, index, start);\n                }\n                else if (((a != null && a instanceof Array) || a === null) && ((typeof index === 'number') || index === null) && start === undefined) {\n                    return javaemul.internal.CharacterHelper.codePointBefore$char_A$int(a, index);\n                }\n                else if (((a != null && (a[\"__interfaces\"] != null && a[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || a.constructor != null && a.constructor[\"__interfaces\"] != null && a.constructor[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || typeof a === \"string\")) || a === null) && ((typeof index === 'number') || index === null) && start === undefined) {\n                    return javaemul.internal.CharacterHelper.codePointBefore$java_lang_CharSequence$int(a, index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            CharacterHelper.codePointBefore$java_lang_CharSequence$int = function (cs, index) {\n                return CharacterHelper.codePointBefore(cs, index, 0);\n            };\n            CharacterHelper.codePointCount = function (a, offset, count) {\n                if (((a != null && a instanceof Array) || a === null) && ((typeof offset === 'number') || offset === null) && ((typeof count === 'number') || count === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return CharacterHelper.codePointCount(new String(a), offset, offset + count);\n                    })();\n                }\n                else if (((a != null && (a[\"__interfaces\"] != null && a[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || a.constructor != null && a.constructor[\"__interfaces\"] != null && a.constructor[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || typeof a === \"string\")) || a === null) && ((typeof offset === 'number') || offset === null) && ((typeof count === 'number') || count === null)) {\n                    return javaemul.internal.CharacterHelper.codePointCount$java_lang_CharSequence$int$int(a, offset, count);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            CharacterHelper.codePointCount$java_lang_CharSequence$int$int = function (seq, beginIndex, endIndex) {\n                var count = 0;\n                for (var idx = beginIndex; idx < endIndex;) {\n                    var ch = seq.charAt(idx++);\n                    if (CharacterHelper.isHighSurrogate(ch) && idx < endIndex && (CharacterHelper.isLowSurrogate(seq.charAt(idx)))) {\n                        ++idx;\n                    }\n                    ++count;\n                }\n                return count;\n            };\n            CharacterHelper.compare = function (x, y) {\n                return (x).charCodeAt(0) - (y).charCodeAt(0);\n            };\n            CharacterHelper.digit = function (c, radix) {\n                if (radix < CharacterHelper.MIN_RADIX || radix > CharacterHelper.MAX_RADIX) {\n                    return -1;\n                }\n                if ((c).charCodeAt(0) >= ('0').charCodeAt(0) && (c).charCodeAt(0) < ('0').charCodeAt(0) + Math.min(radix, 10)) {\n                    return (c).charCodeAt(0) - ('0').charCodeAt(0);\n                }\n                if ((c).charCodeAt(0) >= ('a').charCodeAt(0) && (c).charCodeAt(0) < (radix + ('a').charCodeAt(0) - 10)) {\n                    return (c).charCodeAt(0) - ('a').charCodeAt(0) + 10;\n                }\n                if ((c).charCodeAt(0) >= ('A').charCodeAt(0) && (c).charCodeAt(0) < (radix + ('A').charCodeAt(0) - 10)) {\n                    return (c).charCodeAt(0) - ('A').charCodeAt(0) + 10;\n                }\n                return -1;\n            };\n            CharacterHelper.getNumericValue = function (ch) {\n                return (ch.charCodeAt(0) | 0);\n            };\n            CharacterHelper.forDigit = function (digit, radix) {\n                if (((typeof digit === 'number') || digit === null) && ((typeof radix === 'number') || radix === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (radix < CharacterHelper.MIN_RADIX || radix > CharacterHelper.MAX_RADIX) {\n                            return String.fromCharCode(0);\n                        }\n                        if (digit < 0 || digit >= radix) {\n                            return String.fromCharCode(0);\n                        }\n                        return CharacterHelper.forDigit(digit);\n                    })();\n                }\n                else if (((typeof digit === 'number') || digit === null) && radix === undefined) {\n                    return javaemul.internal.CharacterHelper.forDigit$int(digit);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * @skip\n             *\n             * public for shared implementation with Arrays.hashCode\n             */\n            CharacterHelper.hashCode = function (c) {\n                return (c).charCodeAt(0);\n            };\n            CharacterHelper.isDigit = function (c) {\n                var result = (new String(c).toString()).match(CharacterHelper.digitRegex());\n                return result != null && result.length > 0;\n            };\n            CharacterHelper.digitRegex = function () {\n                return new RegExp(\"\\\\d\");\n            };\n            CharacterHelper.isHighSurrogate = function (ch) {\n                return (ch).charCodeAt(0) >= (CharacterHelper.MIN_HIGH_SURROGATE).charCodeAt(0) && (ch).charCodeAt(0) <= (CharacterHelper.MAX_HIGH_SURROGATE).charCodeAt(0);\n            };\n            CharacterHelper.isLetter = function (c) {\n                return (new String(c).toString()).match(CharacterHelper.leterRegex()).length > 0;\n            };\n            CharacterHelper.leterRegex = function () {\n                return new RegExp(\"[A-Z]\", \"i\");\n            };\n            CharacterHelper.isLetterOrDigit = function (c) {\n                return (new String(c).toString()).match(CharacterHelper.leterOrDigitRegex()).length > 0;\n            };\n            CharacterHelper.leterOrDigitRegex = function () {\n                return new RegExp(\"[A-Z\\\\d]\", \"i\");\n            };\n            CharacterHelper.isLowerCase = function (c) {\n                return CharacterHelper.toLowerCase(c) === c && CharacterHelper.isLetter(c);\n            };\n            CharacterHelper.isLowSurrogate = function (ch) {\n                return (ch).charCodeAt(0) >= (CharacterHelper.MIN_LOW_SURROGATE).charCodeAt(0) && (ch).charCodeAt(0) <= (CharacterHelper.MAX_LOW_SURROGATE).charCodeAt(0);\n            };\n            /**\n             * Deprecated - see isWhitespace(char).\n             */\n            CharacterHelper.isSpace = function (c) {\n                switch ((c)) {\n                    case ' ':\n                        return true;\n                    case '\\n':\n                        return true;\n                    case '\\t':\n                        return true;\n                    case '\\f':\n                        return true;\n                    case '\\r':\n                        return true;\n                    default:\n                        return false;\n                }\n            };\n            CharacterHelper.isWhitespace = function (ch) {\n                if (((typeof ch === 'string') || ch === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return (new String(ch).toString()).match(CharacterHelper.whitespaceRegex()).length > 0;\n                    })();\n                }\n                else if (((typeof ch === 'number') || ch === null)) {\n                    return javaemul.internal.CharacterHelper.isWhitespace$int(ch);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            CharacterHelper.isWhitespace$int = function (codePoint) {\n                return (String.fromCharCode(codePoint)).match(CharacterHelper.whitespaceRegex()).length > 0;\n            };\n            CharacterHelper.whitespaceRegex = function () {\n                return new RegExp(\"[\\\\t-\\\\r \\\\u1680\\\\u180E\\\\u2000-\\\\u2006\\\\u2008-\\\\u200A\\\\u2028\\\\u2029\\\\u205F\\\\u3000\\\\uFEFF]|[\\\\x1C-\\\\x1F]\");\n            };\n            CharacterHelper.isSupplementaryCodePoint = function (codePoint) {\n                return codePoint >= CharacterHelper.MIN_SUPPLEMENTARY_CODE_POINT && codePoint <= CharacterHelper.MAX_CODE_POINT;\n            };\n            CharacterHelper.isSurrogatePair = function (highSurrogate, lowSurrogate) {\n                return CharacterHelper.isHighSurrogate(highSurrogate) && CharacterHelper.isLowSurrogate(lowSurrogate);\n            };\n            CharacterHelper.isUpperCase = function (c) {\n                return CharacterHelper.toUpperCase(c) === c && CharacterHelper.isLetter(c);\n            };\n            CharacterHelper.isValidCodePoint = function (codePoint) {\n                return codePoint >= CharacterHelper.MIN_CODE_POINT && codePoint <= CharacterHelper.MAX_CODE_POINT;\n            };\n            CharacterHelper.offsetByCodePoints = function (a, start, count, index, codePointOffset) {\n                if (((a != null && a instanceof Array) || a === null) && ((typeof start === 'number') || start === null) && ((typeof count === 'number') || count === null) && ((typeof index === 'number') || index === null) && ((typeof codePointOffset === 'number') || codePointOffset === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return CharacterHelper.offsetByCodePoints((function (str, index, len) { return str.substring(index, index + len); })((a).join(''), start, count), index, codePointOffset);\n                    })();\n                }\n                else if (((a != null && (a[\"__interfaces\"] != null && a[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || a.constructor != null && a.constructor[\"__interfaces\"] != null && a.constructor[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || typeof a === \"string\")) || a === null) && ((typeof start === 'number') || start === null) && ((typeof count === 'number') || count === null) && index === undefined && codePointOffset === undefined) {\n                    return javaemul.internal.CharacterHelper.offsetByCodePoints$java_lang_CharSequence$int$int(a, start, count);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            CharacterHelper.offsetByCodePoints$java_lang_CharSequence$int$int = function (seq, index, codePointOffset) {\n                if (codePointOffset < 0) {\n                    while ((codePointOffset < 0)) {\n                        --index;\n                        if (CharacterHelper.isLowSurrogate(seq.charAt(index)) && CharacterHelper.isHighSurrogate(seq.charAt(index - 1))) {\n                            --index;\n                        }\n                        ++codePointOffset;\n                    }\n                    ;\n                }\n                else {\n                    while ((codePointOffset > 0)) {\n                        if (CharacterHelper.isHighSurrogate(seq.charAt(index)) && CharacterHelper.isLowSurrogate(seq.charAt(index + 1))) {\n                            ++index;\n                        }\n                        ++index;\n                        --codePointOffset;\n                    }\n                    ;\n                }\n                return index;\n            };\n            CharacterHelper.toChars$int = function (codePoint) {\n                javaemul.internal.InternalPreconditions.checkCriticalArgument(codePoint >= 0 && codePoint <= CharacterHelper.MAX_CODE_POINT);\n                if (codePoint >= CharacterHelper.MIN_SUPPLEMENTARY_CODE_POINT) {\n                    return [CharacterHelper.getHighSurrogate(codePoint), CharacterHelper.getLowSurrogate(codePoint)];\n                }\n                else {\n                    return [String.fromCharCode(codePoint)];\n                }\n            };\n            CharacterHelper.toChars = function (codePoint, dst, dstIndex) {\n                if (((typeof codePoint === 'number') || codePoint === null) && ((dst != null && dst instanceof Array) || dst === null) && ((typeof dstIndex === 'number') || dstIndex === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        javaemul.internal.InternalPreconditions.checkCriticalArgument(codePoint >= 0 && codePoint <= CharacterHelper.MAX_CODE_POINT);\n                        if (codePoint >= CharacterHelper.MIN_SUPPLEMENTARY_CODE_POINT) {\n                            dst[dstIndex++] = CharacterHelper.getHighSurrogate(codePoint);\n                            dst[dstIndex] = CharacterHelper.getLowSurrogate(codePoint);\n                            return 2;\n                        }\n                        else {\n                            dst[dstIndex] = String.fromCharCode(codePoint);\n                            return 1;\n                        }\n                    })();\n                }\n                else if (((typeof codePoint === 'number') || codePoint === null) && dst === undefined && dstIndex === undefined) {\n                    return javaemul.internal.CharacterHelper.toChars$int(codePoint);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            CharacterHelper.toCodePoint = function (highSurrogate, lowSurrogate) {\n                return CharacterHelper.MIN_SUPPLEMENTARY_CODE_POINT + (((highSurrogate).charCodeAt(0) & 1023) << 10) + ((lowSurrogate).charCodeAt(0) & 1023);\n            };\n            CharacterHelper.toLowerCase = function (c) {\n                if (((typeof c === 'string') || c === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return new String(c).toString().toLowerCase().charAt(0);\n                    })();\n                }\n                else if (((typeof c === 'number') || c === null)) {\n                    return javaemul.internal.CharacterHelper.toLowerCase$int(c);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            CharacterHelper.toLowerCase$int = function (c) {\n                return (new String(String.fromCharCode(c)).toString().toLowerCase().charAt(0)).charCodeAt(0);\n            };\n            CharacterHelper.toString = function (x) {\n                return new String(x).toString();\n            };\n            CharacterHelper.toUpperCase = function (c) {\n                if (((typeof c === 'string') || c === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return new String(c).toString().toUpperCase().charAt(0);\n                    })();\n                }\n                else if (((typeof c === 'number') || c === null)) {\n                    return javaemul.internal.CharacterHelper.toUpperCase$int(c);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            CharacterHelper.toUpperCase$int = function (c) {\n                return new String(String.fromCharCode(c)).toString().toUpperCase().charAt(0);\n            };\n            CharacterHelper.valueOf = function (c) {\n                if ((c).charCodeAt(0) < 128) {\n                    var result = CharacterHelper.BoxedValues.boxedValues_$LI$()[c];\n                    if (result == null) {\n                        result = CharacterHelper.BoxedValues.boxedValues_$LI$()[c] = new CharacterHelper(c);\n                    }\n                    return result;\n                }\n                return new CharacterHelper(c);\n            };\n            CharacterHelper.codePointAt$java_lang_CharSequence$int$int = function (cs, index, limit) {\n                var hiSurrogate = cs.charAt(index++);\n                var loSurrogate;\n                if (CharacterHelper.isHighSurrogate(hiSurrogate) && index < limit && CharacterHelper.isLowSurrogate(loSurrogate = cs.charAt(index))) {\n                    return CharacterHelper.toCodePoint(hiSurrogate, loSurrogate);\n                }\n                return (hiSurrogate).charCodeAt(0);\n            };\n            CharacterHelper.codePointBefore$java_lang_CharSequence$int$int = function (cs, index, start) {\n                var loSurrogate = cs.charAt(--index);\n                var highSurrogate;\n                if (CharacterHelper.isLowSurrogate(loSurrogate) && index > start && CharacterHelper.isHighSurrogate(highSurrogate = cs.charAt(index - 1))) {\n                    return CharacterHelper.toCodePoint(highSurrogate, loSurrogate);\n                }\n                return (loSurrogate).charCodeAt(0);\n            };\n            /**\n             * Shared implementation with {@link LongHelper#toString}.\n             *\n             * @skip\n             */\n            CharacterHelper.forDigit$int = function (digit) {\n                var overBaseTen = digit - 10;\n                return String.fromCharCode((overBaseTen < 0 ? ('0').charCodeAt(0) + digit : ('a').charCodeAt(0) + overBaseTen));\n            };\n            /**\n             * Computes the high surrogate character of the UTF16 representation of a\n             * non-BMP code point. See {@link getLowSurrogate}.\n             *\n             * @param codePoint\n             * requested codePoint, required to be >=\n             * MIN_SUPPLEMENTARY_CODE_POINT\n             * @return high surrogate character\n             */\n            CharacterHelper.getHighSurrogate = function (codePoint) {\n                return String.fromCharCode(((CharacterHelper.MIN_HIGH_SURROGATE).charCodeAt(0) + (((codePoint - CharacterHelper.MIN_SUPPLEMENTARY_CODE_POINT) >> 10) & 1023)));\n            };\n            /**\n             * Computes the low surrogate character of the UTF16 representation of a\n             * non-BMP code point. See {@link getHighSurrogate}.\n             *\n             * @param codePoint\n             * requested codePoint, required to be >=\n             * MIN_SUPPLEMENTARY_CODE_POINT\n             * @return low surrogate character\n             */\n            CharacterHelper.getLowSurrogate = function (codePoint) {\n                return String.fromCharCode(((CharacterHelper.MIN_LOW_SURROGATE).charCodeAt(0) + ((codePoint - CharacterHelper.MIN_SUPPLEMENTARY_CODE_POINT) & 1023)));\n            };\n            CharacterHelper.prototype.charValue = function () {\n                return this.value;\n            };\n            CharacterHelper.prototype.compareTo = function (c) {\n                var _this = this;\n                if (((c != null && c instanceof javaemul.internal.CharacterHelper) || c === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return CharacterHelper.compare(_this.value, c.value);\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            CharacterHelper.prototype.equals = function (o) {\n                return (o != null && o instanceof javaemul.internal.CharacterHelper) && (o.value === this.value);\n            };\n            CharacterHelper.prototype.hashCode = function () {\n                return CharacterHelper.hashCode(this.value);\n            };\n            CharacterHelper.prototype.toString = function () {\n                return new String(this.value).toString();\n            };\n            CharacterHelper.MIN_RADIX = 2;\n            CharacterHelper.MAX_RADIX = 36;\n            CharacterHelper.MIN_VALUE = '\\u0000';\n            CharacterHelper.MAX_VALUE = '\\uffff';\n            CharacterHelper.MIN_SURROGATE = '\\ud800';\n            CharacterHelper.MAX_SURROGATE = '\\udfff';\n            CharacterHelper.MIN_LOW_SURROGATE = '\\udc00';\n            CharacterHelper.MAX_LOW_SURROGATE = '\\udfff';\n            CharacterHelper.MIN_HIGH_SURROGATE = '\\ud800';\n            CharacterHelper.MAX_HIGH_SURROGATE = '\\udbff';\n            CharacterHelper.MIN_SUPPLEMENTARY_CODE_POINT = 65536;\n            CharacterHelper.MIN_CODE_POINT = 0;\n            CharacterHelper.MAX_CODE_POINT = 1114111;\n            CharacterHelper.SIZE = 16;\n            return CharacterHelper;\n        }());\n        internal.CharacterHelper = CharacterHelper;\n        CharacterHelper[\"__class\"] = \"javaemul.internal.CharacterHelper\";\n        CharacterHelper[\"__interfaces\"] = [\"java.lang.Comparable\", \"java.io.Serializable\"];\n        var CharacterHelper;\n        (function (CharacterHelper) {\n            /**\n             * Use nested class to avoid clinit on outer.\n             */\n            var BoxedValues = (function () {\n                function BoxedValues() {\n                }\n                BoxedValues.boxedValues_$LI$ = function () { if (BoxedValues.boxedValues == null)\n                    BoxedValues.boxedValues = new Array(128); return BoxedValues.boxedValues; };\n                ;\n                return BoxedValues;\n            }());\n            CharacterHelper.BoxedValues = BoxedValues;\n            BoxedValues[\"__class\"] = \"javaemul.internal.CharacterHelper.BoxedValues\";\n        })(CharacterHelper = internal.CharacterHelper || (internal.CharacterHelper = {}));\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * Private implementation class for GWT. This API should not be\n         * considered public or stable.\n         */\n        var Coercions = (function () {\n            function Coercions() {\n            }\n            /**\n             * Coerce js int to 32 bits.\n             * Trick related to JS and lack of integer rollover.\n             * {@see com.google.gwt.lang.Cast#narrow_int}\n             */\n            Coercions.ensureInt = function (value) {\n                return value | 0;\n            };\n            return Coercions;\n        }());\n        internal.Coercions = Coercions;\n        Coercions[\"__class\"] = \"javaemul.internal.Coercions\";\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * Simple Helper class to return Date.now.\n         */\n        var DateUtil = (function () {\n            function DateUtil() {\n            }\n            /**\n             * Returns the numeric value corresponding to the current time -\n             * the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.\n             */\n            DateUtil.now = function () {\n                // IE8 does not have Date.now\n                // when removing IE8 support we change this to Date.now()\n                if (Date.now) {\n                    // Date.now vs Date.getTime() performance comparison:\n                    // http://jsperf.com/date-now-vs-new-date/8\n                    return Date.now();\n                }\n                return (new Date()).getTime();\n            };\n            return DateUtil;\n        }());\n        internal.DateUtil = DateUtil;\n        DateUtil[\"__class\"] = \"javaemul.internal.DateUtil\";\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * Contains logics for calculating hash codes in JavaScript.\n         */\n        var HashCodes = (function () {\n            function HashCodes() {\n            }\n            HashCodes.hashCodeForString = function (s) {\n                return javaemul.internal.StringHashCache.getHashCode(s);\n            };\n            HashCodes.getIdentityHashCode = function (o) {\n                if (o == null) {\n                    return 0;\n                }\n                return (typeof o === 'string') ? HashCodes.hashCodeForString(javaemul.internal.JsUtils.unsafeCastToString(o)) : HashCodes.getObjectIdentityHashCode(o);\n            };\n            HashCodes.getObjectIdentityHashCode = function (o) {\n                if (o[HashCodes.HASH_CODE_PROPERTY] != null) {\n                    return o[HashCodes.HASH_CODE_PROPERTY];\n                }\n                else {\n                    return o[HashCodes.HASH_CODE_PROPERTY] = HashCodes.getNextHashId();\n                }\n            };\n            /**\n             * Called from JSNI. Do not change this implementation without updating:\n             * <ul>\n             * <li>{@link com.google.gwt.user.client.rpc.impl.SerializerBase}</li>\n             * </ul>\n             */\n            HashCodes.getNextHashId = function () {\n                return ++HashCodes.sNextHashId;\n            };\n            HashCodes.sNextHashId = 0;\n            HashCodes.HASH_CODE_PROPERTY = \"$H\";\n            return HashCodes;\n        }());\n        internal.HashCodes = HashCodes;\n        HashCodes[\"__class\"] = \"javaemul.internal.HashCodes\";\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        var JreHelper = (function () {\n            function JreHelper() {\n            }\n            JreHelper.LOG10E_$LI$ = function () { if (JreHelper.LOG10E == null)\n                JreHelper.LOG10E = Math.LOG10E; return JreHelper.LOG10E; };\n            ;\n            return JreHelper;\n        }());\n        internal.JreHelper = JreHelper;\n        JreHelper[\"__class\"] = \"javaemul.internal.JreHelper\";\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * Provides an interface for simple JavaScript idioms that can not be expressed in Java.\n         */\n        var JsUtils = (function () {\n            function JsUtils() {\n            }\n            JsUtils.getInfinity = function () {\n                return Infinity;\n            };\n            JsUtils.isUndefined = function (value) {\n                return value == null;\n            };\n            JsUtils.unsafeCastToString = function (string) {\n                return string;\n            };\n            JsUtils.setPropertySafe = function (map, key, value) {\n                try {\n                    map[key] = value;\n                }\n                catch (e) {\n                }\n                ;\n            };\n            JsUtils.getIntProperty = function (map, key) {\n                return (map[key] | 0);\n            };\n            JsUtils.setIntProperty = function (map, key, value) {\n                map[key] = value;\n            };\n            JsUtils.typeOf = function (o) {\n                return typeof o;\n            };\n            return JsUtils;\n        }());\n        internal.JsUtils = JsUtils;\n        JsUtils[\"__class\"] = \"javaemul.internal.JsUtils\";\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * A helper class for long comparison.\n         */\n        var LongCompareHolder = (function () {\n            function LongCompareHolder() {\n            }\n            LongCompareHolder.getLongComparator = function () {\n                return function (l1, l2) { return l2 - l1; };\n            };\n            return LongCompareHolder;\n        }());\n        internal.LongCompareHolder = LongCompareHolder;\n        LongCompareHolder[\"__class\"] = \"javaemul.internal.LongCompareHolder\";\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * Math utility methods and constants.\n         */\n        var MathHelper = (function () {\n            function MathHelper() {\n            }\n            MathHelper.EPSILON_$LI$ = function () { if (MathHelper.EPSILON == null)\n                MathHelper.EPSILON = MathHelper.pow(2, -52); return MathHelper.EPSILON; };\n            ;\n            MathHelper.MAX_VALUE_$LI$ = function () { if (MathHelper.MAX_VALUE == null)\n                MathHelper.MAX_VALUE = (2 - MathHelper.EPSILON_$LI$()) * MathHelper.pow(2, 1023); return MathHelper.MAX_VALUE; };\n            ;\n            MathHelper.MIN_VALUE_$LI$ = function () { if (MathHelper.MIN_VALUE == null)\n                MathHelper.MIN_VALUE = MathHelper.pow(2, -1022); return MathHelper.MIN_VALUE; };\n            ;\n            MathHelper.nextDown = function (x) {\n                return -MathHelper.nextUp(-x);\n            };\n            MathHelper.ulp = function (x) {\n                return x < 0 ? MathHelper.nextUp(x) - x : x - (-MathHelper.nextUp(-x));\n            };\n            MathHelper.nextUp = function (x) {\n                if (x !== x) {\n                    return x;\n                }\n                if (x === (-1 / 0 | 0)) {\n                    return -MathHelper.MAX_VALUE_$LI$();\n                }\n                if (x === (+1 / 0 | 0)) {\n                    return (+1 / 0 | 0);\n                }\n                if (x === +MathHelper.MAX_VALUE_$LI$()) {\n                    return (+1 / 0 | 0);\n                }\n                var y = x * (x < 0 ? 1 - MathHelper.EPSILON_$LI$() / 2 : 1 + MathHelper.EPSILON_$LI$());\n                if (y === x) {\n                    y = MathHelper.MIN_VALUE_$LI$() * MathHelper.EPSILON_$LI$() > 0 ? x + MathHelper.MIN_VALUE_$LI$() * MathHelper.EPSILON_$LI$() : x + MathHelper.MIN_VALUE_$LI$();\n                }\n                if (y === (+1 / 0 | 0)) {\n                    y = +MathHelper.MAX_VALUE_$LI$();\n                }\n                var b = x + (y - x) / 2;\n                if (x < b && b < y) {\n                    y = b;\n                }\n                var c = (y + x) / 2;\n                if (x < c && c < y) {\n                    y = c;\n                }\n                return y === 0 ? -0 : y;\n            };\n            MathHelper.PI_OVER_180_$LI$ = function () { if (MathHelper.PI_OVER_180 == null)\n                MathHelper.PI_OVER_180 = MathHelper.PI / 180.0; return MathHelper.PI_OVER_180; };\n            ;\n            MathHelper.PI_UNDER_180_$LI$ = function () { if (MathHelper.PI_UNDER_180 == null)\n                MathHelper.PI_UNDER_180 = 180.0 / MathHelper.PI; return MathHelper.PI_UNDER_180; };\n            ;\n            MathHelper.abs$double = function (x) {\n                return x <= 0 ? 0.0 - x : x;\n            };\n            MathHelper.abs$float = function (x) {\n                return MathHelper.abs(x);\n            };\n            MathHelper.abs = function (x) {\n                if (((typeof x === 'number') || x === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return x < 0 ? -x : x;\n                    })();\n                }\n                else if (((typeof x === 'number') || x === null)) {\n                    return javaemul.internal.MathHelper.abs$long(x);\n                }\n                else if (((typeof x === 'number') || x === null)) {\n                    return javaemul.internal.MathHelper.abs$float(x);\n                }\n                else if (((typeof x === 'number') || x === null)) {\n                    return javaemul.internal.MathHelper.abs$double(x);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            MathHelper.abs$long = function (x) {\n                return x < 0 ? -x : x;\n            };\n            MathHelper.acos = function (x) {\n                return Math.acos(x);\n            };\n            MathHelper.asin = function (x) {\n                return Math.asin(x);\n            };\n            MathHelper.atan = function (x) {\n                return Math.atan(x);\n            };\n            MathHelper.atan2 = function (y, x) {\n                return Math.atan2(y, x);\n            };\n            MathHelper.cbrt = function (x) {\n                return MathHelper.pow(x, 1.0 / 3.0);\n            };\n            MathHelper.ceil = function (x) {\n                return Math.ceil(x);\n            };\n            MathHelper.copySign$double$double = function (magnitude, sign) {\n                if (sign < 0) {\n                    return (magnitude < 0) ? magnitude : -magnitude;\n                }\n                else {\n                    return (magnitude > 0) ? magnitude : -magnitude;\n                }\n            };\n            MathHelper.copySign = function (magnitude, sign) {\n                if (((typeof magnitude === 'number') || magnitude === null) && ((typeof sign === 'number') || sign === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return (MathHelper.copySign(magnitude, sign));\n                    })();\n                }\n                else if (((typeof magnitude === 'number') || magnitude === null) && ((typeof sign === 'number') || sign === null)) {\n                    return javaemul.internal.MathHelper.copySign$double$double(magnitude, sign);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            MathHelper.cos = function (x) {\n                return Math.cos(x);\n            };\n            MathHelper.cosh = function (x) {\n                return (MathHelper.exp(x) + MathHelper.exp(-x)) / 2.0;\n            };\n            MathHelper.exp = function (x) {\n                return Math.exp(x);\n            };\n            MathHelper.expm1 = function (d) {\n                if (d === 0.0 || isNaN(d)) {\n                    return d;\n                }\n                else if (!(function (value) { return Number.NEGATIVE_INFINITY === value || Number.POSITIVE_INFINITY === value; })(d)) {\n                    if (d < 0.0) {\n                        return -1.0;\n                    }\n                    else {\n                        return javaemul.internal.DoubleHelper.POSITIVE_INFINITY;\n                    }\n                }\n                return MathHelper.exp(d) + 1.0;\n            };\n            MathHelper.floor = function (x) {\n                return Math.floor(x);\n            };\n            MathHelper.hypot = function (x, y) {\n                return MathHelper.sqrt(x * x + y * y);\n            };\n            MathHelper.log = function (x) {\n                return Math.log(x);\n            };\n            MathHelper.log10 = function (x) {\n                return Math.log(x) * Math.LOG10E;\n            };\n            MathHelper.log1p = function (x) {\n                return MathHelper.log(x + 1.0);\n            };\n            MathHelper.max$double$double = function (x, y) {\n                return Math.max(x, y);\n            };\n            MathHelper.max$float$float = function (x, y) {\n                return Math.max(x, y);\n            };\n            MathHelper.max = function (x, y) {\n                if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return x > y ? x : y;\n                    })();\n                }\n                else if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null)) {\n                    return javaemul.internal.MathHelper.max$long$long(x, y);\n                }\n                else if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null)) {\n                    return javaemul.internal.MathHelper.max$float$float(x, y);\n                }\n                else if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null)) {\n                    return javaemul.internal.MathHelper.max$double$double(x, y);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            MathHelper.max$long$long = function (x, y) {\n                return x > y ? x : y;\n            };\n            MathHelper.min$double$double = function (x, y) {\n                return Math.min(x, y);\n            };\n            MathHelper.min$float$float = function (x, y) {\n                return Math.min(x, y);\n            };\n            MathHelper.min = function (x, y) {\n                if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return x < y ? x : y;\n                    })();\n                }\n                else if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null)) {\n                    return javaemul.internal.MathHelper.min$long$long(x, y);\n                }\n                else if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null)) {\n                    return javaemul.internal.MathHelper.min$float$float(x, y);\n                }\n                else if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null)) {\n                    return javaemul.internal.MathHelper.min$double$double(x, y);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            MathHelper.min$long$long = function (x, y) {\n                return x < y ? x : y;\n            };\n            MathHelper.pow = function (x, exp) {\n                return Math.pow(x, exp);\n            };\n            MathHelper.random = function () {\n                return Math.random();\n            };\n            MathHelper.rint = function (d) {\n                if (isNaN(d)) {\n                    return d;\n                }\n                else if ((function (value) { return Number.NEGATIVE_INFINITY === value || Number.POSITIVE_INFINITY === value; })(d)) {\n                    return d;\n                }\n                else if (d === 0.0) {\n                    return d;\n                }\n                else {\n                    return MathHelper.round(d);\n                }\n            };\n            MathHelper.round$double = function (x) {\n                return Math.round(Math.round(x));\n            };\n            MathHelper.round = function (x) {\n                if (((typeof x === 'number') || x === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var roundedValue = Math.round(x);\n                        return MathHelper.unsafeCastToInt(roundedValue);\n                    })();\n                }\n                else if (((typeof x === 'number') || x === null)) {\n                    return javaemul.internal.MathHelper.round$double(x);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            MathHelper.unsafeCastToInt = function (d) {\n                return d;\n            };\n            MathHelper.scalb$double$int = function (d, scaleFactor) {\n                if (scaleFactor >= 31 || scaleFactor <= -31) {\n                    return d * MathHelper.pow(2, scaleFactor);\n                }\n                else if (scaleFactor > 0) {\n                    return d * (1 << scaleFactor);\n                }\n                else if (scaleFactor === 0) {\n                    return d;\n                }\n                else {\n                    return d * 1.0 / (1 << -scaleFactor);\n                }\n            };\n            MathHelper.scalb = function (f, scaleFactor) {\n                if (((typeof f === 'number') || f === null) && ((typeof scaleFactor === 'number') || scaleFactor === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (scaleFactor >= 31 || scaleFactor <= -31) {\n                            return f * MathHelper.pow(2, scaleFactor);\n                        }\n                        else if (scaleFactor > 0) {\n                            return f * (1 << scaleFactor);\n                        }\n                        else if (scaleFactor === 0) {\n                            return f;\n                        }\n                        else {\n                            return f * 1.0 / (1 << -scaleFactor);\n                        }\n                    })();\n                }\n                else if (((typeof f === 'number') || f === null) && ((typeof scaleFactor === 'number') || scaleFactor === null)) {\n                    return javaemul.internal.MathHelper.scalb$double$int(f, scaleFactor);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            MathHelper.signum$double = function (d) {\n                if (d > 0.0) {\n                    return 1.0;\n                }\n                else if (d < 0.0) {\n                    return -1.0;\n                }\n                else {\n                    return 0.0;\n                }\n            };\n            MathHelper.signum = function (f) {\n                if (((typeof f === 'number') || f === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (f > 0.0) {\n                            return 1.0;\n                        }\n                        else if (f < 0.0) {\n                            return -1.0;\n                        }\n                        else {\n                            return 0.0;\n                        }\n                    })();\n                }\n                else if (((typeof f === 'number') || f === null)) {\n                    return javaemul.internal.MathHelper.signum$double(f);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            MathHelper.sin = function (x) {\n                return Math.sin(x);\n            };\n            MathHelper.sinh = function (x) {\n                return (MathHelper.exp(x) - MathHelper.exp(-x)) / 2.0;\n            };\n            MathHelper.sqrt = function (x) {\n                return Math.sqrt(x);\n            };\n            MathHelper.tan = function (x) {\n                return Math.tan(x);\n            };\n            MathHelper.tanh = function (x) {\n                if (x === javaemul.internal.JsUtils.getInfinity()) {\n                    return 1.0;\n                }\n                else if (x === -javaemul.internal.JsUtils.getInfinity()) {\n                    return -1.0;\n                }\n                var e2x = MathHelper.exp(2.0 * x);\n                return (e2x - 1) / (e2x + 1);\n            };\n            MathHelper.toDegrees = function (x) {\n                return x * MathHelper.PI_UNDER_180_$LI$();\n            };\n            MathHelper.toRadians = function (x) {\n                return x * MathHelper.PI_OVER_180_$LI$();\n            };\n            MathHelper.IEEEremainder = function (f1, f2) {\n                var r = Math.abs(f1 % f2);\n                if (isNaN(r) || r === f2 || r <= Math.abs(f2) / 2.0) {\n                    return r;\n                }\n                else {\n                    return (function (f) { if (f > 0) {\n                        return 1;\n                    }\n                    else if (f < 0) {\n                        return -1;\n                    }\n                    else {\n                        return 0;\n                    } })(f1) * (r - f2);\n                }\n            };\n            MathHelper.E = 2.718281828459045;\n            MathHelper.PI = 3.141592653589793;\n            return MathHelper;\n        }());\n        internal.MathHelper = MathHelper;\n        MathHelper[\"__class\"] = \"javaemul.internal.MathHelper\";\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * Abstract base class for numeric wrapper classes.\n         */\n        var NumberHelper = (function () {\n            function NumberHelper() {\n            }\n            /**\n             * @skip\n             *\n             * This function will determine the radix that the string is expressed\n             * in based on the parsing rules defined in the Javadocs for\n             * Integer.decode() and invoke __parseAndValidateInt.\n             */\n            NumberHelper.__decodeAndValidateInt = function (s, lowerBound, upperBound) {\n                var decode = NumberHelper.__decodeNumberString(s);\n                return NumberHelper.__parseAndValidateInt(decode.payload, decode.radix, lowerBound, upperBound);\n            };\n            NumberHelper.__decodeNumberString = function (s) {\n                var negative;\n                if ((function (str, searchString, position) {\n                    if (position === void 0) { position = 0; }\n                    return str.substr(position, searchString.length) === searchString;\n                })(s, \"-\")) {\n                    negative = true;\n                    s = s.substring(1);\n                }\n                else {\n                    negative = false;\n                    if ((function (str, searchString, position) {\n                        if (position === void 0) { position = 0; }\n                        return str.substr(position, searchString.length) === searchString;\n                    })(s, \"+\")) {\n                        s = s.substring(1);\n                    }\n                }\n                var radix;\n                if ((function (str, searchString, position) {\n                    if (position === void 0) { position = 0; }\n                    return str.substr(position, searchString.length) === searchString;\n                })(s, \"0x\") || (function (str, searchString, position) {\n                    if (position === void 0) { position = 0; }\n                    return str.substr(position, searchString.length) === searchString;\n                })(s, \"0X\")) {\n                    s = s.substring(2);\n                    radix = 16;\n                }\n                else if ((function (str, searchString, position) {\n                    if (position === void 0) { position = 0; }\n                    return str.substr(position, searchString.length) === searchString;\n                })(s, \"#\")) {\n                    s = s.substring(1);\n                    radix = 16;\n                }\n                else if ((function (str, searchString, position) {\n                    if (position === void 0) { position = 0; }\n                    return str.substr(position, searchString.length) === searchString;\n                })(s, \"0\")) {\n                    radix = 8;\n                }\n                else {\n                    radix = 10;\n                }\n                if (negative) {\n                    s = \"-\" + s;\n                }\n                return new NumberHelper.__Decode(radix, s);\n            };\n            /**\n             * @skip\n             *\n             * This function contains common logic for parsing a String as a\n             * floating- point number and validating the range.\n             */\n            NumberHelper.__parseAndValidateDouble = function (s) {\n                if (!NumberHelper.__isValidDouble(s)) {\n                    throw java.lang.NumberFormatException.forInputString(s);\n                }\n                return parseFloat(s);\n            };\n            /**\n             * @skip\n             *\n             * This function contains common logic for parsing a String in a given\n             * radix and validating the result.\n             */\n            NumberHelper.__parseAndValidateInt = function (s, radix, lowerBound, upperBound) {\n                if (s == null) {\n                    throw java.lang.NumberFormatException.forNullInputString();\n                }\n                if (radix < javaemul.internal.CharacterHelper.MIN_RADIX || radix > javaemul.internal.CharacterHelper.MAX_RADIX) {\n                    throw java.lang.NumberFormatException.forRadix(radix);\n                }\n                var length = s.length;\n                var startIndex = (length > 0) && (s.charAt(0) === '-' || s.charAt(0) === '+') ? 1 : 0;\n                for (var i = startIndex; i < length; i++) {\n                    if (javaemul.internal.CharacterHelper.digit(s.charAt(i), radix) === -1) {\n                        throw java.lang.NumberFormatException.forInputString(s);\n                    }\n                }\n                var toReturn = (parseInt(s, radix) | 0);\n                var isTooLow = toReturn < lowerBound;\n                if (javaemul.internal.DoubleHelper.isNaN(toReturn)) {\n                    throw java.lang.NumberFormatException.forInputString(s);\n                }\n                else if (isTooLow || toReturn > upperBound) {\n                    throw java.lang.NumberFormatException.forInputString(s);\n                }\n                return toReturn;\n            };\n            /**\n             * @skip\n             *\n             * This function contains common logic for parsing a String in a given\n             * radix and validating the result.\n             */\n            NumberHelper.__parseAndValidateLong = function (s, radix) {\n                if (s == null) {\n                    throw java.lang.NumberFormatException.forNullInputString();\n                }\n                if (radix < javaemul.internal.CharacterHelper.MIN_RADIX || radix > javaemul.internal.CharacterHelper.MAX_RADIX) {\n                    throw java.lang.NumberFormatException.forRadix(radix);\n                }\n                var orig = s;\n                var length = s.length;\n                var negative = false;\n                if (length > 0) {\n                    var c = s.charAt(0);\n                    if (c === '-' || c === '+') {\n                        s = s.substring(1);\n                        length--;\n                        negative = (c === '-');\n                    }\n                }\n                if (length === 0) {\n                    throw java.lang.NumberFormatException.forInputString(orig);\n                }\n                while ((s.length > 0 && s.charAt(0) === '0')) {\n                    s = s.substring(1);\n                    length--;\n                }\n                ;\n                if (length > NumberHelper.__ParseLong.maxLengthForRadix_$LI$()[radix]) {\n                    throw java.lang.NumberFormatException.forInputString(orig);\n                }\n                for (var i = 0; i < length; i++) {\n                    if (javaemul.internal.CharacterHelper.digit(s.charAt(i), radix) === -1) {\n                        throw java.lang.NumberFormatException.forInputString(orig);\n                    }\n                }\n                var toReturn = 0;\n                var maxDigits = NumberHelper.__ParseLong.maxDigitsForRadix_$LI$()[radix];\n                var radixPower = NumberHelper.__ParseLong.maxDigitsRadixPower_$LI$()[radix];\n                var minValue = -NumberHelper.__ParseLong.maxValueForRadix_$LI$()[radix];\n                var firstTime = true;\n                var head = length % maxDigits;\n                if (head > 0) {\n                    toReturn = -(parseInt(s.substring(0, head), radix) | 0);\n                    s = s.substring(head);\n                    length -= head;\n                    firstTime = false;\n                }\n                while ((length >= maxDigits)) {\n                    head = (parseInt(s.substring(0, maxDigits), radix) | 0);\n                    s = s.substring(maxDigits);\n                    length -= maxDigits;\n                    if (!firstTime) {\n                        if (toReturn < minValue) {\n                            throw java.lang.NumberFormatException.forInputString(orig);\n                        }\n                        toReturn *= radixPower;\n                    }\n                    else {\n                        firstTime = false;\n                    }\n                    toReturn -= head;\n                }\n                ;\n                if (toReturn > 0) {\n                    throw java.lang.NumberFormatException.forInputString(orig);\n                }\n                if (!negative) {\n                    toReturn = -toReturn;\n                    if (toReturn < 0) {\n                        throw java.lang.NumberFormatException.forInputString(orig);\n                    }\n                }\n                return toReturn;\n            };\n            /**\n             * @skip\n             *\n             * @param str\n             * @return {@code true} if the string matches the float format,\n             * {@code false} otherwise\n             */\n            NumberHelper.__isValidDouble = function (str) {\n                if (NumberHelper.floatRegex == null) {\n                    NumberHelper.floatRegex = NumberHelper.createFloatRegex();\n                }\n                return NumberHelper.floatRegex.test(str);\n            };\n            NumberHelper.createFloatRegex = function () {\n                return /^\\s*[+-]?(NaN|Infinity|((\\d+\\.?\\d*)|(\\.\\d+))([eE][+-]?\\d+)?[dDfF]?)\\s*$/;\n            };\n            NumberHelper.prototype.byteValue = function () {\n                return (this.intValue() | 0);\n            };\n            NumberHelper.prototype.shortValue = function () {\n                return (this.intValue() | 0);\n            };\n            return NumberHelper;\n        }());\n        internal.NumberHelper = NumberHelper;\n        NumberHelper[\"__class\"] = \"javaemul.internal.NumberHelper\";\n        NumberHelper[\"__interfaces\"] = [\"java.io.Serializable\"];\n        var NumberHelper;\n        (function (NumberHelper) {\n            var __Decode = (function () {\n                function __Decode(radix, payload) {\n                    this.radix = 0;\n                    this.radix = radix;\n                    this.payload = payload;\n                }\n                return __Decode;\n            }());\n            NumberHelper.__Decode = __Decode;\n            __Decode[\"__class\"] = \"javaemul.internal.NumberHelper.__Decode\";\n            /**\n             * Use nested class to avoid clinit on outer.\n             */\n            var __ParseLong = (function () {\n                function __ParseLong() {\n                }\n                __ParseLong.__static_initialize = function () { if (!__ParseLong.__static_initialized) {\n                    __ParseLong.__static_initialized = true;\n                    __ParseLong.__static_initializer_0();\n                } };\n                __ParseLong.maxDigitsForRadix_$LI$ = function () { __ParseLong.__static_initialize(); if (__ParseLong.maxDigitsForRadix == null)\n                    __ParseLong.maxDigitsForRadix = [-1, -1, 30, 19, 15, 13, 11, 11, 10, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5]; return __ParseLong.maxDigitsForRadix; };\n                ;\n                __ParseLong.maxDigitsRadixPower_$LI$ = function () { __ParseLong.__static_initialize(); if (__ParseLong.maxDigitsRadixPower == null)\n                    __ParseLong.maxDigitsRadixPower = new Array(37); return __ParseLong.maxDigitsRadixPower; };\n                ;\n                __ParseLong.maxLengthForRadix_$LI$ = function () { __ParseLong.__static_initialize(); if (__ParseLong.maxLengthForRadix == null)\n                    __ParseLong.maxLengthForRadix = [-1, -1, 63, 40, 32, 28, 25, 23, 21, 20, 19, 19, 18, 18, 17, 17, 16, 16, 16, 15, 15, 15, 15, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13]; return __ParseLong.maxLengthForRadix; };\n                ;\n                __ParseLong.maxValueForRadix_$LI$ = function () { __ParseLong.__static_initialize(); if (__ParseLong.maxValueForRadix == null)\n                    __ParseLong.maxValueForRadix = new Array(37); return __ParseLong.maxValueForRadix; };\n                ;\n                __ParseLong.__static_initializer_0 = function () {\n                    for (var i = 2; i <= 36; i++) {\n                        __ParseLong.maxDigitsRadixPower_$LI$()[i] = (Math.pow(i, __ParseLong.maxDigitsForRadix_$LI$()[i]) | 0);\n                        __ParseLong.maxValueForRadix_$LI$()[i] = Math.round(9223372036854775807 / __ParseLong.maxDigitsRadixPower_$LI$()[i]);\n                    }\n                };\n                __ParseLong.__static_initialized = false;\n                return __ParseLong;\n            }());\n            NumberHelper.__ParseLong = __ParseLong;\n            __ParseLong[\"__class\"] = \"javaemul.internal.NumberHelper.__ParseLong\";\n        })(NumberHelper = internal.NumberHelper || (internal.NumberHelper = {}));\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        var ObjectHelper = (function () {\n            function ObjectHelper() {\n            }\n            ObjectHelper.clone = function (obj) {\n                var copy;\n                // Handle the 3 simple types, and null or undefined\n                if (null == obj || \"object\" != typeof obj)\n                    return obj;\n                // Handle Date\n                if (obj instanceof Date) {\n                    copy = new Date();\n                    copy.setTime(obj.getTime());\n                    return copy;\n                }\n                // Handle Array\n                if (obj instanceof Array) {\n                    copy = [];\n                    for (var i = 0, len = obj.length; i < len; i++) {\n                        copy[i] = javaemul.internal.ObjectHelper.clone(obj[i]);\n                    }\n                    return copy;\n                }\n                // Handle Object\n                if (obj instanceof Object) {\n                    copy = {};\n                    for (var attr in obj) {\n                        if (obj.hasOwnProperty(attr))\n                            copy[attr] = javaemul.internal.ObjectHelper.clone(obj[attr]);\n                    }\n                    return copy;\n                }\n                throw new Error(\"Unable to copy obj! Its type isn't supported.\");\n            };\n            return ObjectHelper;\n        }());\n        internal.ObjectHelper = ObjectHelper;\n        ObjectHelper[\"__class\"] = \"javaemul.internal.ObjectHelper\";\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * Hashcode caching for strings.\n         */\n        var StringHashCache = (function () {\n            function StringHashCache() {\n            }\n            StringHashCache.back_$LI$ = function () { if (StringHashCache.back == null)\n                StringHashCache.back = StringHashCache.createNativeObject(); return StringHashCache.back; };\n            ;\n            StringHashCache.front_$LI$ = function () { if (StringHashCache.front == null)\n                StringHashCache.front = StringHashCache.createNativeObject(); return StringHashCache.front; };\n            ;\n            StringHashCache.getHashCode = function (str) {\n                var key = \":\" + str;\n                var result = StringHashCache.getProperty(StringHashCache.front_$LI$(), key);\n                if (!javaemul.internal.JsUtils.isUndefined(result)) {\n                    return StringHashCache.unsafeCastToInt(result);\n                }\n                result = StringHashCache.getProperty(StringHashCache.back_$LI$(), key);\n                var hashCode = javaemul.internal.JsUtils.isUndefined(result) ? StringHashCache.compute(str) : StringHashCache.unsafeCastToInt(result);\n                StringHashCache.increment();\n                javaemul.internal.JsUtils.setIntProperty(StringHashCache.front_$LI$(), key, hashCode);\n                return hashCode;\n            };\n            StringHashCache.compute = function (str) {\n                var hashCode = 0;\n                var n = str.length;\n                var nBatch = n - 4;\n                var i = 0;\n                while ((i < nBatch)) {\n                    hashCode = (str.charAt(i + 3)).charCodeAt(0) + 31 * ((str.charAt(i + 2)).charCodeAt(0) + 31 * ((str.charAt(i + 1)).charCodeAt(0) + 31 * ((str.charAt(i)).charCodeAt(0) + 31 * hashCode)));\n                    hashCode = javaemul.internal.Coercions.ensureInt(hashCode);\n                    i += 4;\n                }\n                ;\n                while ((i < n)) {\n                    hashCode = hashCode * 31 + (str.charAt(i++)).charCodeAt(0);\n                }\n                ;\n                hashCode = javaemul.internal.Coercions.ensureInt(hashCode);\n                return hashCode;\n            };\n            StringHashCache.increment = function () {\n                if (StringHashCache.count === StringHashCache.MAX_CACHE) {\n                    StringHashCache.back = StringHashCache.front;\n                    StringHashCache.front = StringHashCache.createNativeObject();\n                    StringHashCache.count = 0;\n                }\n                ++StringHashCache.count;\n            };\n            StringHashCache.getProperty = function (map, key) {\n                return map[key];\n            };\n            StringHashCache.createNativeObject = function () {\n                return {};\n            };\n            StringHashCache.unsafeCastToInt = function (o) {\n                return o;\n            };\n            /**\n             * Tracks the number of entries in front.\n             */\n            StringHashCache.count = 0;\n            /**\n             * Pulled this number out of thin air.\n             */\n            StringHashCache.MAX_CACHE = 256;\n            return StringHashCache;\n        }());\n        internal.StringHashCache = StringHashCache;\n        StringHashCache[\"__class\"] = \"javaemul.internal.StringHashCache\";\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar test;\n(function (test) {\n    var Test = (function () {\n        function Test() {\n        }\n        Test.assertEquals = function (o1, o2) {\n            if (!(o1 === o2)) {\n                throw new Error(\"invalid assertion: \" + o1 + \"!=\" + o2);\n            }\n        };\n        Test.assertTrue = function (b) {\n            if (!b) {\n                throw new Error(\"invalid assertion\");\n            }\n        };\n        Test.assertFalse = function (b) {\n            if (b) {\n                throw new Error(\"invalid assertion\");\n            }\n        };\n        Test.test = function () {\n            try {\n                Test.testArrays();\n                Test.testList();\n                Test.testMap();\n                Test.testSet();\n                Test.testString();\n                Test.testIO();\n                var result = document.getElementById(\"result\");\n                if (result != null) {\n                    result.innerHTML = \"Success!\";\n                }\n            }\n            catch (e) {\n                console.error(e);\n                var result = document.getElementById(\"result\");\n                if (result != null) {\n                    result.innerHTML = \"Failure: \" + e.message;\n                }\n            }\n            ;\n        };\n        Test.testArrays = function () {\n            console.info(\"testing arrays\");\n            var srcArray = [\"a\", \"b\", \"c\"];\n            var dstArray = new Array(srcArray.length - 1);\n            java.lang.System.arraycopy(srcArray, 1, dstArray, 0, srcArray.length - 1);\n            Test.assertEquals(2, dstArray.length);\n            Test.assertEquals(\"b\", dstArray[0]);\n            Test.assertEquals(\"c\", dstArray[1]);\n            var myArray = [3, 2, 1];\n            Test.assertEquals(3, myArray[0]);\n            java.util.Arrays.sort(myArray);\n            Test.assertEquals(1, myArray[0]);\n            console.info(\"end testing arrays\");\n        };\n        Test.testList = function () {\n            console.info(\"testing lists\");\n            var l = (new java.util.ArrayList());\n            l.add(\"a\");\n            l.add(\"b\");\n            l.add(\"c\");\n            Test.assertEquals(l.toString(), \"[a, b, c]\");\n            Test.assertEquals(l.subList(1, 3).toString(), \"[b, c]\");\n            Test.assertEquals(l.remove(\"b\"), true);\n            Test.assertEquals(l.remove(\"d\"), false);\n            Test.assertEquals(l.remove(1), \"c\");\n            l.add(\"c\");\n            Test.assertEquals(l.toString(), \"[a, c]\");\n            Test.assertEquals(l.size(), 2);\n            Test.assertEquals(l.get(1), \"c\");\n            Test.assertEquals(l.indexOf(\"a\"), 0);\n            var res = \"\";\n            for (var index128 = l.iterator(); index128.hasNext();) {\n                var s = index128.next();\n                {\n                    res += s;\n                }\n            }\n            Test.assertEquals(\"ac\", res);\n            var it = l.iterator();\n            Test.assertTrue(it.hasNext());\n            Test.assertEquals(\"a\", it.next());\n            Test.assertTrue(it.hasNext());\n            Test.assertEquals(\"c\", it.next());\n            Test.assertFalse(it.hasNext());\n            console.info(\"end testing lists\");\n        };\n        Test.testSet = function () {\n            console.info(\"testing sets\");\n            var s = (new java.util.HashSet());\n            s.add(\"a\");\n            s.add(\"a\");\n            s.add(\"b\");\n            s.add(\"c\");\n            s.add(\"c\");\n            Test.assertEquals(s.toString(), \"[a, b, c]\");\n            s.remove(\"b\");\n            Test.assertTrue(s.contains(\"a\"));\n            Test.assertTrue(s.contains(\"c\"));\n            Test.assertFalse(s.contains(\"b\"));\n            Test.assertEquals(s.size(), 2);\n            console.info(\"testing bit sets\");\n            var bs = java.util.BitSet.valueOf([255]);\n            Test.assertTrue(bs.get(0));\n            Test.assertTrue(bs.get(1));\n            Test.assertTrue(bs.get(7));\n            Test.assertFalse(bs.get(8));\n            var bs2 = java.util.BitSet.valueOf([1]);\n            Test.assertTrue(bs2.get(0));\n            Test.assertFalse(bs2.get(1));\n            bs.and(bs2);\n            Test.assertTrue(bs.get(0));\n            Test.assertFalse(bs.get(1));\n            console.info(\"end testing sets\");\n        };\n        Test.testMap = function () {\n            console.info(\"testing maps\");\n            var m = (new java.util.HashMap());\n            m.put(\"a\", \"aa\");\n            m.put(\"b\", \"bb\");\n            m.put(\"c\", \"cc\");\n            Test.assertEquals(m.size(), 3);\n            Test.assertEquals(\"bb\", m.get(\"b\"));\n            m.remove(\"aa\");\n            Test.assertEquals(m.size(), 3);\n            m.remove(\"a\");\n            Test.assertEquals(m.size(), 2);\n            console.info(\"end testing maps\");\n        };\n        Test.testString = function () {\n            console.info(\"testing strings\");\n            var sb = new java.lang.StringBuilder();\n            sb.append(true);\n            sb.append('c');\n            sb.append(\"test\");\n            sb.deleteCharAt(sb.length() - 1);\n            Test.assertEquals(\"truectes\", sb.toString());\n            sb.append(\"abc\", 0, 1);\n            Test.assertEquals(\"truectesa\", sb.toString());\n            var sb2 = new java.lang.StringBuffer();\n            sb2.append(true);\n            sb2.append('c');\n            sb2.append(\"test\");\n            sb2.deleteCharAt(sb2.length() - 1);\n            Test.assertEquals(\"truectes\", sb2.toString());\n            Test.assertEquals('a', javaemul.internal.CharacterHelper.toLowerCase('A'));\n            Test.assertEquals(\"abc\", \"ABC\".toLowerCase());\n            console.info(\"end testing strings\");\n        };\n        Test.testIO = function () {\n            console.info(\"testing io\");\n            var s = new java.io.ByteArrayInputStream(/* getBytes */ (\"abc\").split('').map(function (s) { return s.charCodeAt(0); }));\n            Test.assertEquals(javaemul.internal.CharacterHelper.getNumericValue('a'), s.read());\n            console.info(\"end testing io\");\n        };\n        return Test;\n    }());\n    test.Test = Test;\n    Test[\"__class\"] = \"test.Test\";\n})(test || (test = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var io;\n    (function (io) {\n        /**\n         * A specialized {@link InputStream } for reading the contents of a byte array.\n         *\n         * @see ByteArrayOutputStream\n         */\n        var ByteArrayInputStream = (function (_super) {\n            __extends(ByteArrayInputStream, _super);\n            /**\n             * Constructs a new {@code ByteArrayInputStream} on the byte array\n             * {@code buf} with the initial position set to {@code offset} and the\n             * number of bytes available set to {@code offset} + {@code length}.\n             *\n             * @param buf\n             * the byte array to stream over.\n             * @param offset\n             * the initial position in {@code buf} to start streaming from.\n             * @param length\n             * the number of bytes available for streaming.\n             */\n            function ByteArrayInputStream(buf, offset, length) {\n                if (offset === void 0) { offset = 0; }\n                if (length === void 0) { length = -1; }\n                _super.call(this);\n                this.pos = 0;\n                this._mark = 0;\n                this.count = 0;\n                if (length === -1) {\n                    length = buf.length;\n                }\n                this.buf = buf;\n                this.pos = offset;\n                this._mark = offset;\n                this.count = offset + length > buf.length ? buf.length : offset + length;\n            }\n            /**\n             * Returns the number of remaining bytes.\n             *\n             * @return {@code count - pos}\n             */\n            ByteArrayInputStream.prototype.available = function () {\n                return this.count - this.pos;\n            };\n            /**\n             * Closes this stream and frees resources associated with this stream.\n             *\n             * @throws IOException\n             * if an I/O error occurs while closing this stream.\n             */\n            ByteArrayInputStream.prototype.close = function () {\n            };\n            /**\n             * Sets a mark position in this ByteArrayInputStream. The parameter\n             * {@code readlimit} is ignored. Sending {@code reset()} will reposition the\n             * stream back to the marked position.\n             *\n             * @param readlimit\n             * ignored.\n             * @see #markSupported()\n             * @see #reset()\n             */\n            ByteArrayInputStream.prototype.mark = function (readlimit) {\n                this._mark = this.pos;\n            };\n            /**\n             * Indicates whether this stream supports the {@code mark()} and\n             * {@code reset()} methods. Returns {@code true} since this class supports\n             * these methods.\n             *\n             * @return always {@code true}.\n             * @see #mark(int)\n             * @see #reset()\n             */\n            ByteArrayInputStream.prototype.markSupported = function () {\n                return true;\n            };\n            /**\n             * Reads a single byte from the source byte array and returns it as an\n             * integer in the range from 0 to 255. Returns -1 if the end of the source\n             * array has been reached.\n             *\n             * @return the byte read or -1 if the end of this stream has been reached.\n             */\n            ByteArrayInputStream.prototype.read$ = function () {\n                return this.read(null, 0, 0);\n            };\n            ByteArrayInputStream.prototype.read = function (buffer, byteOffset, byteCount) {\n                var _this = this;\n                if (((buffer != null && buffer instanceof Array) || buffer === null) && ((typeof byteOffset === 'number') || byteOffset === null) && ((typeof byteCount === 'number') || byteCount === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (buffer == null) {\n                            return _this.pos < _this.count ? _this.buf[_this.pos++] & 255 : -1;\n                        }\n                        java.io.IOUtils.checkOffsetAndCount(buffer, byteOffset, byteCount);\n                        if (_this.pos >= _this.count) {\n                            return -1;\n                        }\n                        if (byteCount === 0) {\n                            return 0;\n                        }\n                        var copylen = _this.count - _this.pos < byteCount ? _this.count - _this.pos : byteCount;\n                        java.lang.System.arraycopy(_this.buf, _this.pos, buffer, byteOffset, copylen);\n                        _this.pos += copylen;\n                        return copylen;\n                    })();\n                }\n                else if (((buffer != null && buffer instanceof Array) || buffer === null) && byteOffset === undefined && byteCount === undefined) {\n                    return this.read$byte_A(buffer);\n                }\n                else if (buffer === undefined && byteOffset === undefined && byteCount === undefined) {\n                    return this.read$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Resets this stream to the last marked location. This implementation\n             * resets the position to either the marked position, the start position\n             * supplied in the constructor or 0 if neither has been provided.\n             *\n             * @see #mark(int)\n             */\n            ByteArrayInputStream.prototype.reset = function () {\n                this.pos = this._mark;\n            };\n            /**\n             * Skips {@code byteCount} bytes in this InputStream. Subsequent calls to\n             * {@code read} will not return these bytes unless {@code reset} is used.\n             * This implementation skips {@code byteCount} number of bytes in the target\n             * stream. It does nothing and returns 0 if {@code byteCount} is negative.\n             *\n             * @return the number of bytes actually skipped.\n             */\n            ByteArrayInputStream.prototype.skip = function (byteCount) {\n                if (byteCount <= 0) {\n                    return 0;\n                }\n                var temp = this.pos;\n                this.pos = this.count - this.pos < byteCount ? this.count : ((this.pos + byteCount) | 0);\n                return this.pos - temp;\n            };\n            return ByteArrayInputStream;\n        }(java.io.InputStream));\n        io.ByteArrayInputStream = ByteArrayInputStream;\n        ByteArrayInputStream[\"__class\"] = \"java.io.ByteArrayInputStream\";\n        ByteArrayInputStream[\"__interfaces\"] = [\"java.io.Closeable\", \"java.lang.AutoCloseable\"];\n    })(io = java.io || (java.io = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var io;\n    (function (io) {\n        /**\n         * Wraps an existing {@link InputStream} and performs some transformation on\n         * the input data while it is being read. Transformations can be anything from a\n         * simple byte-wise filtering input data to an on-the-fly compression or\n         * decompression of the underlying stream. Input streams that wrap another input\n         * stream and provide some additional functionality on top of it usually inherit\n         * from this class.\n         *\n         * @see FilterOutputStream\n         */\n        var FilterInputStream = (function (_super) {\n            __extends(FilterInputStream, _super);\n            /**\n             * Constructs a new {@code FilterInputStream} with the specified input\n             * stream as source.\n             *\n             * <p><strong>Warning:</strong> passing a null source creates an invalid\n             * {@code FilterInputStream}, that fails on every method that is not\n             * overridden. Subclasses should check for null in their constructors.\n             *\n             * @param in the input stream to filter reads on.\n             */\n            function FilterInputStream(__in) {\n                _super.call(this);\n                this.in = __in;\n            }\n            FilterInputStream.prototype.available = function () {\n                return this.in.available();\n            };\n            /**\n             * Closes this stream. This implementation closes the filtered stream.\n             *\n             * @throws IOException\n             * if an error occurs while closing this stream.\n             */\n            FilterInputStream.prototype.close = function () {\n                this.in.close();\n            };\n            /**\n             * Sets a mark position in this stream. The parameter {@code readlimit}\n             * indicates how many bytes can be read before the mark is invalidated.\n             * Sending {@code reset()} will reposition this stream back to the marked\n             * position, provided that {@code readlimit} has not been surpassed.\n             * <p>\n             * This implementation sets a mark in the filtered stream.\n             *\n             * @param readlimit\n             * the number of bytes that can be read from this stream before\n             * the mark is invalidated.\n             * @see #markSupported()\n             * @see #reset()\n             */\n            FilterInputStream.prototype.mark = function (readlimit) {\n                this.in.mark(readlimit);\n            };\n            /**\n             * Indicates whether this stream supports {@code mark()} and {@code reset()}.\n             * This implementation returns whether or not the filtered stream supports\n             * marking.\n             *\n             * @return {@code true} if {@code mark()} and {@code reset()} are supported,\n             * {@code false} otherwise.\n             * @see #mark(int)\n             * @see #reset()\n             * @see #skip(long)\n             */\n            FilterInputStream.prototype.markSupported = function () {\n                return this.in.markSupported();\n            };\n            /**\n             * Reads a single byte from the filtered stream and returns it as an integer\n             * in the range from 0 to 255. Returns -1 if the end of this stream has been\n             * reached.\n             *\n             * @return the byte read or -1 if the end of the filtered stream has been\n             * reached.\n             * @throws IOException\n             * if the stream is closed or another IOException occurs.\n             */\n            FilterInputStream.prototype.read$ = function () {\n                return this.in.read();\n            };\n            FilterInputStream.prototype.read = function (buffer, byteOffset, byteCount) {\n                var _this = this;\n                if (((buffer != null && buffer instanceof Array) || buffer === null) && ((typeof byteOffset === 'number') || byteOffset === null) && ((typeof byteCount === 'number') || byteCount === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return _this.in.read(buffer, byteOffset, byteCount);\n                    })();\n                }\n                else if (((buffer != null && buffer instanceof Array) || buffer === null) && byteOffset === undefined && byteCount === undefined) {\n                    return this.read$byte_A(buffer);\n                }\n                else if (buffer === undefined && byteOffset === undefined && byteCount === undefined) {\n                    return this.read$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Resets this stream to the last marked location. This implementation\n             * resets the target stream.\n             *\n             * @throws IOException\n             * if this stream is already closed, no mark has been set or the\n             * mark is no longer valid because more than {@code readlimit}\n             * bytes have been read since setting the mark.\n             * @see #mark(int)\n             * @see #markSupported()\n             */\n            FilterInputStream.prototype.reset = function () {\n                this.in.reset();\n            };\n            /**\n             * Skips {@code byteCount} bytes in this stream. Subsequent\n             * calls to {@code read} will not return these bytes unless {@code reset} is\n             * used. This implementation skips {@code byteCount} bytes in the\n             * filtered stream.\n             *\n             * @return the number of bytes actually skipped.\n             * @throws IOException\n             * if this stream is closed or another IOException occurs.\n             * @see #mark(int)\n             * @see #reset()\n             */\n            FilterInputStream.prototype.skip = function (byteCount) {\n                return this.in.skip(byteCount);\n            };\n            return FilterInputStream;\n        }(java.io.InputStream));\n        io.FilterInputStream = FilterInputStream;\n        FilterInputStream[\"__class\"] = \"java.io.FilterInputStream\";\n        FilterInputStream[\"__interfaces\"] = [\"java.io.Closeable\", \"java.lang.AutoCloseable\"];\n    })(io = java.io || (java.io = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var io;\n    (function (io) {\n        /**\n         * A specialized {@link OutputStream} for class for writing content to an\n         * (internal) byte array. As bytes are written to this stream, the byte array\n         * may be expanded to hold more bytes. When the writing is considered to be\n         * finished, a copy of the byte array can be requested from the class.\n         *\n         * @see ByteArrayInputStream\n         */\n        var ByteArrayOutputStream = (function (_super) {\n            __extends(ByteArrayOutputStream, _super);\n            /**\n             * Constructs a new {@code ByteArrayOutputStream} with a default size of\n             * {@code size} bytes. If more than {@code size} bytes are written to this\n             * instance, the underlying byte array will expand.\n             *\n             * @param size\n             * initial size for the underlying byte array, must be\n             * non-negative.\n             * @throws IllegalArgumentException\n             * if {@code size} < 0.\n             */\n            function ByteArrayOutputStream(size) {\n                var _this = this;\n                if (((typeof size === 'number') || size === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    this.count = 0;\n                    (function () {\n                        if (size >= 0) {\n                            _this.buf = new Array(size);\n                        }\n                        else {\n                            throw new java.lang.IllegalArgumentException(\"size < 0\");\n                        }\n                    })();\n                }\n                else if (size === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    this.count = 0;\n                    (function () {\n                        _this.buf = new Array(32);\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            /**\n             * Closes this stream. This releases system resources used for this stream.\n             *\n             * @throws IOException\n             * if an error occurs while attempting to close this stream.\n             */\n            ByteArrayOutputStream.prototype.close = function () {\n                _super.prototype.close.call(this);\n            };\n            ByteArrayOutputStream.prototype.expand = function (i) {\n                if (this.count + i <= this.buf.length) {\n                    return;\n                }\n                var newbuf = new Array((this.count + i) * 2);\n                java.lang.System.arraycopy(this.buf, 0, newbuf, 0, this.count);\n                this.buf = newbuf;\n            };\n            /**\n             * Resets this stream to the beginning of the underlying byte array. All\n             * subsequent writes will overwrite any bytes previously stored in this\n             * stream.\n             */\n            ByteArrayOutputStream.prototype.reset = function () {\n                this.count = 0;\n            };\n            /**\n             * Returns the total number of bytes written to this stream so far.\n             *\n             * @return the number of bytes written to this stream.\n             */\n            ByteArrayOutputStream.prototype.size = function () {\n                return this.count;\n            };\n            /**\n             * Returns the contents of this ByteArrayOutputStream as a byte array. Any\n             * changes made to the receiver after returning will not be reflected in the\n             * byte array returned to the caller.\n             *\n             * @return this stream's current contents as a byte array.\n             */\n            ByteArrayOutputStream.prototype.toByteArray = function () {\n                var newArray = new Array(this.count);\n                java.lang.System.arraycopy(this.buf, 0, newArray, 0, this.count);\n                return newArray;\n            };\n            /**\n             * Returns the contents of this ByteArrayOutputStream as a string. Any\n             * changes made to the receiver after returning will not be reflected in the\n             * string returned to the caller.\n             *\n             * @return this stream's current contents as a string.\n             */\n            ByteArrayOutputStream.prototype.toString$ = function () {\n                return (function (str, index, len) { return str.substring(index, index + len); })((this.buf).map(function (s) { return String.fromCharCode(s); }).join(''), 0, this.count);\n            };\n            /**\n             * Returns the contents of this ByteArrayOutputStream as a string. Each byte\n             * {@code b} in this stream is converted to a character {@code c} using the\n             * following function:\n             * {@code c == (char)(((hibyte & 0xff) << 8) | (b & 0xff))}. This method is\n             * deprecated and either {@link #toString()} or {@link #toString(String)}\n             * should be used.\n             *\n             * @param hibyte\n             * the high byte of each resulting Unicode character.\n             * @return this stream's current contents as a string with the high byte set\n             * to {@code hibyte}.\n             * @deprecated Use {@link #toString()} instead.\n             */\n            ByteArrayOutputStream.prototype.toString$int = function (hibyte) {\n                var newBuf = new Array(this.size());\n                for (var i = 0; i < newBuf.length; i++) {\n                    newBuf[i] = String.fromCharCode((((hibyte & 255) << 8) | (this.buf[i] & 255)));\n                }\n                return new String(newBuf);\n            };\n            /**\n             * Returns the contents of this ByteArrayOutputStream as a string converted\n             * according to the encoding declared in {@code charsetName}.\n             *\n             * @param charsetName\n             * a string representing the encoding to use when translating\n             * this stream to a string.\n             * @return this stream's current contents as an encoded string.\n             * @throws UnsupportedEncodingException\n             * if the provided encoding is not supported.\n             */\n            ByteArrayOutputStream.prototype.toString = function (charsetName) {\n                var _this = this;\n                if (((typeof charsetName === 'string') || charsetName === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return (function (str, index, len) { return str.substring(index, index + len); })((_this.buf).map(function (s) { return String.fromCharCode(s); }).join(''), 0, _this.count);\n                    })();\n                }\n                else if (((typeof charsetName === 'number') || charsetName === null)) {\n                    return this.toString$int(charsetName);\n                }\n                else if (charsetName === undefined) {\n                    return this.toString$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Writes {@code count} bytes from the byte array {@code buffer} starting at\n             * offset {@code index} to this stream.\n             *\n             * @param buffer\n             * the buffer to be written.\n             * @param offset\n             * the initial position in {@code buffer} to retrieve bytes.\n             * @param len\n             * the number of bytes of {@code buffer} to write.\n             * @throws NullPointerException\n             * if {@code buffer} is {@code null}.\n             * @throws IndexOutOfBoundsException\n             * if {@code offset < 0} or {@code len < 0}, or if\n             * {@code offset + len} is greater than the length of\n             * {@code buffer}.\n             */\n            ByteArrayOutputStream.prototype.write = function (buffer, offset, len) {\n                var _this = this;\n                if (((buffer != null && buffer instanceof Array) || buffer === null) && ((typeof offset === 'number') || offset === null) && ((typeof len === 'number') || len === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        java.io.IOUtils.checkOffsetAndCount(buffer, offset, len);\n                        if (len === 0) {\n                            return;\n                        }\n                        _this.expand(len);\n                        java.lang.System.arraycopy(buffer, offset, _this.buf, _this.count, len);\n                        _this.count += len;\n                    })();\n                }\n                else if (((buffer != null && buffer instanceof Array) || buffer === null) && offset === undefined && len === undefined) {\n                    return this.write$byte_A(buffer);\n                }\n                else if (((typeof buffer === 'number') || buffer === null) && offset === undefined && len === undefined) {\n                    return this.write$int(buffer);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Writes the specified byte {@code oneByte} to the OutputStream. Only the\n             * low order byte of {@code oneByte} is written.\n             *\n             * @param oneByte\n             * the byte to be written.\n             */\n            ByteArrayOutputStream.prototype.write$int = function (oneByte) {\n                if (this.count === this.buf.length) {\n                    this.expand(1);\n                }\n                this.buf[this.count++] = (oneByte | 0);\n            };\n            /**\n             * Takes the contents of this stream and writes it to the output stream\n             * {@code out}.\n             *\n             * @param out\n             * an OutputStream on which to write the contents of this stream.\n             * @throws IOException\n             * if an error occurs while writing to {@code out}.\n             */\n            ByteArrayOutputStream.prototype.writeTo = function (out) {\n                out.write(this.buf, 0, this.count);\n            };\n            return ByteArrayOutputStream;\n        }(java.io.OutputStream));\n        io.ByteArrayOutputStream = ByteArrayOutputStream;\n        ByteArrayOutputStream[\"__class\"] = \"java.io.ByteArrayOutputStream\";\n        ByteArrayOutputStream[\"__interfaces\"] = [\"java.io.Closeable\", \"java.lang.AutoCloseable\", \"java.io.Flushable\"];\n    })(io = java.io || (java.io = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var io;\n    (function (io) {\n        /**\n         * Wraps an existing {@link OutputStream} and performs some transformation on\n         * the output data while it is being written. Transformations can be anything\n         * from a simple byte-wise filtering output data to an on-the-fly compression or\n         * decompression of the underlying stream. Output streams that wrap another\n         * output stream and provide some additional functionality on top of it usually\n         * inherit from this class.\n         *\n         * @see FilterOutputStream\n         */\n        var FilterOutputStream = (function (_super) {\n            __extends(FilterOutputStream, _super);\n            /**\n             * Constructs a new {@code FilterOutputStream} with {@code out} as its\n             * target stream.\n             *\n             * @param out\n             * the target stream that this stream writes to.\n             */\n            function FilterOutputStream(out) {\n                _super.call(this);\n                this.out = out;\n            }\n            /**\n             * Closes this stream. This implementation closes the target stream.\n             *\n             * @throws IOException\n             * if an error occurs attempting to close this stream.\n             */\n            FilterOutputStream.prototype.close = function () {\n                var thrown = null;\n                try {\n                    this.flush();\n                }\n                catch (e) {\n                    thrown = e;\n                }\n                ;\n                try {\n                    this.out.close();\n                }\n                catch (e) {\n                    if (thrown == null) {\n                        thrown = e;\n                    }\n                }\n                ;\n                if (thrown != null) {\n                    throw new java.io.IOException(thrown);\n                }\n            };\n            /**\n             * Ensures that all pending data is sent out to the target stream. This\n             * implementation flushes the target stream.\n             *\n             * @throws IOException\n             * if an error occurs attempting to flush this stream.\n             */\n            FilterOutputStream.prototype.flush = function () {\n                this.out.flush();\n            };\n            /**\n             * Writes {@code count} bytes from the byte array {@code buffer} starting at\n             * {@code offset} to the target stream.\n             *\n             * @param buffer\n             * the buffer to write.\n             * @param offset\n             * the index of the first byte in {@code buffer} to write.\n             * @param length\n             * the number of bytes in {@code buffer} to write.\n             * @throws IndexOutOfBoundsException\n             * if {@code offset < 0} or {@code count < 0}, or if\n             * {@code offset + count} is bigger than the length of\n             * {@code buffer}.\n             * @throws IOException\n             * if an I/O error occurs while writing to this stream.\n             */\n            FilterOutputStream.prototype.write = function (buffer, offset, length) {\n                var _this = this;\n                if (((buffer != null && buffer instanceof Array) || buffer === null) && ((typeof offset === 'number') || offset === null) && ((typeof length === 'number') || length === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        java.io.IOUtils.checkOffsetAndCount(buffer, offset, length);\n                        for (var i = 0; i < length; i++) {\n                            _this.write(buffer[offset + i]);\n                        }\n                    })();\n                }\n                else if (((buffer != null && buffer instanceof Array) || buffer === null) && offset === undefined && length === undefined) {\n                    return this.write$byte_A(buffer);\n                }\n                else if (((typeof buffer === 'number') || buffer === null) && offset === undefined && length === undefined) {\n                    return this.write$int(buffer);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Writes one byte to the target stream. Only the low order byte of the\n             * integer {@code oneByte} is written.\n             *\n             * @param oneByte\n             * the byte to be written.\n             * @throws IOException\n             * if an I/O error occurs while writing to this stream.\n             */\n            FilterOutputStream.prototype.write$int = function (oneByte) {\n                this.out.write(oneByte);\n            };\n            return FilterOutputStream;\n        }(java.io.OutputStream));\n        io.FilterOutputStream = FilterOutputStream;\n        FilterOutputStream[\"__class\"] = \"java.io.FilterOutputStream\";\n        FilterOutputStream[\"__interfaces\"] = [\"java.io.Closeable\", \"java.lang.AutoCloseable\", \"java.io.Flushable\"];\n    })(io = java.io || (java.io = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var io;\n    (function (io) {\n        /**\n         * JSweet implementation.\n         */\n        var BufferedReader = (function (_super) {\n            __extends(BufferedReader, _super);\n            function BufferedReader(__in, sz) {\n                var _this = this;\n                if (((__in != null && __in instanceof java.io.Reader) || __in === null) && ((typeof sz === 'number') || sz === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, __in);\n                    this.nChars = 0;\n                    this.nextChar = 0;\n                    this.markedChar = 0;\n                    this.readAheadLimit = 0;\n                    this.skipLF = false;\n                    this.markedSkipLF = false;\n                    (function () {\n                        _this.markedChar = BufferedReader.UNMARKED;\n                        _this.readAheadLimit = 0;\n                        _this.skipLF = false;\n                        _this.markedSkipLF = false;\n                        if (sz <= 0)\n                            throw new java.lang.IllegalArgumentException(\"Buffer size <= 0\");\n                        _this.in = __in;\n                        _this.cb = new Array(sz);\n                        _this.nextChar = _this.nChars = 0;\n                    })();\n                }\n                else if (((__in != null && __in instanceof java.io.Reader) || __in === null) && sz === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    {\n                        var __args_10 = Array.prototype.slice.call(arguments);\n                        var sz_1 = BufferedReader.defaultCharBufferSize;\n                        _super.call(this, __in);\n                        this.nChars = 0;\n                        this.nextChar = 0;\n                        this.markedChar = 0;\n                        this.readAheadLimit = 0;\n                        this.skipLF = false;\n                        this.markedSkipLF = false;\n                        (function () {\n                            _this.markedChar = BufferedReader.UNMARKED;\n                            _this.readAheadLimit = 0;\n                            _this.skipLF = false;\n                            _this.markedSkipLF = false;\n                            if (sz_1 <= 0)\n                                throw new java.lang.IllegalArgumentException(\"Buffer size <= 0\");\n                            _this.in = __in;\n                            _this.cb = new Array(sz_1);\n                            _this.nextChar = _this.nChars = 0;\n                        })();\n                    }\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            BufferedReader.prototype.ensureOpen = function () {\n                if (this.in == null)\n                    throw new java.io.IOException(\"Stream closed\");\n            };\n            BufferedReader.prototype.fill = function () {\n                var dst;\n                if (this.markedChar <= BufferedReader.UNMARKED) {\n                    dst = 0;\n                }\n                else {\n                    var delta = this.nextChar - this.markedChar;\n                    if (delta >= this.readAheadLimit) {\n                        this.markedChar = BufferedReader.INVALIDATED;\n                        this.readAheadLimit = 0;\n                        dst = 0;\n                    }\n                    else {\n                        if (this.readAheadLimit <= this.cb.length) {\n                            java.lang.System.arraycopy(this.cb, this.markedChar, this.cb, 0, delta);\n                            this.markedChar = 0;\n                            dst = delta;\n                        }\n                        else {\n                            var ncb = new Array(this.readAheadLimit);\n                            java.lang.System.arraycopy(this.cb, this.markedChar, ncb, 0, delta);\n                            this.cb = ncb;\n                            this.markedChar = 0;\n                            dst = delta;\n                        }\n                        this.nextChar = this.nChars = delta;\n                    }\n                }\n                var n;\n                do {\n                    n = this.in.read(this.cb, dst, this.cb.length - dst);\n                } while ((n === 0));\n                if (n > 0) {\n                    this.nChars = dst + n;\n                    this.nextChar = dst;\n                }\n            };\n            BufferedReader.prototype.read$ = function () {\n                {\n                    this.ensureOpen();\n                    for (;;) {\n                        if (this.nextChar >= this.nChars) {\n                            this.fill();\n                            if (this.nextChar >= this.nChars)\n                                return -1;\n                        }\n                        if (this.skipLF) {\n                            this.skipLF = false;\n                            if (this.cb[this.nextChar] === '\\n') {\n                                this.nextChar++;\n                                continue;\n                            }\n                        }\n                        return (this.cb[this.nextChar++]).charCodeAt(0);\n                    }\n                }\n                ;\n            };\n            BufferedReader.prototype.read1 = function (cbuf, off, len) {\n                if (this.nextChar >= this.nChars) {\n                    if (len >= this.cb.length && this.markedChar <= BufferedReader.UNMARKED && !this.skipLF) {\n                        return this.in.read(cbuf, off, len);\n                    }\n                    this.fill();\n                }\n                if (this.nextChar >= this.nChars)\n                    return -1;\n                if (this.skipLF) {\n                    this.skipLF = false;\n                    if (this.cb[this.nextChar] === '\\n') {\n                        this.nextChar++;\n                        if (this.nextChar >= this.nChars)\n                            this.fill();\n                        if (this.nextChar >= this.nChars)\n                            return -1;\n                    }\n                }\n                var n = Math.min(len, this.nChars - this.nextChar);\n                java.lang.System.arraycopy(this.cb, this.nextChar, cbuf, off, n);\n                this.nextChar += n;\n                return n;\n            };\n            BufferedReader.prototype.read = function (cbuf, off, len) {\n                var _this = this;\n                if (((cbuf != null && cbuf instanceof Array) || cbuf === null) && ((typeof off === 'number') || off === null) && ((typeof len === 'number') || len === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        {\n                            _this.ensureOpen();\n                            if ((off < 0) || (off > cbuf.length) || (len < 0) || ((off + len) > cbuf.length) || ((off + len) < 0)) {\n                                throw new java.lang.IndexOutOfBoundsException();\n                            }\n                            else if (len === 0) {\n                                return 0;\n                            }\n                            var n = _this.read1(cbuf, off, len);\n                            if (n <= 0)\n                                return n;\n                            while (((n < len) && _this.in.ready())) {\n                                var n1 = _this.read1(cbuf, off + n, len - n);\n                                if (n1 <= 0)\n                                    break;\n                                n += n1;\n                            }\n                            ;\n                            return n;\n                        }\n                        ;\n                    })();\n                }\n                else if (((cbuf != null && cbuf instanceof Array) || cbuf === null) && off === undefined && len === undefined) {\n                    return this.read$char_A(cbuf);\n                }\n                else if (cbuf === undefined && off === undefined && len === undefined) {\n                    return this.read$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            BufferedReader.prototype.readLine = function (ignoreLF) {\n                if (ignoreLF === void 0) { ignoreLF = false; }\n                var s = null;\n                var startChar;\n                {\n                    this.ensureOpen();\n                    var omitLF = ignoreLF || this.skipLF;\n                    for (;;) {\n                        if (this.nextChar >= this.nChars)\n                            this.fill();\n                        if (this.nextChar >= this.nChars) {\n                            if (s != null && s.length() > 0)\n                                return s.toString();\n                            else\n                                return null;\n                        }\n                        var eol = false;\n                        var c = String.fromCharCode(0);\n                        var i = void 0;\n                        if (omitLF && (this.cb[this.nextChar] === '\\n'))\n                            this.nextChar++;\n                        this.skipLF = false;\n                        omitLF = false;\n                        charLoop: for (i = this.nextChar; i < this.nChars; i++) {\n                            c = this.cb[i];\n                            if ((c === '\\n') || (c === '\\r')) {\n                                eol = true;\n                                break charLoop;\n                            }\n                        }\n                        startChar = this.nextChar;\n                        this.nextChar = i;\n                        if (eol) {\n                            var str = void 0;\n                            if (s == null) {\n                                str = (function (str, index, len) { return str.substring(index, index + len); })((this.cb).join(''), startChar, i - startChar);\n                            }\n                            else {\n                                s.append(this.cb, startChar, i - startChar);\n                                str = s.toString();\n                            }\n                            this.nextChar++;\n                            if (c === '\\r') {\n                                this.skipLF = true;\n                            }\n                            return str;\n                        }\n                        if (s == null)\n                            s = new java.lang.StringBuffer(BufferedReader.defaultExpectedLineLength);\n                        s.append(this.cb, startChar, i - startChar);\n                    }\n                }\n                ;\n            };\n            BufferedReader.prototype.skip = function (n) {\n                if (n < 0) {\n                    throw new java.lang.IllegalArgumentException(\"skip value is negative\");\n                }\n                {\n                    this.ensureOpen();\n                    var r = n;\n                    while ((r > 0)) {\n                        if (this.nextChar >= this.nChars)\n                            this.fill();\n                        if (this.nextChar >= this.nChars)\n                            break;\n                        if (this.skipLF) {\n                            this.skipLF = false;\n                            if (this.cb[this.nextChar] === '\\n') {\n                                this.nextChar++;\n                            }\n                        }\n                        var d = this.nChars - this.nextChar;\n                        if (r <= d) {\n                            this.nextChar += r;\n                            r = 0;\n                            break;\n                        }\n                        else {\n                            r -= d;\n                            this.nextChar = this.nChars;\n                        }\n                    }\n                    ;\n                    return n - r;\n                }\n                ;\n            };\n            BufferedReader.prototype.ready = function () {\n                this.ensureOpen();\n                if (this.skipLF) {\n                    if (this.nextChar >= this.nChars && this.in.ready()) {\n                        this.fill();\n                    }\n                    if (this.nextChar < this.nChars) {\n                        if (this.cb[this.nextChar] === '\\n')\n                            this.nextChar++;\n                        this.skipLF = false;\n                    }\n                }\n                return (this.nextChar < this.nChars) || this.in.ready();\n            };\n            BufferedReader.prototype.markSupported = function () {\n                return true;\n            };\n            BufferedReader.prototype.mark = function (readAheadLimit) {\n                if (readAheadLimit < 0) {\n                    throw new java.lang.IllegalArgumentException(\"Read-ahead limit < 0\");\n                }\n                this.ensureOpen();\n                this.readAheadLimit = readAheadLimit;\n                this.markedChar = this.nextChar;\n                this.markedSkipLF = this.skipLF;\n            };\n            BufferedReader.prototype.reset = function () {\n                this.ensureOpen();\n                if (this.markedChar < 0)\n                    throw new java.io.IOException((this.markedChar === BufferedReader.INVALIDATED) ? \"Mark invalid\" : \"Stream not marked\");\n                this.nextChar = this.markedChar;\n                this.skipLF = this.markedSkipLF;\n            };\n            BufferedReader.prototype.close = function () {\n                if (this.in == null)\n                    return;\n                try {\n                    this.in.close();\n                }\n                finally {\n                    this.in = null;\n                    this.cb = null;\n                }\n                ;\n            };\n            BufferedReader.INVALIDATED = -2;\n            BufferedReader.UNMARKED = -1;\n            BufferedReader.defaultCharBufferSize = 8192;\n            BufferedReader.defaultExpectedLineLength = 80;\n            return BufferedReader;\n        }(java.io.Reader));\n        io.BufferedReader = BufferedReader;\n        BufferedReader[\"__class\"] = \"java.io.BufferedReader\";\n        BufferedReader[\"__interfaces\"] = [\"java.io.Closeable\", \"java.lang.AutoCloseable\"];\n    })(io = java.io || (java.io = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var io;\n    (function (io) {\n        /**\n         * JSweet implementation.\n         */\n        var InputStreamReader = (function (_super) {\n            __extends(InputStreamReader, _super);\n            function InputStreamReader(__in, charsetName) {\n                var _this = this;\n                if (((__in != null && __in instanceof java.io.InputStream) || __in === null) && ((typeof charsetName === 'string') || charsetName === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, __in);\n                    (function () {\n                        _this.in = __in;\n                    })();\n                }\n                else if (((__in != null && __in instanceof java.io.InputStream) || __in === null) && ((charsetName != null && charsetName instanceof java.nio.charset.Charset) || charsetName === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var cs_1 = __args[1];\n                    _super.call(this, __in);\n                    (function () {\n                        _this.in = __in;\n                        if (cs_1 == null)\n                            throw new java.lang.NullPointerException(\"charset\");\n                    })();\n                }\n                else if (((__in != null && __in instanceof java.io.InputStream) || __in === null) && charsetName === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, __in);\n                    (function () {\n                        _this.in = __in;\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            InputStreamReader.prototype.read = function (cbuf, offset, length) {\n                var _this = this;\n                if (((cbuf != null && cbuf instanceof Array) || cbuf === null) && ((typeof offset === 'number') || offset === null) && ((typeof length === 'number') || length === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var buf = cbuf;\n                        return _this.in.read(buf, offset, length);\n                    })();\n                }\n                else if (((cbuf != null && cbuf instanceof Array) || cbuf === null) && offset === undefined && length === undefined) {\n                    return this.read$char_A(cbuf);\n                }\n                else if (cbuf === undefined && offset === undefined && length === undefined) {\n                    return this.read$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            InputStreamReader.prototype.ready = function () {\n                return this.in.available() > 0;\n            };\n            InputStreamReader.prototype.close = function () {\n                this.in.close();\n            };\n            return InputStreamReader;\n        }(java.io.Reader));\n        io.InputStreamReader = InputStreamReader;\n        InputStreamReader[\"__class\"] = \"java.io.InputStreamReader\";\n        InputStreamReader[\"__interfaces\"] = [\"java.io.Closeable\", \"java.lang.AutoCloseable\"];\n    })(io = java.io || (java.io = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var io;\n    (function (io) {\n        /**\n         * JSweet implementation (partial).\n         *\n         * TODO: actual support of charsets.\n         */\n        var OutputStreamWriter = (function (_super) {\n            __extends(OutputStreamWriter, _super);\n            function OutputStreamWriter(out, charsetName) {\n                var _this = this;\n                if (((out != null && out instanceof java.io.OutputStream) || out === null) && ((typeof charsetName === 'string') || charsetName === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, out);\n                    (function () {\n                        if (charsetName == null)\n                            throw new java.lang.NullPointerException(\"charsetName\");\n                        _this.out = out;\n                    })();\n                }\n                else if (((out != null && out instanceof java.io.OutputStream) || out === null) && ((charsetName != null && charsetName instanceof java.nio.charset.Charset) || charsetName === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var cs_2 = __args[1];\n                    _super.call(this, out);\n                    (function () {\n                        if (cs_2 == null)\n                            throw new java.lang.NullPointerException(\"charset\");\n                        _this.out = out;\n                    })();\n                }\n                else if (((out != null && out instanceof java.io.OutputStream) || out === null) && charsetName === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, out);\n                    (function () {\n                        _this.out = out;\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            OutputStreamWriter.prototype.flushBuffer = function () {\n                this.out.flush();\n            };\n            OutputStreamWriter.prototype.write$int = function (c) {\n                this.out.write(c);\n            };\n            OutputStreamWriter.prototype.write = function (cbuf, off, len) {\n                var _this = this;\n                if (((cbuf != null && cbuf instanceof Array) || cbuf === null) && ((typeof off === 'number') || off === null) && ((typeof len === 'number') || len === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var buf = cbuf;\n                        _this.out.write(buf, off, len);\n                    })();\n                }\n                else if (((typeof cbuf === 'string') || cbuf === null) && ((typeof off === 'number') || off === null) && ((typeof len === 'number') || len === null)) {\n                    return this.write$java_lang_String$int$int(cbuf, off, len);\n                }\n                else if (((cbuf != null && cbuf instanceof Array) || cbuf === null) && off === undefined && len === undefined) {\n                    return this.write$char_A(cbuf);\n                }\n                else if (((typeof cbuf === 'string') || cbuf === null) && off === undefined && len === undefined) {\n                    return this.write$java_lang_String(cbuf);\n                }\n                else if (((typeof cbuf === 'number') || cbuf === null) && off === undefined && len === undefined) {\n                    return this.write$int(cbuf);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            OutputStreamWriter.prototype.write$java_lang_String$int$int = function (str, off, len) {\n                this.out.write(/* getBytes */ (str).split('').map(function (s) { return s.charCodeAt(0); }), off, len);\n            };\n            OutputStreamWriter.prototype.flush = function () {\n                this.out.flush();\n            };\n            OutputStreamWriter.prototype.close = function () {\n                this.out.close();\n            };\n            return OutputStreamWriter;\n        }(java.io.Writer));\n        io.OutputStreamWriter = OutputStreamWriter;\n        OutputStreamWriter[\"__class\"] = \"java.io.OutputStreamWriter\";\n        OutputStreamWriter[\"__interfaces\"] = [\"java.lang.Appendable\", \"java.io.Closeable\", \"java.lang.AutoCloseable\", \"java.io.Flushable\"];\n    })(io = java.io || (java.io = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * A fast way to create strings using multiple appends.\n         *\n         * This class is an exact clone of {@link StringBuilder} except for the name.\n         * Any change made to one should be mirrored in the other.\n         */\n        var StringBuffer = (function (_super) {\n            __extends(StringBuffer, _super);\n            function StringBuffer(s) {\n                if (((typeof s === 'string') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, s);\n                }\n                else if (((s != null && (s[\"__interfaces\"] != null && s[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || s.constructor != null && s.constructor[\"__interfaces\"] != null && s.constructor[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || typeof s === \"string\")) || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, /* valueOf */ new String(s).toString());\n                }\n                else if (((typeof s === 'number') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var ignoredCapacity = __args[0];\n                    _super.call(this, \"\");\n                }\n                else if (s === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, \"\");\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            StringBuffer.prototype.append$boolean = function (x) {\n                this.string += x;\n                return this;\n            };\n            StringBuffer.prototype.append$char = function (x) {\n                this.string += x;\n                return this;\n            };\n            StringBuffer.prototype.append$char_A = function (x) {\n                this.string += new String(x).toString();\n                return this;\n            };\n            StringBuffer.prototype.append = function (x, start, len) {\n                var _this = this;\n                if (((x != null && x instanceof Array) || x === null) && ((typeof start === 'number') || start === null) && ((typeof len === 'number') || len === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        _this.string += (function (str, index, len) { return str.join('').substring(index, index + len); })(x, start, len);\n                        return _this;\n                    })();\n                }\n                else if (((x != null && (x[\"__interfaces\"] != null && x[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || x.constructor != null && x.constructor[\"__interfaces\"] != null && x.constructor[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || typeof x === \"string\")) || x === null) && ((typeof start === 'number') || start === null) && ((typeof len === 'number') || len === null)) {\n                    return this.append$java_lang_CharSequence$int$int(x, start, len);\n                }\n                else if (((x != null && x instanceof Array) || x === null) && start === undefined && len === undefined) {\n                    return this.append$char_A(x);\n                }\n                else if (((typeof x === 'string') || x === null) && start === undefined && len === undefined) {\n                    return this.append$java_lang_String(x);\n                }\n                else if (((x != null && x instanceof java.lang.StringBuffer) || x === null) && start === undefined && len === undefined) {\n                    return this.append$java_lang_StringBuffer(x);\n                }\n                else if (((x != null && (x[\"__interfaces\"] != null && x[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || x.constructor != null && x.constructor[\"__interfaces\"] != null && x.constructor[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || typeof x === \"string\")) || x === null) && start === undefined && len === undefined) {\n                    return this.append$java_lang_CharSequence(x);\n                }\n                else if (((typeof x === 'boolean') || x === null) && start === undefined && len === undefined) {\n                    return this.append$boolean(x);\n                }\n                else if (((typeof x === 'string') || x === null) && start === undefined && len === undefined) {\n                    return this.append$char(x);\n                }\n                else if (((typeof x === 'number') || x === null) && start === undefined && len === undefined) {\n                    return this.append$int(x);\n                }\n                else if (((typeof x === 'number') || x === null) && start === undefined && len === undefined) {\n                    return this.append$long(x);\n                }\n                else if (((typeof x === 'number') || x === null) && start === undefined && len === undefined) {\n                    return this.append$float(x);\n                }\n                else if (((typeof x === 'number') || x === null) && start === undefined && len === undefined) {\n                    return this.append$double(x);\n                }\n                else if (((x != null) || x === null) && start === undefined && len === undefined) {\n                    return this.append$java_lang_Object(x);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            StringBuffer.prototype.append$java_lang_CharSequence = function (x) {\n                this.string += x;\n                return this;\n            };\n            StringBuffer.prototype.append$java_lang_CharSequence$int$int = function (x, start, end) {\n                this.append0(x, start, end);\n                return this;\n            };\n            StringBuffer.prototype.append$double = function (x) {\n                this.string += x;\n                return this;\n            };\n            StringBuffer.prototype.append$float = function (x) {\n                this.string += x;\n                return this;\n            };\n            StringBuffer.prototype.append$int = function (x) {\n                this.string += x;\n                return this;\n            };\n            StringBuffer.prototype.append$long = function (x) {\n                this.string += x;\n                return this;\n            };\n            StringBuffer.prototype.append$java_lang_Object = function (x) {\n                this.string += x;\n                return this;\n            };\n            StringBuffer.prototype.append$java_lang_String = function (x) {\n                this.string += x;\n                return this;\n            };\n            StringBuffer.prototype.append$java_lang_StringBuffer = function (x) {\n                this.string += x;\n                return this;\n            };\n            StringBuffer.prototype.appendCodePoint = function (x) {\n                this.appendCodePoint0(x);\n                return this;\n            };\n            StringBuffer.prototype.delete = function (start, end) {\n                this.replace0(start, end, \"\");\n                return this;\n            };\n            StringBuffer.prototype.deleteCharAt = function (start) {\n                this.replace0(start, start + 1, \"\");\n                return this;\n            };\n            StringBuffer.prototype.insert$int$boolean = function (index, x) {\n                return this.insert(index, /* valueOf */ new String(x).toString());\n            };\n            StringBuffer.prototype.insert$int$char = function (index, x) {\n                return this.insert(index, /* valueOf */ new String(x).toString());\n            };\n            StringBuffer.prototype.insert$int$char_A = function (index, x) {\n                return this.insert(index, /* valueOf */ new String(x).toString());\n            };\n            StringBuffer.prototype.insert = function (index, x, offset, len) {\n                var _this = this;\n                if (((typeof index === 'number') || index === null) && ((x != null && x instanceof Array) || x === null) && ((typeof offset === 'number') || offset === null) && ((typeof len === 'number') || len === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return _this.insert(index, /* valueOf */ (function (str, index, len) { return str.join('').substring(index, index + len); })(x, offset, len));\n                    })();\n                }\n                else if (((typeof index === 'number') || index === null) && ((x != null && (x[\"__interfaces\"] != null && x[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || x.constructor != null && x.constructor[\"__interfaces\"] != null && x.constructor[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || typeof x === \"string\")) || x === null) && ((typeof offset === 'number') || offset === null) && ((typeof len === 'number') || len === null)) {\n                    return this.insert$int$java_lang_CharSequence$int$int(index, x, offset, len);\n                }\n                else if (((typeof index === 'number') || index === null) && ((x != null && x instanceof Array) || x === null) && offset === undefined && len === undefined) {\n                    return this.insert$int$char_A(index, x);\n                }\n                else if (((typeof index === 'number') || index === null) && ((typeof x === 'string') || x === null) && offset === undefined && len === undefined) {\n                    return this.insert$int$java_lang_String(index, x);\n                }\n                else if (((typeof index === 'number') || index === null) && ((x != null && (x[\"__interfaces\"] != null && x[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || x.constructor != null && x.constructor[\"__interfaces\"] != null && x.constructor[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || typeof x === \"string\")) || x === null) && offset === undefined && len === undefined) {\n                    return this.insert$int$java_lang_CharSequence(index, x);\n                }\n                else if (((typeof index === 'number') || index === null) && ((typeof x === 'boolean') || x === null) && offset === undefined && len === undefined) {\n                    return this.insert$int$boolean(index, x);\n                }\n                else if (((typeof index === 'number') || index === null) && ((typeof x === 'string') || x === null) && offset === undefined && len === undefined) {\n                    return this.insert$int$char(index, x);\n                }\n                else if (((typeof index === 'number') || index === null) && ((typeof x === 'number') || x === null) && offset === undefined && len === undefined) {\n                    return this.insert$int$int(index, x);\n                }\n                else if (((typeof index === 'number') || index === null) && ((typeof x === 'number') || x === null) && offset === undefined && len === undefined) {\n                    return this.insert$int$long(index, x);\n                }\n                else if (((typeof index === 'number') || index === null) && ((typeof x === 'number') || x === null) && offset === undefined && len === undefined) {\n                    return this.insert$int$float(index, x);\n                }\n                else if (((typeof index === 'number') || index === null) && ((typeof x === 'number') || x === null) && offset === undefined && len === undefined) {\n                    return this.insert$int$double(index, x);\n                }\n                else if (((typeof index === 'number') || index === null) && ((x != null) || x === null) && offset === undefined && len === undefined) {\n                    return this.insert$int$java_lang_Object(index, x);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            StringBuffer.prototype.insert$int$java_lang_CharSequence = function (index, chars) {\n                return this.insert(index, chars.toString());\n            };\n            StringBuffer.prototype.insert$int$java_lang_CharSequence$int$int = function (index, chars, start, end) {\n                return this.insert(index, /* subSequence */ chars.substring(start, end).toString());\n            };\n            StringBuffer.prototype.insert$int$double = function (index, x) {\n                return this.insert(index, /* valueOf */ new String(x).toString());\n            };\n            StringBuffer.prototype.insert$int$float = function (index, x) {\n                return this.insert(index, /* valueOf */ new String(x).toString());\n            };\n            StringBuffer.prototype.insert$int$int = function (index, x) {\n                return this.insert(index, /* valueOf */ new String(x).toString());\n            };\n            StringBuffer.prototype.insert$int$long = function (index, x) {\n                return this.insert(index, /* valueOf */ new String(x).toString());\n            };\n            StringBuffer.prototype.insert$int$java_lang_Object = function (index, x) {\n                return this.insert(index, /* valueOf */ new String(x).toString());\n            };\n            StringBuffer.prototype.insert$int$java_lang_String = function (index, x) {\n                this.replace0(index, index, x);\n                return this;\n            };\n            StringBuffer.prototype.replace = function (start, end, toInsert) {\n                this.replace0(start, end, toInsert);\n                return this;\n            };\n            StringBuffer.prototype.reverse = function () {\n                this.reverse0();\n                return this;\n            };\n            return StringBuffer;\n        }(java.lang.AbstractStringBuilder));\n        lang.StringBuffer = StringBuffer;\n        StringBuffer[\"__class\"] = \"java.lang.StringBuffer\";\n        StringBuffer[\"__interfaces\"] = [\"java.lang.CharSequence\", \"java.lang.Appendable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * A fast way to create strings using multiple appends.\n         *\n         * This class is an exact clone of {@link StringBuffer} except for the name. Any\n         * change made to one should be mirrored in the other.\n         */\n        var StringBuilder = (function (_super) {\n            __extends(StringBuilder, _super);\n            function StringBuilder(s) {\n                if (((typeof s === 'string') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, s);\n                }\n                else if (((s != null && (s[\"__interfaces\"] != null && s[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || s.constructor != null && s.constructor[\"__interfaces\"] != null && s.constructor[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || typeof s === \"string\")) || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, /* valueOf */ new String(s).toString());\n                }\n                else if (((typeof s === 'number') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var ignoredCapacity = __args[0];\n                    _super.call(this, \"\");\n                }\n                else if (s === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, \"\");\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            StringBuilder.prototype.append$boolean = function (x) {\n                this.string += x;\n                return this;\n            };\n            StringBuilder.prototype.append$char = function (x) {\n                this.string += x;\n                return this;\n            };\n            StringBuilder.prototype.append$char_A = function (x) {\n                this.string += new String(x).toString();\n                return this;\n            };\n            StringBuilder.prototype.append = function (x, start, len) {\n                var _this = this;\n                if (((x != null && x instanceof Array) || x === null) && ((typeof start === 'number') || start === null) && ((typeof len === 'number') || len === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        _this.string += (function (str, index, len) { return str.join('').substring(index, index + len); })(x, start, len);\n                        return _this;\n                    })();\n                }\n                else if (((x != null && (x[\"__interfaces\"] != null && x[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || x.constructor != null && x.constructor[\"__interfaces\"] != null && x.constructor[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || typeof x === \"string\")) || x === null) && ((typeof start === 'number') || start === null) && ((typeof len === 'number') || len === null)) {\n                    return this.append$java_lang_CharSequence$int$int(x, start, len);\n                }\n                else if (((x != null && x instanceof Array) || x === null) && start === undefined && len === undefined) {\n                    return this.append$char_A(x);\n                }\n                else if (((typeof x === 'string') || x === null) && start === undefined && len === undefined) {\n                    return this.append$java_lang_String(x);\n                }\n                else if (((x != null && x instanceof java.lang.StringBuffer) || x === null) && start === undefined && len === undefined) {\n                    return this.append$java_lang_StringBuffer(x);\n                }\n                else if (((x != null && (x[\"__interfaces\"] != null && x[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || x.constructor != null && x.constructor[\"__interfaces\"] != null && x.constructor[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || typeof x === \"string\")) || x === null) && start === undefined && len === undefined) {\n                    return this.append$java_lang_CharSequence(x);\n                }\n                else if (((typeof x === 'boolean') || x === null) && start === undefined && len === undefined) {\n                    return this.append$boolean(x);\n                }\n                else if (((typeof x === 'string') || x === null) && start === undefined && len === undefined) {\n                    return this.append$char(x);\n                }\n                else if (((typeof x === 'number') || x === null) && start === undefined && len === undefined) {\n                    return this.append$int(x);\n                }\n                else if (((typeof x === 'number') || x === null) && start === undefined && len === undefined) {\n                    return this.append$long(x);\n                }\n                else if (((typeof x === 'number') || x === null) && start === undefined && len === undefined) {\n                    return this.append$float(x);\n                }\n                else if (((typeof x === 'number') || x === null) && start === undefined && len === undefined) {\n                    return this.append$double(x);\n                }\n                else if (((x != null) || x === null) && start === undefined && len === undefined) {\n                    return this.append$java_lang_Object(x);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            StringBuilder.prototype.append$java_lang_CharSequence = function (x) {\n                this.string += x;\n                return this;\n            };\n            StringBuilder.prototype.append$java_lang_CharSequence$int$int = function (x, start, end) {\n                this.append0(x, start, end);\n                return this;\n            };\n            StringBuilder.prototype.append$double = function (x) {\n                this.string += x;\n                return this;\n            };\n            StringBuilder.prototype.append$float = function (x) {\n                this.string += x;\n                return this;\n            };\n            StringBuilder.prototype.append$int = function (x) {\n                this.string += x;\n                return this;\n            };\n            StringBuilder.prototype.append$long = function (x) {\n                this.string += x;\n                return this;\n            };\n            StringBuilder.prototype.append$java_lang_Object = function (x) {\n                this.string += x;\n                return this;\n            };\n            StringBuilder.prototype.append$java_lang_String = function (x) {\n                this.string += x;\n                return this;\n            };\n            StringBuilder.prototype.append$java_lang_StringBuffer = function (x) {\n                this.string += x;\n                return this;\n            };\n            StringBuilder.prototype.appendCodePoint = function (x) {\n                this.appendCodePoint0(x);\n                return this;\n            };\n            StringBuilder.prototype.delete = function (start, end) {\n                this.replace0(start, end, \"\");\n                return this;\n            };\n            StringBuilder.prototype.deleteCharAt = function (start) {\n                this.replace0(start, start + 1, \"\");\n                return this;\n            };\n            StringBuilder.prototype.insert$int$boolean = function (index, x) {\n                return this.insert(index, /* valueOf */ new String(x).toString());\n            };\n            StringBuilder.prototype.insert$int$char = function (index, x) {\n                this.replace0(index, index, /* valueOf */ new String(x).toString());\n                return this;\n            };\n            StringBuilder.prototype.insert$int$char_A = function (index, x) {\n                return this.insert(index, /* valueOf */ new String(x).toString());\n            };\n            StringBuilder.prototype.insert = function (index, x, offset, len) {\n                var _this = this;\n                if (((typeof index === 'number') || index === null) && ((x != null && x instanceof Array) || x === null) && ((typeof offset === 'number') || offset === null) && ((typeof len === 'number') || len === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return _this.insert(index, /* valueOf */ (function (str, index, len) { return str.join('').substring(index, index + len); })(x, offset, len));\n                    })();\n                }\n                else if (((typeof index === 'number') || index === null) && ((x != null && (x[\"__interfaces\"] != null && x[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || x.constructor != null && x.constructor[\"__interfaces\"] != null && x.constructor[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || typeof x === \"string\")) || x === null) && ((typeof offset === 'number') || offset === null) && ((typeof len === 'number') || len === null)) {\n                    return this.insert$int$java_lang_CharSequence$int$int(index, x, offset, len);\n                }\n                else if (((typeof index === 'number') || index === null) && ((x != null && x instanceof Array) || x === null) && offset === undefined && len === undefined) {\n                    return this.insert$int$char_A(index, x);\n                }\n                else if (((typeof index === 'number') || index === null) && ((typeof x === 'string') || x === null) && offset === undefined && len === undefined) {\n                    return this.insert$int$java_lang_String(index, x);\n                }\n                else if (((typeof index === 'number') || index === null) && ((x != null && (x[\"__interfaces\"] != null && x[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || x.constructor != null && x.constructor[\"__interfaces\"] != null && x.constructor[\"__interfaces\"].indexOf(\"java.lang.CharSequence\") >= 0 || typeof x === \"string\")) || x === null) && offset === undefined && len === undefined) {\n                    return this.insert$int$java_lang_CharSequence(index, x);\n                }\n                else if (((typeof index === 'number') || index === null) && ((typeof x === 'boolean') || x === null) && offset === undefined && len === undefined) {\n                    return this.insert$int$boolean(index, x);\n                }\n                else if (((typeof index === 'number') || index === null) && ((typeof x === 'string') || x === null) && offset === undefined && len === undefined) {\n                    return this.insert$int$char(index, x);\n                }\n                else if (((typeof index === 'number') || index === null) && ((typeof x === 'number') || x === null) && offset === undefined && len === undefined) {\n                    return this.insert$int$int(index, x);\n                }\n                else if (((typeof index === 'number') || index === null) && ((typeof x === 'number') || x === null) && offset === undefined && len === undefined) {\n                    return this.insert$int$long(index, x);\n                }\n                else if (((typeof index === 'number') || index === null) && ((typeof x === 'number') || x === null) && offset === undefined && len === undefined) {\n                    return this.insert$int$float(index, x);\n                }\n                else if (((typeof index === 'number') || index === null) && ((typeof x === 'number') || x === null) && offset === undefined && len === undefined) {\n                    return this.insert$int$double(index, x);\n                }\n                else if (((typeof index === 'number') || index === null) && ((x != null) || x === null) && offset === undefined && len === undefined) {\n                    return this.insert$int$java_lang_Object(index, x);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            StringBuilder.prototype.insert$int$java_lang_CharSequence = function (index, chars) {\n                return this.insert(index, chars.toString());\n            };\n            StringBuilder.prototype.insert$int$java_lang_CharSequence$int$int = function (index, chars, start, end) {\n                return this.insert(index, /* subSequence */ chars.substring(start, end).toString());\n            };\n            StringBuilder.prototype.insert$int$double = function (index, x) {\n                return this.insert(index, /* valueOf */ new String(x).toString());\n            };\n            StringBuilder.prototype.insert$int$float = function (index, x) {\n                return this.insert(index, /* valueOf */ new String(x).toString());\n            };\n            StringBuilder.prototype.insert$int$int = function (index, x) {\n                return this.insert(index, /* valueOf */ new String(x).toString());\n            };\n            StringBuilder.prototype.insert$int$long = function (index, x) {\n                return this.insert(index, /* valueOf */ new String(x).toString());\n            };\n            StringBuilder.prototype.insert$int$java_lang_Object = function (index, x) {\n                return this.insert(index, /* valueOf */ new String(x).toString());\n            };\n            StringBuilder.prototype.insert$int$java_lang_String = function (index, x) {\n                this.replace0(index, index, x);\n                return this;\n            };\n            StringBuilder.prototype.replace = function (start, end, toInsert) {\n                this.replace0(start, end, toInsert);\n                return this;\n            };\n            StringBuilder.prototype.reverse = function () {\n                this.reverse0();\n                return this;\n            };\n            return StringBuilder;\n        }(java.lang.AbstractStringBuilder));\n        lang.StringBuilder = StringBuilder;\n        StringBuilder[\"__class\"] = \"java.lang.StringBuilder\";\n        StringBuilder[\"__interfaces\"] = [\"java.lang.CharSequence\", \"java.lang.Appendable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var io;\n    (function (io) {\n        /**\n         * See <a\n         * href=\"http://java.sun.com/javase/6/docs/api/java/io/IOException.html\">the\n         * official Java API doc</a> for details.\n         */\n        var IOException = (function (_super) {\n            __extends(IOException, _super);\n            function IOException(message, throwable) {\n                if (((typeof message === 'string') || message === null) && ((throwable != null && throwable instanceof Error) || throwable === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (((typeof message === 'string') || message === null) && throwable === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (((message != null && message instanceof Error) || message === null) && throwable === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var throwable_1 = __args[0];\n                    _super.call(this, throwable_1);\n                    this.message = throwable_1;\n                }\n                else if (message === undefined && throwable === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return IOException;\n        }(Error));\n        io.IOException = IOException;\n        IOException[\"__class\"] = \"java.io.IOException\";\n        IOException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(io = java.io || (java.io = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * See <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/CloneNotSupportedException.html\">\n         * the official Java API doc</a> for details.\n         */\n        var CloneNotSupportedException = (function (_super) {\n            __extends(CloneNotSupportedException, _super);\n            function CloneNotSupportedException(msg) {\n                if (((typeof msg === 'string') || msg === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, msg);\n                    this.message = msg;\n                }\n                else if (msg === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return CloneNotSupportedException;\n        }(Error));\n        lang.CloneNotSupportedException = CloneNotSupportedException;\n        CloneNotSupportedException[\"__class\"] = \"java.lang.CloneNotSupportedException\";\n        CloneNotSupportedException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * See <a href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/NoSuchMethodException.html\">the\n         * official Java API doc</a> for details.\n         *\n         * This exception is never thrown by GWT or GWT's libraries, as GWT does not support reflection. It\n         * is provided in GWT only for compatibility with user code that explicitly throws or catches it for\n         * non-reflection purposes.\n         */\n        var NoSuchMethodException = (function (_super) {\n            __extends(NoSuchMethodException, _super);\n            function NoSuchMethodException(message) {\n                if (((typeof message === 'string') || message === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (message === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return NoSuchMethodException;\n        }(Error));\n        lang.NoSuchMethodException = NoSuchMethodException;\n        NoSuchMethodException[\"__class\"] = \"java.lang.NoSuchMethodException\";\n        NoSuchMethodException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * See <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/RuntimeException.html\">the\n         * official Java API doc</a> for details.\n         */\n        var RuntimeException = (function (_super) {\n            __extends(RuntimeException, _super);\n            function RuntimeException(message, cause, enableSuppression, writableStackTrace) {\n                if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof Error) || cause === null) && ((typeof enableSuppression === 'boolean') || enableSuppression === null) && ((typeof writableStackTrace === 'boolean') || writableStackTrace === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof Error) || cause === null) && enableSuppression === undefined && writableStackTrace === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (((typeof message === 'string') || message === null) && cause === undefined && enableSuppression === undefined && writableStackTrace === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (((message != null && message instanceof Error) || message === null) && cause === undefined && enableSuppression === undefined && writableStackTrace === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var cause_3 = __args[0];\n                    _super.call(this, cause_3);\n                    this.message = cause_3;\n                }\n                else if (message === undefined && cause === undefined && enableSuppression === undefined && writableStackTrace === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return RuntimeException;\n        }(Error));\n        lang.RuntimeException = RuntimeException;\n        RuntimeException[\"__class\"] = \"java.lang.RuntimeException\";\n        RuntimeException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var security;\n    (function (security) {\n        /**\n         * A generic security exception type - <a\n         * href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/security/GeneralSecurityException.html\">[Sun's\n         * docs]</a>.\n         */\n        var GeneralSecurityException = (function (_super) {\n            __extends(GeneralSecurityException, _super);\n            function GeneralSecurityException(msg) {\n                if (((typeof msg === 'string') || msg === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, msg);\n                    this.message = msg;\n                }\n                else if (msg === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return GeneralSecurityException;\n        }(Error));\n        security.GeneralSecurityException = GeneralSecurityException;\n        GeneralSecurityException[\"__class\"] = \"java.security.GeneralSecurityException\";\n        GeneralSecurityException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(security = java.security || (java.security = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var text;\n    (function (text) {\n        /**\n         * Emulation of {@code java.text.ParseException}.\n         */\n        var ParseException = (function (_super) {\n            __extends(ParseException, _super);\n            function ParseException(s, errorOffset) {\n                _super.call(this, s);\n                this.message = s;\n                this.errorOffset = 0;\n                this.errorOffset = errorOffset;\n            }\n            ParseException.prototype.getErrorOffset = function () {\n                return this.errorOffset;\n            };\n            return ParseException;\n        }(Error));\n        text.ParseException = ParseException;\n        ParseException[\"__class\"] = \"java.text.ParseException\";\n        ParseException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(text = java.text || (java.text = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Thrown when the subject of an observer cannot support additional observers.\n         *\n         */\n        var TooManyListenersException = (function (_super) {\n            __extends(TooManyListenersException, _super);\n            function TooManyListenersException(message) {\n                if (((typeof message === 'string') || message === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (message === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return TooManyListenersException;\n        }(Error));\n        util.TooManyListenersException = TooManyListenersException;\n        TooManyListenersException[\"__class\"] = \"java.util.TooManyListenersException\";\n        TooManyListenersException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        var ref;\n        (function (ref) {\n            /**\n             * This implements the reference API in a minimal way. In JavaScript, there is\n             * no control over the reference and the GC. So this implementation's only\n             * purpose is for compilation.\n             */\n            var WeakReference = (function (_super) {\n                __extends(WeakReference, _super);\n                function WeakReference(referent) {\n                    _super.call(this, referent);\n                }\n                return WeakReference;\n            }(java.lang.ref.Reference));\n            ref.WeakReference = WeakReference;\n            WeakReference[\"__class\"] = \"java.lang.ref.WeakReference\";\n        })(ref = lang.ref || (lang.ref = {}));\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * Thrown to indicate some unexpected internal error has occurred in\n         * the Java Virtual Machine.\n         *\n         * @author  unascribed\n         * @since   JDK1.0\n         */\n        var InternalError = (function (_super) {\n            __extends(InternalError, _super);\n            /**\n             * Constructs an {@code InternalError} with the specified detail\n             * message and cause.  <p>Note that the detail message associated\n             * with {@code cause} is <i>not</i> automatically incorporated in\n             * this error's detail message.\n             *\n             * @param  message the detail message (which is saved for later retrieval\n             * by the {@link #getMessage()} method).\n             * @param  cause the cause (which is saved for later retrieval by the\n             * {@link #getCause()} method).  (A {@code null} value is\n             * permitted, and indicates that the cause is nonexistent or\n             * unknown.)\n             * @since  1.8\n             */\n            function InternalError(message, cause) {\n                if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof Error) || cause === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message, cause);\n                }\n                else if (((typeof message === 'string') || message === null) && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                }\n                else if (((message != null && message instanceof Error) || message === null) && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var cause_4 = __args[0];\n                    _super.call(this, cause_4);\n                }\n                else if (message === undefined && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            InternalError.serialVersionUID = -9062593416125562365;\n            return InternalError;\n        }(java.lang.VirtualMachineError));\n        lang.InternalError = InternalError;\n        InternalError[\"__class\"] = \"java.lang.InternalError\";\n        InternalError[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * Provides Charset implementations.\n         */\n        var EmulatedCharset = (function (_super) {\n            __extends(EmulatedCharset, _super);\n            function EmulatedCharset(name) {\n                _super.call(this, name, null);\n            }\n            EmulatedCharset.UTF_8_$LI$ = function () { if (EmulatedCharset.UTF_8 == null)\n                EmulatedCharset.UTF_8 = new EmulatedCharset.UtfCharset(\"UTF-8\"); return EmulatedCharset.UTF_8; };\n            ;\n            EmulatedCharset.ISO_LATIN_1_$LI$ = function () { if (EmulatedCharset.ISO_LATIN_1 == null)\n                EmulatedCharset.ISO_LATIN_1 = new EmulatedCharset.LatinCharset(\"ISO-LATIN-1\"); return EmulatedCharset.ISO_LATIN_1; };\n            ;\n            EmulatedCharset.ISO_8859_1_$LI$ = function () { if (EmulatedCharset.ISO_8859_1 == null)\n                EmulatedCharset.ISO_8859_1 = new EmulatedCharset.LatinCharset(\"ISO-8859-1\"); return EmulatedCharset.ISO_8859_1; };\n            ;\n            return EmulatedCharset;\n        }(java.nio.charset.Charset));\n        internal.EmulatedCharset = EmulatedCharset;\n        EmulatedCharset[\"__class\"] = \"javaemul.internal.EmulatedCharset\";\n        EmulatedCharset[\"__interfaces\"] = [\"java.lang.Comparable\"];\n        var EmulatedCharset;\n        (function (EmulatedCharset) {\n            var LatinCharset = (function (_super) {\n                __extends(LatinCharset, _super);\n                function LatinCharset(name) {\n                    _super.call(this, name);\n                }\n                LatinCharset.prototype.getBytes = function (str) {\n                    var n = str.length;\n                    var bytes = new Array(n);\n                    for (var i = 0; i < n; ++i) {\n                        bytes[i] = (((str.charAt(i)).charCodeAt(0) & 255) | 0);\n                    }\n                    return bytes;\n                };\n                LatinCharset.prototype.decodeString = function (bytes, ofs, len) {\n                    var chars = new Array(len);\n                    for (var i = 0; i < len; ++i) {\n                        chars[i] = String.fromCharCode((bytes[ofs + i] & 255));\n                    }\n                    return chars;\n                };\n                return LatinCharset;\n            }(javaemul.internal.EmulatedCharset));\n            EmulatedCharset.LatinCharset = LatinCharset;\n            LatinCharset[\"__class\"] = \"javaemul.internal.EmulatedCharset.LatinCharset\";\n            LatinCharset[\"__interfaces\"] = [\"java.lang.Comparable\"];\n            var UtfCharset = (function (_super) {\n                __extends(UtfCharset, _super);\n                function UtfCharset(name) {\n                    _super.call(this, name);\n                }\n                UtfCharset.prototype.decodeString = function (bytes, ofs, len) {\n                    var charCount = 0;\n                    for (var i = 0; i < len;) {\n                        ++charCount;\n                        var ch = bytes[ofs + i];\n                        if ((ch & 192) === 128) {\n                            throw new java.lang.IllegalArgumentException(\"Invalid UTF8 sequence\");\n                        }\n                        else if ((ch & 128) === 0) {\n                            ++i;\n                        }\n                        else if ((ch & 224) === 192) {\n                            i += 2;\n                        }\n                        else if ((ch & 240) === 224) {\n                            i += 3;\n                        }\n                        else if ((ch & 248) === 240) {\n                            i += 4;\n                        }\n                        else {\n                            throw new java.lang.IllegalArgumentException(\"Invalid UTF8 sequence\");\n                        }\n                        if (i > len) {\n                            throw new java.lang.IndexOutOfBoundsException(\"Invalid UTF8 sequence\");\n                        }\n                    }\n                    var chars = new Array(charCount);\n                    var outIdx = 0;\n                    var count = 0;\n                    for (var i = 0; i < len;) {\n                        var ch = bytes[ofs + i++];\n                        if ((ch & 128) === 0) {\n                            count = 1;\n                            ch &= 127;\n                        }\n                        else if ((ch & 224) === 192) {\n                            count = 2;\n                            ch &= 31;\n                        }\n                        else if ((ch & 240) === 224) {\n                            count = 3;\n                            ch &= 15;\n                        }\n                        else if ((ch & 248) === 240) {\n                            count = 4;\n                            ch &= 7;\n                        }\n                        else if ((ch & 252) === 248) {\n                            count = 5;\n                            ch &= 3;\n                        }\n                        while ((--count > 0)) {\n                            var b = bytes[ofs + i++];\n                            if ((b & 192) !== 128) {\n                                throw new java.lang.IllegalArgumentException(\"Invalid UTF8 sequence at \" + (ofs + i - 1) + \", byte=\" + javaemul.internal.IntegerHelper.toHexString(b));\n                            }\n                            ch = (ch << 6) | (b & 63);\n                        }\n                        ;\n                        outIdx += javaemul.internal.CharacterHelper.toChars(ch, chars, outIdx);\n                    }\n                    return chars;\n                };\n                UtfCharset.prototype.getBytes = function (str) {\n                    var n = str.length;\n                    var byteCount = 0;\n                    for (var i = 0; i < n;) {\n                        var ch = str.charCodeAt(i);\n                        i += javaemul.internal.CharacterHelper.charCount(ch);\n                        if (ch < (1 << 7)) {\n                            byteCount++;\n                        }\n                        else if (ch < (1 << 11)) {\n                            byteCount += 2;\n                        }\n                        else if (ch < (1 << 16)) {\n                            byteCount += 3;\n                        }\n                        else if (ch < (1 << 21)) {\n                            byteCount += 4;\n                        }\n                        else if (ch < (1 << 26)) {\n                            byteCount += 5;\n                        }\n                    }\n                    var bytes = new Array(byteCount);\n                    var out = 0;\n                    for (var i = 0; i < n;) {\n                        var ch = str.charCodeAt(i);\n                        i += javaemul.internal.CharacterHelper.charCount(ch);\n                        out += this.encodeUtf8(bytes, out, ch);\n                    }\n                    return bytes;\n                };\n                /**\n                 * Encode a single character in UTF8.\n                 *\n                 * @param bytes byte array to store character in\n                 * @param ofs offset into byte array to store first byte\n                 * @param codePoint character to encode\n                 * @return number of bytes consumed by encoding the character\n                 * @throws IllegalArgumentException if codepoint >= 2^26\n                 */\n                UtfCharset.prototype.encodeUtf8 = function (bytes, ofs, codePoint) {\n                    if (codePoint < (1 << 7)) {\n                        bytes[ofs] = ((codePoint & 127) | 0);\n                        return 1;\n                    }\n                    else if (codePoint < (1 << 11)) {\n                        bytes[ofs++] = ((((codePoint >> 6) & 31) | 192) | 0);\n                        bytes[ofs] = (((codePoint & 63) | 128) | 0);\n                        return 2;\n                    }\n                    else if (codePoint < (1 << 16)) {\n                        bytes[ofs++] = ((((codePoint >> 12) & 15) | 224) | 0);\n                        bytes[ofs++] = ((((codePoint >> 6) & 63) | 128) | 0);\n                        bytes[ofs] = (((codePoint & 63) | 128) | 0);\n                        return 3;\n                    }\n                    else if (codePoint < (1 << 21)) {\n                        bytes[ofs++] = ((((codePoint >> 18) & 7) | 240) | 0);\n                        bytes[ofs++] = ((((codePoint >> 12) & 63) | 128) | 0);\n                        bytes[ofs++] = ((((codePoint >> 6) & 63) | 128) | 0);\n                        bytes[ofs] = (((codePoint & 63) | 128) | 0);\n                        return 4;\n                    }\n                    else if (codePoint < (1 << 26)) {\n                        bytes[ofs++] = ((((codePoint >> 24) & 3) | 248) | 0);\n                        bytes[ofs++] = ((((codePoint >> 18) & 63) | 128) | 0);\n                        bytes[ofs++] = ((((codePoint >> 12) & 63) | 128) | 0);\n                        bytes[ofs++] = ((((codePoint >> 6) & 63) | 128) | 0);\n                        bytes[ofs] = (((codePoint & 63) | 128) | 0);\n                        return 5;\n                    }\n                    throw new java.lang.IllegalArgumentException(\"Character out of range: \" + codePoint);\n                };\n                return UtfCharset;\n            }(javaemul.internal.EmulatedCharset));\n            EmulatedCharset.UtfCharset = UtfCharset;\n            UtfCharset[\"__class\"] = \"javaemul.internal.EmulatedCharset.UtfCharset\";\n            UtfCharset[\"__interfaces\"] = [\"java.lang.Comparable\"];\n        })(EmulatedCharset = internal.EmulatedCharset || (internal.EmulatedCharset = {}));\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var security;\n    (function (security) {\n        /**\n         * Message Digest algorithm - <a href=\n         * \"http://java.sun.com/j2se/1.4.2/docs/api/java/security/MessageDigest.html\"\n         * >[Sun's docs]</a>.\n         */\n        var MessageDigest = (function (_super) {\n            __extends(MessageDigest, _super);\n            function MessageDigest(algorithm) {\n                _super.call(this);\n                this.algorithm = algorithm;\n            }\n            MessageDigest.getInstance = function (algorithm) {\n                if ((\"MD5\" === algorithm)) {\n                    return new MessageDigest.Md5Digest();\n                }\n                throw new java.security.NoSuchAlgorithmException(algorithm + \" not supported\");\n            };\n            MessageDigest.isEqual = function (digestA, digestB) {\n                var n = digestA.length;\n                if (n !== digestB.length) {\n                    return false;\n                }\n                for (var i = 0; i < n; ++i) {\n                    if (digestA[i] !== digestB[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            MessageDigest.prototype.digest$ = function () {\n                return this.engineDigest();\n            };\n            MessageDigest.prototype.digest$byte_A = function (input) {\n                this.update(input);\n                return this.digest();\n            };\n            MessageDigest.prototype.digest = function (buf, offset, len) {\n                var _this = this;\n                if (((buf != null && buf instanceof Array) || buf === null) && ((typeof offset === 'number') || offset === null) && ((typeof len === 'number') || len === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return _this.engineDigest(buf, offset, len);\n                    })();\n                }\n                else if (((buf != null && buf instanceof Array) || buf === null) && offset === undefined && len === undefined) {\n                    return this.digest$byte_A(buf);\n                }\n                else if (buf === undefined && offset === undefined && len === undefined) {\n                    return this.digest$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            MessageDigest.prototype.getAlgorithm = function () {\n                return this.algorithm;\n            };\n            MessageDigest.prototype.getDigestLength = function () {\n                return this.engineGetDigestLength();\n            };\n            MessageDigest.prototype.reset = function () {\n                this.engineReset();\n            };\n            MessageDigest.prototype.update$byte = function (input) {\n                this.engineUpdate(input);\n            };\n            MessageDigest.prototype.update$byte_A = function (input) {\n                this.engineUpdate(input, 0, input.length);\n            };\n            MessageDigest.prototype.update = function (input, offset, len) {\n                var _this = this;\n                if (((input != null && input instanceof Array) || input === null) && ((typeof offset === 'number') || offset === null) && ((typeof len === 'number') || len === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        _this.engineUpdate(input, offset, len);\n                    })();\n                }\n                else if (((input != null && input instanceof Array) || input === null) && offset === undefined && len === undefined) {\n                    return this.update$byte_A(input);\n                }\n                else if (((typeof input === 'number') || input === null) && offset === undefined && len === undefined) {\n                    return this.update$byte(input);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            return MessageDigest;\n        }(java.security.MessageDigestSpi));\n        security.MessageDigest = MessageDigest;\n        MessageDigest[\"__class\"] = \"java.security.MessageDigest\";\n        var MessageDigest;\n        (function (MessageDigest) {\n            var Md5Digest = (function (_super) {\n                __extends(Md5Digest, _super);\n                function Md5Digest() {\n                    _super.call(this, \"MD5\");\n                    this.oneByte = new Array(1);\n                    this.counter = 0;\n                    this.remainder = 0;\n                    this.engineReset();\n                }\n                Md5Digest.padding_$LI$ = function () { if (Md5Digest.padding == null)\n                    Md5Digest.padding = [(128 | 0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; return Md5Digest.padding; };\n                ;\n                /**\n                 * Converts a long to a 8-byte array using low order first.\n                 *\n                 * @param n A long.\n                 * @return A byte[].\n                 */\n                Md5Digest.toBytes = function (n) {\n                    var b = new Array(8);\n                    b[0] = ((n) | 0);\n                    n >>>= 8;\n                    b[1] = ((n) | 0);\n                    n >>>= 8;\n                    b[2] = ((n) | 0);\n                    n >>>= 8;\n                    b[3] = ((n) | 0);\n                    n >>>= 8;\n                    b[4] = ((n) | 0);\n                    n >>>= 8;\n                    b[5] = ((n) | 0);\n                    n >>>= 8;\n                    b[6] = ((n) | 0);\n                    n >>>= 8;\n                    b[7] = ((n) | 0);\n                    return b;\n                };\n                /**\n                 * Converts a 64-byte array into a 16-int array.\n                 *\n                 * @param in A byte[].\n                 * @param out An int[].\n                 */\n                Md5Digest.byte2int = function (__in, out) {\n                    for (var inpos = 0, outpos = 0; outpos < 16; outpos++) {\n                        out[outpos] = ((__in[inpos++] & 255) | ((__in[inpos++] & 255) << 8) | ((__in[inpos++] & 255) << 16) | ((__in[inpos++] & 255) << 24));\n                    }\n                };\n                Md5Digest.f = function (x, y, z) {\n                    return (z ^ (x & (y ^ z)));\n                };\n                Md5Digest.ff = function (a, b, c, d, x, s, ac) {\n                    a += x + ac + Md5Digest.f(b, c, d);\n                    a = (a << s | a >>> -s);\n                    return a + b;\n                };\n                Md5Digest.g = function (x, y, z) {\n                    return (y ^ (z & (x ^ y)));\n                };\n                Md5Digest.gg = function (a, b, c, d, x, s, ac) {\n                    a += x + ac + Md5Digest.g(b, c, d);\n                    a = (a << s | a >>> -s);\n                    return a + b;\n                };\n                Md5Digest.h = function (x, y, z) {\n                    return (x ^ y ^ z);\n                };\n                Md5Digest.hh = function (a, b, c, d, x, s, ac) {\n                    a += x + ac + Md5Digest.h(b, c, d);\n                    a = (a << s | a >>> -s);\n                    return a + b;\n                };\n                Md5Digest.i = function (x, y, z) {\n                    return (y ^ (x | ~z));\n                };\n                Md5Digest.ii = function (a, b, c, d, x, s, ac) {\n                    a += x + ac + Md5Digest.i(b, c, d);\n                    a = (a << s | a >>> -s);\n                    return a + b;\n                };\n                /**\n                 * Converts a 4-int array into a 16-byte array.\n                 *\n                 * @param in An int[].\n                 * @param out A byte[].\n                 */\n                Md5Digest.int2byte = function (__in, out) {\n                    for (var inpos = 0, outpos = 0; inpos < 4; inpos++) {\n                        out[outpos++] = ((__in[inpos] & 255) | 0);\n                        out[outpos++] = (((__in[inpos] >>> 8) & 255) | 0);\n                        out[outpos++] = (((__in[inpos] >>> 16) & 255) | 0);\n                        out[outpos++] = (((__in[inpos] >>> 24) & 255) | 0);\n                    }\n                };\n                Md5Digest.prototype.engineDigest$ = function () {\n                    var bits = Md5Digest.toBytes(this.counter << 3);\n                    var digest = new Array(16);\n                    if (this.remainder > 8) {\n                        this.engineUpdate(Md5Digest.padding_$LI$(), 0, this.remainder - 8);\n                    }\n                    else {\n                        this.engineUpdate(Md5Digest.padding_$LI$(), 0, 64 + (this.remainder - 8));\n                    }\n                    this.engineUpdate(bits, 0, 8);\n                    Md5Digest.int2byte(this.state, digest);\n                    this.reset();\n                    return digest;\n                };\n                Md5Digest.prototype.engineGetDigestLength = function () {\n                    return 16;\n                };\n                Md5Digest.prototype.engineReset = function () {\n                    this.buffer = new Array(64);\n                    this.state = new Array(4);\n                    this.x = new Array(16);\n                    this.state[0] = 1732584193;\n                    this.state[1] = -271733879;\n                    this.state[2] = -1732584194;\n                    this.state[3] = 271733878;\n                    this.counter = 0;\n                    this.remainder = 64;\n                };\n                Md5Digest.prototype.engineUpdate$byte = function (input) {\n                    this.oneByte[0] = input;\n                    this.engineUpdate(this.oneByte, 0, 1);\n                };\n                Md5Digest.prototype.engineUpdate = function (input, offset, len) {\n                    var _this = this;\n                    if (((input != null && input instanceof Array) || input === null) && ((typeof offset === 'number') || offset === null) && ((typeof len === 'number') || len === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            while ((true)) {\n                                if (len >= _this.remainder) {\n                                    java.lang.System.arraycopy(input, offset, _this.buffer, ((_this.counter & 63) | 0), _this.remainder);\n                                    _this.transform(_this.buffer);\n                                    _this.counter += _this.remainder;\n                                    offset += _this.remainder;\n                                    len -= _this.remainder;\n                                    _this.remainder = 64;\n                                }\n                                else {\n                                    java.lang.System.arraycopy(input, offset, _this.buffer, ((_this.counter & 63) | 0), len);\n                                    _this.counter += len;\n                                    _this.remainder -= len;\n                                    break;\n                                }\n                            }\n                            ;\n                        })();\n                    }\n                    else if (((typeof input === 'number') || input === null) && offset === undefined && len === undefined) {\n                        return this.engineUpdate$byte(input);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                Md5Digest.prototype.transform = function (buffer) {\n                    var a;\n                    var b;\n                    var c;\n                    var d;\n                    Md5Digest.byte2int(buffer, this.x);\n                    a = this.state[0];\n                    b = this.state[1];\n                    c = this.state[2];\n                    d = this.state[3];\n                    a = Md5Digest.ff(a, b, c, d, this.x[0], 7, -680876936);\n                    d = Md5Digest.ff(d, a, b, c, this.x[1], 12, -389564586);\n                    c = Md5Digest.ff(c, d, a, b, this.x[2], 17, 606105819);\n                    b = Md5Digest.ff(b, c, d, a, this.x[3], 22, -1044525330);\n                    a = Md5Digest.ff(a, b, c, d, this.x[4], 7, -176418897);\n                    d = Md5Digest.ff(d, a, b, c, this.x[5], 12, 1200080426);\n                    c = Md5Digest.ff(c, d, a, b, this.x[6], 17, -1473231341);\n                    b = Md5Digest.ff(b, c, d, a, this.x[7], 22, -45705983);\n                    a = Md5Digest.ff(a, b, c, d, this.x[8], 7, 1770035416);\n                    d = Md5Digest.ff(d, a, b, c, this.x[9], 12, -1958414417);\n                    c = Md5Digest.ff(c, d, a, b, this.x[10], 17, -42063);\n                    b = Md5Digest.ff(b, c, d, a, this.x[11], 22, -1990404162);\n                    a = Md5Digest.ff(a, b, c, d, this.x[12], 7, 1804603682);\n                    d = Md5Digest.ff(d, a, b, c, this.x[13], 12, -40341101);\n                    c = Md5Digest.ff(c, d, a, b, this.x[14], 17, -1502002290);\n                    b = Md5Digest.ff(b, c, d, a, this.x[15], 22, 1236535329);\n                    a = Md5Digest.gg(a, b, c, d, this.x[1], 5, -165796510);\n                    d = Md5Digest.gg(d, a, b, c, this.x[6], 9, -1069501632);\n                    c = Md5Digest.gg(c, d, a, b, this.x[11], 14, 643717713);\n                    b = Md5Digest.gg(b, c, d, a, this.x[0], 20, -373897302);\n                    a = Md5Digest.gg(a, b, c, d, this.x[5], 5, -701558691);\n                    d = Md5Digest.gg(d, a, b, c, this.x[10], 9, 38016083);\n                    c = Md5Digest.gg(c, d, a, b, this.x[15], 14, -660478335);\n                    b = Md5Digest.gg(b, c, d, a, this.x[4], 20, -405537848);\n                    a = Md5Digest.gg(a, b, c, d, this.x[9], 5, 568446438);\n                    d = Md5Digest.gg(d, a, b, c, this.x[14], 9, -1019803690);\n                    c = Md5Digest.gg(c, d, a, b, this.x[3], 14, -187363961);\n                    b = Md5Digest.gg(b, c, d, a, this.x[8], 20, 1163531501);\n                    a = Md5Digest.gg(a, b, c, d, this.x[13], 5, -1444681467);\n                    d = Md5Digest.gg(d, a, b, c, this.x[2], 9, -51403784);\n                    c = Md5Digest.gg(c, d, a, b, this.x[7], 14, 1735328473);\n                    b = Md5Digest.gg(b, c, d, a, this.x[12], 20, -1926607734);\n                    a = Md5Digest.hh(a, b, c, d, this.x[5], 4, -378558);\n                    d = Md5Digest.hh(d, a, b, c, this.x[8], 11, -2022574463);\n                    c = Md5Digest.hh(c, d, a, b, this.x[11], 16, 1839030562);\n                    b = Md5Digest.hh(b, c, d, a, this.x[14], 23, -35309556);\n                    a = Md5Digest.hh(a, b, c, d, this.x[1], 4, -1530992060);\n                    d = Md5Digest.hh(d, a, b, c, this.x[4], 11, 1272893353);\n                    c = Md5Digest.hh(c, d, a, b, this.x[7], 16, -155497632);\n                    b = Md5Digest.hh(b, c, d, a, this.x[10], 23, -1094730640);\n                    a = Md5Digest.hh(a, b, c, d, this.x[13], 4, 681279174);\n                    d = Md5Digest.hh(d, a, b, c, this.x[0], 11, -358537222);\n                    c = Md5Digest.hh(c, d, a, b, this.x[3], 16, -722521979);\n                    b = Md5Digest.hh(b, c, d, a, this.x[6], 23, 76029189);\n                    a = Md5Digest.hh(a, b, c, d, this.x[9], 4, -640364487);\n                    d = Md5Digest.hh(d, a, b, c, this.x[12], 11, -421815835);\n                    c = Md5Digest.hh(c, d, a, b, this.x[15], 16, 530742520);\n                    b = Md5Digest.hh(b, c, d, a, this.x[2], 23, -995338651);\n                    a = Md5Digest.ii(a, b, c, d, this.x[0], 6, -198630844);\n                    d = Md5Digest.ii(d, a, b, c, this.x[7], 10, 1126891415);\n                    c = Md5Digest.ii(c, d, a, b, this.x[14], 15, -1416354905);\n                    b = Md5Digest.ii(b, c, d, a, this.x[5], 21, -57434055);\n                    a = Md5Digest.ii(a, b, c, d, this.x[12], 6, 1700485571);\n                    d = Md5Digest.ii(d, a, b, c, this.x[3], 10, -1894986606);\n                    c = Md5Digest.ii(c, d, a, b, this.x[10], 15, -1051523);\n                    b = Md5Digest.ii(b, c, d, a, this.x[1], 21, -2054922799);\n                    a = Md5Digest.ii(a, b, c, d, this.x[8], 6, 1873313359);\n                    d = Md5Digest.ii(d, a, b, c, this.x[15], 10, -30611744);\n                    c = Md5Digest.ii(c, d, a, b, this.x[6], 15, -1560198380);\n                    b = Md5Digest.ii(b, c, d, a, this.x[13], 21, 1309151649);\n                    a = Md5Digest.ii(a, b, c, d, this.x[4], 6, -145523070);\n                    d = Md5Digest.ii(d, a, b, c, this.x[11], 10, -1120210379);\n                    c = Md5Digest.ii(c, d, a, b, this.x[2], 15, 718787259);\n                    b = Md5Digest.ii(b, c, d, a, this.x[9], 21, -343485551);\n                    this.state[0] = javaemul.internal.Coercions.ensureInt(this.state[0] + a);\n                    this.state[1] = javaemul.internal.Coercions.ensureInt(this.state[1] + b);\n                    this.state[2] = javaemul.internal.Coercions.ensureInt(this.state[2] + c);\n                    this.state[3] = javaemul.internal.Coercions.ensureInt(this.state[3] + d);\n                };\n                return Md5Digest;\n            }(java.security.MessageDigest));\n            MessageDigest.Md5Digest = Md5Digest;\n            Md5Digest[\"__class\"] = \"java.security.MessageDigest.Md5Digest\";\n        })(MessageDigest = security.MessageDigest || (security.MessageDigest = {}));\n    })(security = java.security || (java.security = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Skeletal implementation of the List interface. <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/AbstractList.html\">[Sun\n         * docs]</a>\n         *\n         * @param <E> the element type.\n         */\n        var AbstractList = (function (_super) {\n            __extends(AbstractList, _super);\n            function AbstractList() {\n                _super.call(this);\n                this.modCount = 0;\n            }\n            AbstractList.prototype.forEach = function (action) {\n                javaemul.internal.InternalPreconditions.checkNotNull(action);\n                for (var index129 = this.iterator(); index129.hasNext();) {\n                    var t = index129.next();\n                    {\n                        action(t);\n                    }\n                }\n            };\n            AbstractList.prototype.add$java_lang_Object = function (obj) {\n                this.add(this.size(), obj);\n                return true;\n            };\n            AbstractList.prototype.add = function (index, element) {\n                if (((typeof index === 'number') || index === null) && ((element != null) || element === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        throw new java.lang.UnsupportedOperationException(\"Add not supported on this list\");\n                    })();\n                }\n                else if (((index != null) || index === null) && element === undefined) {\n                    return this.add$java_lang_Object(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractList.prototype.addAll = function (index, c) {\n                var _this = this;\n                if (((typeof index === 'number') || index === null) && ((c != null && (c[\"__interfaces\"] != null && c[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || c.constructor != null && c.constructor[\"__interfaces\"] != null && c.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || c === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        javaemul.internal.InternalPreconditions.checkNotNull(c);\n                        var changed = false;\n                        for (var index130 = c.iterator(); index130.hasNext();) {\n                            var e = index130.next();\n                            {\n                                _this.add(index++, e);\n                                changed = true;\n                            }\n                        }\n                        return changed;\n                    })();\n                }\n                else if (((index != null && (index[\"__interfaces\"] != null && index[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || index.constructor != null && index.constructor[\"__interfaces\"] != null && index.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || index === null) && c === undefined) {\n                    return this.addAll$java_util_Collection(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractList.prototype.clear = function () {\n                this.removeRange(0, this.size());\n            };\n            AbstractList.prototype.equals = function (o) {\n                if (o === this) {\n                    return true;\n                }\n                if (!(o != null && (o[\"__interfaces\"] != null && o[\"__interfaces\"].indexOf(\"java.util.List\") >= 0 || o.constructor != null && o.constructor[\"__interfaces\"] != null && o.constructor[\"__interfaces\"].indexOf(\"java.util.List\") >= 0))) {\n                    return false;\n                }\n                var other = o;\n                if (this.size() !== other.size()) {\n                    return false;\n                }\n                var iterOther = other.iterator();\n                for (var index131 = this.iterator(); index131.hasNext();) {\n                    var elem = index131.next();\n                    {\n                        var elemOther = iterOther.next();\n                        if (!java.util.Objects.equals(elem, elemOther)) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            };\n            AbstractList.prototype.hashCode = function () {\n                return java.util.Collections.hashCode(this);\n            };\n            AbstractList.prototype.indexOf = function (o, index) {\n                if (((o != null) || o === null) && index === undefined) {\n                    return this.indexOf$java_lang_Object(o);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractList.prototype.indexOf$java_lang_Object = function (toFind) {\n                for (var i = 0, n = this.size(); i < n; ++i) {\n                    if (java.util.Objects.equals(toFind, this.get(i))) {\n                        return i;\n                    }\n                }\n                return -1;\n            };\n            AbstractList.prototype.iterator = function () {\n                return new AbstractList.IteratorImpl(this);\n            };\n            AbstractList.prototype.lastIndexOf = function (o, index) {\n                if (((o != null) || o === null) && index === undefined) {\n                    return this.lastIndexOf$java_lang_Object(o);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractList.prototype.lastIndexOf$java_lang_Object = function (toFind) {\n                for (var i = this.size() - 1; i > -1; --i) {\n                    if (java.util.Objects.equals(toFind, this.get(i))) {\n                        return i;\n                    }\n                }\n                return -1;\n            };\n            AbstractList.prototype.listIterator$ = function () {\n                return this.listIterator(0);\n            };\n            AbstractList.prototype.listIterator = function (from) {\n                var _this = this;\n                if (((typeof from === 'number') || from === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return new AbstractList.ListIteratorImpl(_this, from);\n                    })();\n                }\n                else if (from === undefined) {\n                    return this.listIterator$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractList.prototype.remove = function (index) {\n                if (((typeof index === 'number') || index === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        throw new java.lang.UnsupportedOperationException(\"Remove not supported on this list\");\n                    })();\n                }\n                else if (((index != null) || index === null)) {\n                    return this.remove$java_lang_Object(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractList.prototype.set = function (index, o) {\n                throw new java.lang.UnsupportedOperationException(\"Set not supported on this list\");\n            };\n            AbstractList.prototype.subList = function (fromIndex, toIndex) {\n                return (new AbstractList.SubList(this, fromIndex, toIndex));\n            };\n            AbstractList.prototype.removeRange = function (fromIndex, endIndex) {\n                var iter = this.listIterator(fromIndex);\n                for (var i = fromIndex; i < endIndex; ++i) {\n                    iter.next();\n                    iter.remove();\n                }\n            };\n            return AbstractList;\n        }(java.util.AbstractCollection));\n        util.AbstractList = AbstractList;\n        AbstractList[\"__class\"] = \"java.util.AbstractList\";\n        AbstractList[\"__interfaces\"] = [\"java.util.List\", \"java.util.Collection\", \"java.lang.Iterable\"];\n        var AbstractList;\n        (function (AbstractList) {\n            var IteratorImpl = (function () {\n                function IteratorImpl(__parent) {\n                    this.__parent = __parent;\n                    this.i = 0;\n                    this.last = 0;\n                    this.i = 0;\n                    this.last = -1;\n                }\n                IteratorImpl.prototype.forEachRemaining = function (consumer) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(consumer);\n                    while ((this.hasNext())) {\n                        consumer(this.next());\n                    }\n                    ;\n                };\n                IteratorImpl.prototype.hasNext = function () {\n                    return this.i < this.__parent.size();\n                };\n                IteratorImpl.prototype.next = function () {\n                    javaemul.internal.InternalPreconditions.checkElement(this.hasNext());\n                    return this.__parent.get(this.last = this.i++);\n                };\n                IteratorImpl.prototype.remove = function () {\n                    javaemul.internal.InternalPreconditions.checkState(this.last !== -1);\n                    this.__parent.remove(this.last);\n                    this.i = this.last;\n                    this.last = -1;\n                };\n                return IteratorImpl;\n            }());\n            AbstractList.IteratorImpl = IteratorImpl;\n            IteratorImpl[\"__class\"] = \"java.util.AbstractList.IteratorImpl\";\n            IteratorImpl[\"__interfaces\"] = [\"java.util.Iterator\"];\n            /**\n             * Implementation of <code>ListIterator</code> for abstract lists.\n             */\n            var ListIteratorImpl = (function (_super) {\n                __extends(ListIteratorImpl, _super);\n                function ListIteratorImpl(__parent, start) {\n                    var _this = this;\n                    if (((typeof start === 'number') || start === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        _super.call(this, __parent);\n                        this.__parent = __parent;\n                        (function () {\n                            javaemul.internal.InternalPreconditions.checkPositionIndex(start, _this.__parent.size());\n                            _this.i = start;\n                        })();\n                    }\n                    else if (start === undefined) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        _super.call(this, __parent);\n                        this.__parent = __parent;\n                    }\n                    else\n                        throw new Error('invalid overload');\n                }\n                ListIteratorImpl.prototype.forEachRemaining = function (consumer) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(consumer);\n                    while ((this.hasNext())) {\n                        consumer(this.next());\n                    }\n                    ;\n                };\n                ListIteratorImpl.prototype.add = function (o) {\n                    this.__parent.add(this.i, o);\n                    this.i++;\n                    this.last = -1;\n                };\n                ListIteratorImpl.prototype.hasPrevious = function () {\n                    return this.i > 0;\n                };\n                ListIteratorImpl.prototype.nextIndex = function () {\n                    return this.i;\n                };\n                ListIteratorImpl.prototype.previous = function () {\n                    javaemul.internal.InternalPreconditions.checkElement(this.hasPrevious());\n                    return this.__parent.get(this.last = --this.i);\n                };\n                ListIteratorImpl.prototype.previousIndex = function () {\n                    return this.i - 1;\n                };\n                ListIteratorImpl.prototype.set = function (o) {\n                    javaemul.internal.InternalPreconditions.checkState(this.last !== -1);\n                    this.__parent.set(this.last, o);\n                };\n                return ListIteratorImpl;\n            }(AbstractList.IteratorImpl));\n            AbstractList.ListIteratorImpl = ListIteratorImpl;\n            ListIteratorImpl[\"__class\"] = \"java.util.AbstractList.ListIteratorImpl\";\n            ListIteratorImpl[\"__interfaces\"] = [\"java.util.Iterator\", \"java.util.ListIterator\"];\n            var SubList = (function (_super) {\n                __extends(SubList, _super);\n                function SubList(wrapped, fromIndex, toIndex) {\n                    _super.call(this);\n                    this.fromIndex = 0;\n                    this.__size = 0;\n                    javaemul.internal.InternalPreconditions.checkCriticalPositionIndexes(fromIndex, toIndex, wrapped.size());\n                    this.wrapped = wrapped;\n                    this.fromIndex = fromIndex;\n                    this.__size = toIndex - fromIndex;\n                }\n                SubList.prototype.add = function (index, element) {\n                    var _this = this;\n                    if (((typeof index === 'number') || index === null) && ((element != null) || element === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            javaemul.internal.InternalPreconditions.checkPositionIndex(index, _this.__size);\n                            _this.wrapped.add(_this.fromIndex + index, element);\n                            _this.__size++;\n                        })();\n                    }\n                    else if (((index != null) || index === null) && element === undefined) {\n                        return this.add$java_lang_Object(index);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                SubList.prototype.get = function (index) {\n                    javaemul.internal.InternalPreconditions.checkElementIndex(index, this.__size);\n                    return this.wrapped.get(this.fromIndex + index);\n                };\n                SubList.prototype.remove = function (index) {\n                    var _this = this;\n                    if (((typeof index === 'number') || index === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            javaemul.internal.InternalPreconditions.checkElementIndex(index, _this.__size);\n                            var result = _this.wrapped.remove(_this.fromIndex + index);\n                            _this.__size--;\n                            return result;\n                        })();\n                    }\n                    else if (((index != null) || index === null)) {\n                        return this.remove$java_lang_Object(index);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                SubList.prototype.set = function (index, element) {\n                    javaemul.internal.InternalPreconditions.checkElementIndex(index, this.__size);\n                    return this.wrapped.set(this.fromIndex + index, element);\n                };\n                SubList.prototype.size = function () {\n                    return this.__size;\n                };\n                return SubList;\n            }(java.util.AbstractList));\n            AbstractList.SubList = SubList;\n            SubList[\"__class\"] = \"java.util.AbstractList.SubList\";\n            SubList[\"__interfaces\"] = [\"java.util.List\", \"java.util.Collection\", \"java.lang.Iterable\"];\n        })(AbstractList = util.AbstractList || (util.AbstractList = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Skeletal implementation of the Queue interface. <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/AbstractQueue.html\">[Sun\n         * docs]</a>\n         *\n         * @param <E> element type.\n         */\n        var AbstractQueue = (function (_super) {\n            __extends(AbstractQueue, _super);\n            function AbstractQueue() {\n                _super.call(this);\n            }\n            AbstractQueue.prototype.forEach = function (action) {\n                javaemul.internal.InternalPreconditions.checkNotNull(action);\n                for (var index132 = this.iterator(); index132.hasNext();) {\n                    var t = index132.next();\n                    {\n                        action(t);\n                    }\n                }\n            };\n            AbstractQueue.prototype.add = function (index, element) {\n                if (((index != null) || index === null) && element === undefined) {\n                    return this.add$java_lang_Object(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractQueue.prototype.add$java_lang_Object = function (o) {\n                javaemul.internal.InternalPreconditions.checkState(this.offer(o), \"Unable to add element to queue\");\n                return true;\n            };\n            AbstractQueue.prototype.addAll = function (index, c) {\n                if (((index != null && (index[\"__interfaces\"] != null && index[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || index.constructor != null && index.constructor[\"__interfaces\"] != null && index.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || index === null) && c === undefined) {\n                    return this.addAll$java_util_Collection(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractQueue.prototype.addAll$java_util_Collection = function (c) {\n                javaemul.internal.InternalPreconditions.checkNotNull(c);\n                javaemul.internal.InternalPreconditions.checkArgument(c !== this, \"Can\\'t add a queue to itself\");\n                return _super.prototype.addAll.call(this, c);\n            };\n            AbstractQueue.prototype.clear = function () {\n                while ((this.poll() != null)) {\n                }\n                ;\n            };\n            AbstractQueue.prototype.element = function () {\n                var e = this.peek();\n                javaemul.internal.InternalPreconditions.checkElement(e != null, \"Queue is empty\");\n                return e;\n            };\n            AbstractQueue.prototype.remove = function (index) {\n                if (((index != null) || index === null)) {\n                    return this.remove$java_lang_Object(index);\n                }\n                else if (index === undefined) {\n                    return this.remove$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractQueue.prototype.remove$ = function () {\n                var e = this.poll();\n                javaemul.internal.InternalPreconditions.checkElement(e != null, \"Queue is empty\");\n                return e;\n            };\n            return AbstractQueue;\n        }(java.util.AbstractCollection));\n        util.AbstractQueue = AbstractQueue;\n        AbstractQueue[\"__class\"] = \"java.util.AbstractQueue\";\n        AbstractQueue[\"__interfaces\"] = [\"java.util.Collection\", \"java.util.Queue\", \"java.lang.Iterable\"];\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Skeletal implementation of the Set interface. <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/AbstractSet.html\">[Sun\n         * docs]</a>\n         *\n         * @param <E> the element type.\n         */\n        var AbstractSet = (function (_super) {\n            __extends(AbstractSet, _super);\n            function AbstractSet() {\n                _super.call(this);\n            }\n            AbstractSet.prototype.forEach = function (action) {\n                javaemul.internal.InternalPreconditions.checkNotNull(action);\n                for (var index133 = this.iterator(); index133.hasNext();) {\n                    var t = index133.next();\n                    {\n                        action(t);\n                    }\n                }\n            };\n            AbstractSet.prototype.equals = function (o) {\n                if (o === this) {\n                    return true;\n                }\n                if (!(o != null && (o[\"__interfaces\"] != null && o[\"__interfaces\"].indexOf(\"java.util.Set\") >= 0 || o.constructor != null && o.constructor[\"__interfaces\"] != null && o.constructor[\"__interfaces\"].indexOf(\"java.util.Set\") >= 0))) {\n                    return false;\n                }\n                var other = o;\n                if (other.size() !== this.size()) {\n                    return false;\n                }\n                return this.containsAll(other);\n            };\n            AbstractSet.prototype.hashCode = function () {\n                return java.util.Collections.hashCode(this);\n            };\n            AbstractSet.prototype.removeAll = function (c) {\n                javaemul.internal.InternalPreconditions.checkNotNull(c);\n                var size = this.size();\n                if (size < c.size()) {\n                    for (var iter = this.iterator(); iter.hasNext();) {\n                        var o = iter.next();\n                        if (c.contains(o)) {\n                            iter.remove();\n                        }\n                    }\n                }\n                else {\n                    for (var index134 = c.iterator(); index134.hasNext();) {\n                        var o1 = index134.next();\n                        {\n                            this.remove(o1);\n                        }\n                    }\n                }\n                return (size !== this.size());\n            };\n            return AbstractSet;\n        }(java.util.AbstractCollection));\n        util.AbstractSet = AbstractSet;\n        AbstractSet[\"__class\"] = \"java.util.AbstractSet\";\n        AbstractSet[\"__interfaces\"] = [\"java.util.Collection\", \"java.util.Set\", \"java.lang.Iterable\"];\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * A simple wrapper around JavaScript Map for key type is string.\n         */\n        var InternalStringMap = (function () {\n            function InternalStringMap(host) {\n                this.backingMap = java.util.InternalJsMapFactory.newJsMap();\n                this.size = 0;\n                this.valueMod = 0;\n                this.host = host;\n            }\n            InternalStringMap.prototype.forEach = function (action) {\n                javaemul.internal.InternalPreconditions.checkNotNull(action);\n                for (var index135 = this.iterator(); index135.hasNext();) {\n                    var t = index135.next();\n                    {\n                        action(t);\n                    }\n                }\n            };\n            InternalStringMap.prototype.contains = function (key) {\n                return !javaemul.internal.JsUtils.isUndefined(this.backingMap.get(key));\n            };\n            InternalStringMap.prototype.get = function (key) {\n                return this.backingMap.get(key);\n            };\n            InternalStringMap.prototype.put = function (key, value) {\n                var oldValue = this.backingMap.get(key);\n                this.backingMap.set(key, InternalStringMap.toNullIfUndefined(value));\n                if (javaemul.internal.JsUtils.isUndefined(oldValue)) {\n                    this.size++;\n                    java.util.ConcurrentModificationDetector.structureChanged(this.host);\n                }\n                else {\n                    this.valueMod++;\n                }\n                return oldValue;\n            };\n            InternalStringMap.prototype.remove = function (key) {\n                var value = this.backingMap.get(key);\n                if (!javaemul.internal.JsUtils.isUndefined(value)) {\n                    this.backingMap.delete(key);\n                    this.size--;\n                    java.util.ConcurrentModificationDetector.structureChanged(this.host);\n                }\n                else {\n                    this.valueMod++;\n                }\n                return value;\n            };\n            InternalStringMap.prototype.getSize = function () {\n                return this.size;\n            };\n            InternalStringMap.prototype.iterator = function () {\n                return new InternalStringMap.InternalStringMap$0(this);\n            };\n            InternalStringMap.prototype.newMapEntry = function (entry, lastValueMod) {\n                return new InternalStringMap.InternalStringMap$1(this, entry, lastValueMod);\n            };\n            InternalStringMap.toNullIfUndefined = function (value) {\n                return javaemul.internal.JsUtils.isUndefined(value) ? null : value;\n            };\n            return InternalStringMap;\n        }());\n        util.InternalStringMap = InternalStringMap;\n        InternalStringMap[\"__class\"] = \"java.util.InternalStringMap\";\n        InternalStringMap[\"__interfaces\"] = [\"java.lang.Iterable\"];\n        var InternalStringMap;\n        (function (InternalStringMap) {\n            var InternalStringMap$0 = (function () {\n                function InternalStringMap$0(__parent) {\n                    this.__parent = __parent;\n                    this.entries = this.__parent.backingMap.entries();\n                    this.current = this.entries.next();\n                }\n                InternalStringMap$0.prototype.forEachRemaining = function (consumer) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(consumer);\n                    while ((this.hasNext())) {\n                        consumer(this.next());\n                    }\n                    ;\n                };\n                InternalStringMap$0.prototype.hasNext = function () {\n                    return !this.current.done;\n                };\n                InternalStringMap$0.prototype.next = function () {\n                    this.last = this.current;\n                    this.current = this.entries.next();\n                    return this.__parent.newMapEntry(this.last, this.__parent.valueMod);\n                };\n                InternalStringMap$0.prototype.remove = function () {\n                    this.__parent.remove(this.last.value[0]);\n                };\n                return InternalStringMap$0;\n            }());\n            InternalStringMap.InternalStringMap$0 = InternalStringMap$0;\n            var InternalStringMap$1 = (function (_super) {\n                __extends(InternalStringMap$1, _super);\n                function InternalStringMap$1(__parent, entry, lastValueMod) {\n                    _super.call(this);\n                    this.entry = entry;\n                    this.lastValueMod = lastValueMod;\n                    this.__parent = __parent;\n                }\n                InternalStringMap$1.prototype.getKey = function () {\n                    return this.entry.value[0];\n                };\n                InternalStringMap$1.prototype.getValue = function () {\n                    if (this.__parent.valueMod !== this.lastValueMod) {\n                        return this.__parent.get(this.entry.value[0]);\n                    }\n                    return this.entry.value[1];\n                };\n                InternalStringMap$1.prototype.setValue = function (object) {\n                    return this.__parent.put(this.entry.value[0], object);\n                };\n                return InternalStringMap$1;\n            }(java.util.AbstractMapEntry));\n            InternalStringMap.InternalStringMap$1 = InternalStringMap$1;\n        })(InternalStringMap = util.InternalStringMap || (util.InternalStringMap = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * Intrinsic string class.\n         */\n        var StringHelper = (function () {\n            function StringHelper() {\n            }\n            StringHelper.CASE_INSENSITIVE_ORDER_$LI$ = function () { if (StringHelper.CASE_INSENSITIVE_ORDER == null)\n                StringHelper.CASE_INSENSITIVE_ORDER = new StringHelper.StringHelper$0(); return StringHelper.CASE_INSENSITIVE_ORDER; };\n            ;\n            StringHelper.copyValueOf$char_A = function (v) {\n                return StringHelper.valueOf(v);\n            };\n            StringHelper.copyValueOf = function (v, offset, count) {\n                if (((v != null && v instanceof Array) || v === null) && ((typeof offset === 'number') || offset === null) && ((typeof count === 'number') || count === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return StringHelper.valueOf(v, offset, count);\n                    })();\n                }\n                else if (((v != null && v instanceof Array) || v === null) && offset === undefined && count === undefined) {\n                    return javaemul.internal.StringHelper.copyValueOf$char_A(v);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            StringHelper.valueOf$boolean = function (x) {\n                return \"\" + x;\n            };\n            StringHelper.valueOf$char = function (x) {\n                return \"\" + x;\n            };\n            StringHelper.valueOf = function (x, offset, count) {\n                if (((x != null && x instanceof Array) || x === null) && ((typeof offset === 'number') || offset === null) && ((typeof count === 'number') || count === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var end = offset + count;\n                        javaemul.internal.InternalPreconditions.checkStringBounds(offset, end, x.length);\n                        var batchSize = javaemul.internal.ArrayHelper.ARRAY_PROCESS_BATCH_SIZE;\n                        var s = \"\";\n                        for (var batchStart = offset; batchStart < end;) {\n                            var batchEnd = Math.min(batchStart + batchSize, end);\n                            s += StringHelper.fromCharCode(javaemul.internal.ArrayHelper.unsafeClone(x, batchStart, batchEnd));\n                            batchStart = batchEnd;\n                        }\n                        return s;\n                    })();\n                }\n                else if (((x != null && x instanceof Array) || x === null) && offset === undefined && count === undefined) {\n                    return javaemul.internal.StringHelper.valueOf$char_A(x);\n                }\n                else if (((typeof x === 'boolean') || x === null) && offset === undefined && count === undefined) {\n                    return javaemul.internal.StringHelper.valueOf$boolean(x);\n                }\n                else if (((typeof x === 'string') || x === null) && offset === undefined && count === undefined) {\n                    return javaemul.internal.StringHelper.valueOf$char(x);\n                }\n                else if (((typeof x === 'number') || x === null) && offset === undefined && count === undefined) {\n                    return javaemul.internal.StringHelper.valueOf$int(x);\n                }\n                else if (((typeof x === 'number') || x === null) && offset === undefined && count === undefined) {\n                    return javaemul.internal.StringHelper.valueOf$long(x);\n                }\n                else if (((typeof x === 'number') || x === null) && offset === undefined && count === undefined) {\n                    return javaemul.internal.StringHelper.valueOf$float(x);\n                }\n                else if (((typeof x === 'number') || x === null) && offset === undefined && count === undefined) {\n                    return javaemul.internal.StringHelper.valueOf$double(x);\n                }\n                else if (((x != null) || x === null) && offset === undefined && count === undefined) {\n                    return javaemul.internal.StringHelper.valueOf$java_lang_Object(x);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            StringHelper.fromCharCode = function (array) {\n                return String.fromCharCode(array);\n            };\n            StringHelper.valueOf$char_A = function (x) {\n                return StringHelper.valueOf(x, 0, x.length);\n            };\n            StringHelper.valueOf$double = function (x) {\n                return \"\" + x;\n            };\n            StringHelper.valueOf$float = function (x) {\n                return \"\" + x;\n            };\n            StringHelper.valueOf$int = function (x) {\n                return \"\" + x;\n            };\n            StringHelper.valueOf$long = function (x) {\n                return \"\" + x;\n            };\n            StringHelper.valueOf$java_lang_Object = function (x) {\n                return x == null ? \"null\" : x.toString();\n            };\n            /**\n             * This method converts Java-escaped dollar signs \"\\$\" into\n             * JavaScript-escaped dollar signs \"$$\", and removes all other lone\n             * backslashes, which serve as escapes in Java but are passed through\n             * literally in JavaScript.\n             *\n             * @skip\n             */\n            StringHelper.translateReplaceString = function (replaceStr) {\n                var pos = 0;\n                while ((0 <= (pos = replaceStr.indexOf(\"\\\\\", pos)))) {\n                    if (replaceStr.charAt(pos + 1) === '$') {\n                        replaceStr = replaceStr.substring(0, pos) + \"$\" + replaceStr.substring(++pos);\n                    }\n                    else {\n                        replaceStr = replaceStr.substring(0, pos) + replaceStr.substring(++pos);\n                    }\n                }\n                ;\n                return replaceStr;\n            };\n            StringHelper.compareTo = function (thisStr, otherStr) {\n                if (thisStr == otherStr) {\n                    return 0;\n                }\n                return thisStr < otherStr ? -1 : 1;\n            };\n            StringHelper.getCharset = function (charsetName) {\n                try {\n                    return java.nio.charset.Charset.forName(charsetName);\n                }\n                catch (e) {\n                    throw new java.io.UnsupportedEncodingException(charsetName);\n                }\n                ;\n            };\n            StringHelper.fromCodePoint = function (codePoint) {\n                if (codePoint >= javaemul.internal.CharacterHelper.MIN_SUPPLEMENTARY_CODE_POINT) {\n                    var hiSurrogate = javaemul.internal.CharacterHelper.getHighSurrogate(codePoint);\n                    var loSurrogate = javaemul.internal.CharacterHelper.getLowSurrogate(codePoint);\n                    return new String(hiSurrogate).toString() + new String(loSurrogate).toString();\n                }\n                else {\n                    return new String(String.fromCharCode(codePoint)).toString();\n                }\n            };\n            StringHelper.format = function (formatString) {\n                var args = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    args[_i - 1] = arguments[_i];\n                }\n                return sprintf(formatString, args);\n            };\n            return StringHelper;\n        }());\n        internal.StringHelper = StringHelper;\n        StringHelper[\"__class\"] = \"javaemul.internal.StringHelper\";\n        var StringHelper;\n        (function (StringHelper) {\n            var StringHelper$0 = (function () {\n                function StringHelper$0() {\n                }\n                StringHelper$0.prototype.compare = function (a, b) {\n                    return a.toUpperCase().localeCompare(b.toUpperCase());\n                };\n                return StringHelper$0;\n            }());\n            StringHelper.StringHelper$0 = StringHelper$0;\n        })(StringHelper = internal.StringHelper || (internal.StringHelper = {}));\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var sql;\n    (function (sql) {\n        /**\n         * An implementation of java.sql.Date. Derived from\n         * http://java.sun.com/j2se/1.5.0/docs/api/java/sql/Date.html\n         */\n        var Date = (function (_super) {\n            __extends(Date, _super);\n            function Date(year, month, day) {\n                if (((typeof year === 'number') || year === null) && ((typeof month === 'number') || month === null) && ((typeof day === 'number') || day === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, year, month, day);\n                }\n                else if (((typeof year === 'number') || year === null) && month === undefined && day === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var date = __args[0];\n                    _super.call(this, date);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            Date.valueOf = function (s) {\n                var split = s.split(\"-\");\n                if (split.length !== 3) {\n                    throw new java.lang.IllegalArgumentException(\"Invalid escape format: \" + s);\n                }\n                try {\n                    var y = javaemul.internal.IntegerHelper.parseInt(split[0]) - 1900;\n                    var m = javaemul.internal.IntegerHelper.parseInt(split[1]) - 1;\n                    var d = javaemul.internal.IntegerHelper.parseInt(split[2]);\n                    return new Date(y, m, d);\n                }\n                catch (e) {\n                    throw new java.lang.IllegalArgumentException(\"Invalid escape format: \" + s);\n                }\n                ;\n            };\n            Date.prototype.getHours = function () {\n                throw new java.lang.IllegalArgumentException();\n            };\n            Date.prototype.getMinutes = function () {\n                throw new java.lang.IllegalArgumentException();\n            };\n            Date.prototype.getSeconds = function () {\n                throw new java.lang.IllegalArgumentException();\n            };\n            Date.prototype.setHours = function (i) {\n                throw new java.lang.IllegalArgumentException();\n            };\n            Date.prototype.setMinutes = function (i) {\n                throw new java.lang.IllegalArgumentException();\n            };\n            Date.prototype.setSeconds = function (i) {\n                throw new java.lang.IllegalArgumentException();\n            };\n            return Date;\n        }(java.util.Date));\n        sql.Date = Date;\n        Date[\"__class\"] = \"java.sql.Date\";\n        Date[\"__interfaces\"] = [\"java.lang.Cloneable\", \"java.lang.Comparable\", \"java.io.Serializable\"];\n    })(sql = java.sql || (java.sql = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var sql;\n    (function (sql) {\n        /**\n         * An implementation of java.sql.Time. Derived from\n         * http://java.sun.com/j2se/1.5.0/docs/api/java/sql/Time.html\n         */\n        var Time = (function (_super) {\n            __extends(Time, _super);\n            function Time(hour, minute, second) {\n                if (((typeof hour === 'number') || hour === null) && ((typeof minute === 'number') || minute === null) && ((typeof second === 'number') || second === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, 70, 0, 1, hour, minute, second);\n                }\n                else if (((typeof hour === 'number') || hour === null) && minute === undefined && second === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var time = __args[0];\n                    _super.call(this, time);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            Time.valueOf = function (s) {\n                var split = s.split(\":\");\n                if (split.length !== 3) {\n                    throw new java.lang.IllegalArgumentException(\"Invalid escape format: \" + s);\n                }\n                try {\n                    var hh = javaemul.internal.IntegerHelper.parseInt(split[0]);\n                    var mm = javaemul.internal.IntegerHelper.parseInt(split[1]);\n                    var ss = javaemul.internal.IntegerHelper.parseInt(split[2]);\n                    return new Time(hh, mm, ss);\n                }\n                catch (e) {\n                    throw new java.lang.IllegalArgumentException(\"Invalid escape format: \" + s);\n                }\n                ;\n            };\n            Time.prototype.getDate = function () {\n                throw new java.lang.IllegalArgumentException();\n            };\n            Time.prototype.getDay = function () {\n                throw new java.lang.IllegalArgumentException();\n            };\n            Time.prototype.getMonth = function () {\n                throw new java.lang.IllegalArgumentException();\n            };\n            Time.prototype.getYear = function () {\n                throw new java.lang.IllegalArgumentException();\n            };\n            Time.prototype.setDate = function (i) {\n                throw new java.lang.IllegalArgumentException();\n            };\n            Time.prototype.setMonth = function (i) {\n                throw new java.lang.IllegalArgumentException();\n            };\n            Time.prototype.setYear = function (i) {\n                throw new java.lang.IllegalArgumentException();\n            };\n            return Time;\n        }(java.util.Date));\n        sql.Time = Time;\n        Time[\"__class\"] = \"java.sql.Time\";\n        Time[\"__interfaces\"] = [\"java.lang.Cloneable\", \"java.lang.Comparable\", \"java.io.Serializable\"];\n    })(sql = java.sql || (java.sql = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var sql;\n    (function (sql) {\n        /**\n         * An implementation of java.sql.Timestame. Derived from\n         * http://java.sun.com/j2se/1.5.0/docs/api/java/sql/Timestamp.html. This is\n         * basically just regular Date decorated with a nanoseconds field.\n         */\n        var Timestamp = (function (_super) {\n            __extends(Timestamp, _super);\n            function Timestamp(year, month, date, hour, minute, second, nano) {\n                var _this = this;\n                if (((typeof year === 'number') || year === null) && ((typeof month === 'number') || month === null) && ((typeof date === 'number') || date === null) && ((typeof hour === 'number') || hour === null) && ((typeof minute === 'number') || minute === null) && ((typeof second === 'number') || second === null) && ((typeof nano === 'number') || nano === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, year, month, date, hour, minute, second);\n                    this.nanos = 0;\n                    (function () {\n                        _this.setNanos(nano);\n                    })();\n                }\n                else if (((typeof year === 'number') || year === null) && month === undefined && date === undefined && hour === undefined && minute === undefined && second === undefined && nano === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var time_1 = __args[0];\n                    _super.call(this, time_1);\n                    this.nanos = 0;\n                    (function () {\n                        _this.nanos = ((((time_1 % 1000) | 0)) * 1000000);\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            Timestamp.valueOf = function (s) {\n                var components = s.split(\" \");\n                if (components.length !== 2) {\n                    throw new java.lang.IllegalArgumentException(\"Invalid escape format: \" + s);\n                }\n                var timeComponents = components[1].split(\"\\\\.\");\n                var hasNanos = true;\n                var nanos = 0;\n                if (timeComponents.length === 1) {\n                    hasNanos = false;\n                }\n                else if (timeComponents.length !== 2) {\n                    throw new java.lang.IllegalArgumentException(\"Invalid escape format: \" + s);\n                }\n                var d = java.sql.Date.valueOf(components[0]);\n                var t = java.sql.Time.valueOf(timeComponents[0]);\n                if (hasNanos) {\n                    var nanosString = timeComponents[1];\n                    var len = nanosString.length;\n                    if (len > 9) {\n                        throw new java.lang.IllegalArgumentException(\"Invalid escape format: \" + s);\n                    }\n                    if (len < 9) {\n                        nanosString += \"00000000\".substring(len - 1);\n                    }\n                    try {\n                        nanos = javaemul.internal.IntegerHelper.valueOf(nanosString);\n                    }\n                    catch (e) {\n                        throw new java.lang.IllegalArgumentException(\"Invalid escape format: \" + s);\n                    }\n                    ;\n                }\n                return new Timestamp(d.getYear(), d.getMonth(), d.getDate(), t.getHours(), t.getMinutes(), t.getSeconds(), nanos);\n            };\n            Timestamp.padNine = function (value) {\n                var toReturn = new java.lang.StringBuilder(\"000000000\");\n                var asString = new String(value).toString();\n                toReturn = toReturn.replace(9 - asString.length, 9, asString);\n                return toReturn.toString();\n            };\n            Timestamp.prototype.after = function (ts) {\n                var _this = this;\n                if (((ts != null && ts instanceof java.sql.Timestamp) || ts === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return (_this.getTime() > ts.getTime()) || (_this.getTime() === ts.getTime() && _this.getNanos() > ts.getNanos());\n                    })();\n                }\n                else if (((ts != null && ts instanceof java.util.Date) || ts === null)) {\n                    return this.after$java_util_Date(ts);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Timestamp.prototype.before = function (ts) {\n                var _this = this;\n                if (((ts != null && ts instanceof java.sql.Timestamp) || ts === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return (_this.getTime() < ts.getTime()) || (_this.getTime() === ts.getTime() && _this.getNanos() < ts.getNanos());\n                    })();\n                }\n                else if (((ts != null && ts instanceof java.util.Date) || ts === null)) {\n                    return this.before$java_util_Date(ts);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Timestamp.prototype.compareTo$java_util_Date = function (o) {\n                if (o != null && o instanceof java.sql.Timestamp) {\n                    return this.compareTo(o);\n                }\n                else {\n                    return this.compareTo(new Timestamp(o.getTime()));\n                }\n            };\n            Timestamp.prototype.compareTo = function (o) {\n                var _this = this;\n                if (((o != null && o instanceof java.sql.Timestamp) || o === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var cmp = javaemul.internal.LongHelper.compare(_this.getTime(), o.getTime());\n                        return cmp === 0 ? javaemul.internal.IntegerHelper.compare(_this.getNanos(), o.getNanos()) : cmp;\n                    })();\n                }\n                else if (((o != null && o instanceof java.util.Date) || o === null)) {\n                    return this.compareTo$java_util_Date(o);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Timestamp.prototype.equals$java_lang_Object = function (ts) {\n                return (ts != null && ts instanceof java.sql.Timestamp) && this.equals(ts);\n            };\n            Timestamp.prototype.equals = function (ts) {\n                var _this = this;\n                if (((ts != null && ts instanceof java.sql.Timestamp) || ts === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return ts != null && _this.getTime() === ts.getTime() && _this.getNanos() === ts.getNanos();\n                    })();\n                }\n                else if (((ts != null) || ts === null)) {\n                    return this.equals$java_lang_Object(ts);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Timestamp.prototype.getNanos = function () {\n                return this.nanos;\n            };\n            Timestamp.prototype.getTime = function () {\n                return _super.prototype.getTime.call(this);\n            };\n            Timestamp.prototype.hashCode = function () {\n                return _super.prototype.hashCode.call(this);\n            };\n            Timestamp.prototype.setNanos = function (n) {\n                if (n < 0 || n > 999999999) {\n                    throw new java.lang.IllegalArgumentException(\"nanos out of range \" + n);\n                }\n                this.nanos = n;\n                _super.prototype.setTime.call(this, (Math.round(this.getTime() / 1000)) * 1000 + ((this.nanos / 1000000 | 0)));\n            };\n            Timestamp.prototype.setTime = function (time) {\n                _super.prototype.setTime.call(this, time);\n                this.nanos = ((((time % 1000) | 0)) * 1000000);\n            };\n            return Timestamp;\n        }(java.util.Date));\n        sql.Timestamp = Timestamp;\n        Timestamp[\"__class\"] = \"java.sql.Timestamp\";\n        Timestamp[\"__interfaces\"] = [\"java.lang.Cloneable\", \"java.lang.Comparable\", \"java.io.Serializable\"];\n    })(sql = java.sql || (java.sql = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        var logging;\n        (function (logging) {\n            /**\n             * A simple console logger used in super dev mode.\n             */\n            var SimpleConsoleLogHandler = (function (_super) {\n                __extends(SimpleConsoleLogHandler, _super);\n                function SimpleConsoleLogHandler() {\n                    _super.apply(this, arguments);\n                }\n                SimpleConsoleLogHandler.prototype.publish = function (record) {\n                    if (!this.isLoggable(record)) {\n                        return;\n                    }\n                    var level = this.toConsoleLogLevel(record.getLevel());\n                    if (record.getThrown() != null) {\n                        console.log(level, record.getThrown());\n                    }\n                };\n                SimpleConsoleLogHandler.prototype.toConsoleLogLevel = function (level) {\n                    var val = level.intValue();\n                    if (val >= java.util.logging.Level.SEVERE_$LI$().intValue()) {\n                        return \"error\";\n                    }\n                    else if (val >= java.util.logging.Level.WARNING_$LI$().intValue()) {\n                        return \"warn\";\n                    }\n                    else if (val >= java.util.logging.Level.INFO_$LI$().intValue()) {\n                        return \"info\";\n                    }\n                    else {\n                        return \"log\";\n                    }\n                };\n                SimpleConsoleLogHandler.prototype.close = function () {\n                };\n                SimpleConsoleLogHandler.prototype.flush = function () {\n                };\n                return SimpleConsoleLogHandler;\n            }(java.util.logging.Handler));\n            logging.SimpleConsoleLogHandler = SimpleConsoleLogHandler;\n            SimpleConsoleLogHandler[\"__class\"] = \"java.util.logging.SimpleConsoleLogHandler\";\n        })(logging = util.logging || (util.logging = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * Wraps native <code>byte</code> as an object.\n         */\n        var ByteHelper = (function (_super) {\n            __extends(ByteHelper, _super);\n            function ByteHelper(s) {\n                var _this = this;\n                if (((typeof s === 'string') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    this.value = 0;\n                    (function () {\n                        _this.value = ByteHelper.parseByte(s);\n                    })();\n                }\n                else if (((typeof s === 'number') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var value_1 = __args[0];\n                    _super.call(this);\n                    this.value = 0;\n                    (function () {\n                        _this.value = value_1;\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            ByteHelper.MIN_VALUE_$LI$ = function () { if (ByteHelper.MIN_VALUE == null)\n                ByteHelper.MIN_VALUE = (128 | 0); return ByteHelper.MIN_VALUE; };\n            ;\n            ByteHelper.MAX_VALUE_$LI$ = function () { if (ByteHelper.MAX_VALUE == null)\n                ByteHelper.MAX_VALUE = (127 | 0); return ByteHelper.MAX_VALUE; };\n            ;\n            ByteHelper.TYPE_$LI$ = function () { if (ByteHelper.TYPE == null)\n                ByteHelper.TYPE = Number; return ByteHelper.TYPE; };\n            ;\n            ByteHelper.compare = function (x, y) {\n                return x - y;\n            };\n            ByteHelper.decode = function (s) {\n                return ByteHelper.valueOf((internal.NumberHelper.__decodeAndValidateInt(s, ByteHelper.MIN_VALUE_$LI$(), ByteHelper.MAX_VALUE_$LI$()) | 0));\n            };\n            /**\n             * @skip\n             *\n             * Here for shared implementation with Arrays.hashCode\n             */\n            ByteHelper.hashCode = function (b) {\n                return b;\n            };\n            ByteHelper.parseByte = function (s, radix) {\n                if (radix === void 0) { radix = 10; }\n                return (internal.NumberHelper.__parseAndValidateInt(s, radix, ByteHelper.MIN_VALUE_$LI$(), ByteHelper.MAX_VALUE_$LI$()) | 0);\n            };\n            ByteHelper.toString = function (b) {\n                return new String(b).toString();\n            };\n            ByteHelper.valueOf$byte = function (b) {\n                var rebase = b + 128;\n                var result = ByteHelper.BoxedValues.boxedValues_$LI$()[rebase];\n                if (result == null) {\n                    result = ByteHelper.BoxedValues.boxedValues_$LI$()[rebase] = new ByteHelper(b);\n                }\n                return result;\n            };\n            ByteHelper.valueOf$java_lang_String = function (s) {\n                return ByteHelper.valueOf(s, 10);\n            };\n            ByteHelper.valueOf = function (s, radix) {\n                if (((typeof s === 'string') || s === null) && ((typeof radix === 'number') || radix === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return ByteHelper.valueOf(ByteHelper.parseByte(s, radix));\n                    })();\n                }\n                else if (((typeof s === 'string') || s === null) && radix === undefined) {\n                    return javaemul.internal.ByteHelper.valueOf$java_lang_String(s);\n                }\n                else if (((typeof s === 'number') || s === null) && radix === undefined) {\n                    return javaemul.internal.ByteHelper.valueOf$byte(s);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            ByteHelper.prototype.byteValue = function () {\n                return this.value;\n            };\n            ByteHelper.prototype.compareTo = function (b) {\n                var _this = this;\n                if (((b != null && b instanceof javaemul.internal.ByteHelper) || b === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return ByteHelper.compare(_this.value, b.value);\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            ByteHelper.prototype.doubleValue = function () {\n                return this.value;\n            };\n            ByteHelper.prototype.equals = function (o) {\n                return (o != null && o instanceof javaemul.internal.ByteHelper) && (o.value === this.value);\n            };\n            ByteHelper.prototype.floatValue = function () {\n                return this.value;\n            };\n            ByteHelper.prototype.hashCode = function () {\n                return ByteHelper.hashCode(this.value);\n            };\n            ByteHelper.prototype.intValue = function () {\n                return this.value;\n            };\n            ByteHelper.prototype.longValue = function () {\n                return this.value;\n            };\n            ByteHelper.prototype.shortValue = function () {\n                return this.value;\n            };\n            ByteHelper.prototype.toString = function () {\n                return ByteHelper.toString(this.value);\n            };\n            ByteHelper.SIZE = 8;\n            return ByteHelper;\n        }(javaemul.internal.NumberHelper));\n        internal.ByteHelper = ByteHelper;\n        ByteHelper[\"__class\"] = \"javaemul.internal.ByteHelper\";\n        ByteHelper[\"__interfaces\"] = [\"java.lang.Comparable\", \"java.io.Serializable\"];\n        var ByteHelper;\n        (function (ByteHelper) {\n            /**\n             * Use nested class to avoid clinit on outer.\n             */\n            var BoxedValues = (function () {\n                function BoxedValues() {\n                }\n                BoxedValues.boxedValues_$LI$ = function () { if (BoxedValues.boxedValues == null)\n                    BoxedValues.boxedValues = new Array(256); return BoxedValues.boxedValues; };\n                ;\n                return BoxedValues;\n            }());\n            ByteHelper.BoxedValues = BoxedValues;\n            BoxedValues[\"__class\"] = \"javaemul.internal.ByteHelper.BoxedValues\";\n        })(ByteHelper = internal.ByteHelper || (internal.ByteHelper = {}));\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * Wraps a primitive <code>double</code> as an object.\n         */\n        var DoubleHelper = (function (_super) {\n            __extends(DoubleHelper, _super);\n            function DoubleHelper(s) {\n                if (((typeof s === 'string') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else if (((typeof s === 'number') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var value = __args[0];\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            DoubleHelper.NaN_$LI$ = function () { if (DoubleHelper.NaN == null)\n                DoubleHelper.NaN = 0.0 / 0.0; return DoubleHelper.NaN; };\n            ;\n            DoubleHelper.NEGATIVE_INFINITY_$LI$ = function () { if (DoubleHelper.NEGATIVE_INFINITY == null)\n                DoubleHelper.NEGATIVE_INFINITY = -1.0 / 0.0; return DoubleHelper.NEGATIVE_INFINITY; };\n            ;\n            DoubleHelper.POSITIVE_INFINITY_$LI$ = function () { if (DoubleHelper.POSITIVE_INFINITY == null)\n                DoubleHelper.POSITIVE_INFINITY = 1.0 / 0.0; return DoubleHelper.POSITIVE_INFINITY; };\n            ;\n            DoubleHelper.compare = function (x, y) {\n                if (x < y) {\n                    return -1;\n                }\n                if (x > y) {\n                    return 1;\n                }\n                if (x === y) {\n                    return 0;\n                }\n                if (DoubleHelper.isNaN(x)) {\n                    if (DoubleHelper.isNaN(y)) {\n                        return 0;\n                    }\n                    else {\n                        return 1;\n                    }\n                }\n                else {\n                    return -1;\n                }\n            };\n            DoubleHelper.doubleToLongBits = function (value) {\n                if (DoubleHelper.isNaN(value)) {\n                    return 9221120237041090560;\n                }\n                var negative = false;\n                if (value === 0.0) {\n                    if (1.0 / value === DoubleHelper.NEGATIVE_INFINITY_$LI$()) {\n                        return -9223372036854775808;\n                    }\n                    else {\n                        return 0;\n                    }\n                }\n                if (value < 0.0) {\n                    negative = true;\n                    value = -value;\n                }\n                if (DoubleHelper.isInfinite(value)) {\n                    if (negative) {\n                        return -4503599627370496;\n                    }\n                    else {\n                        return 9218868437227405312;\n                    }\n                }\n                var exp = 0;\n                if (value < 1.0) {\n                    var bit = 512;\n                    for (var i = 0; i < 10; i++, bit >>= 1) {\n                        if (value < DoubleHelper.PowersTable.invPowers_$LI$()[i] && exp - bit >= -1023) {\n                            value *= DoubleHelper.PowersTable.powers_$LI$()[i];\n                            exp -= bit;\n                        }\n                    }\n                    if (value < 1.0 && exp - 1 >= -1023) {\n                        value *= 2.0;\n                        exp--;\n                    }\n                }\n                else if (value >= 2.0) {\n                    var bit = 512;\n                    for (var i = 0; i < 10; i++, bit >>= 1) {\n                        if (value >= DoubleHelper.PowersTable.powers_$LI$()[i]) {\n                            value *= DoubleHelper.PowersTable.invPowers_$LI$()[i];\n                            exp += bit;\n                        }\n                    }\n                }\n                if (exp > -1023) {\n                    value -= 1.0;\n                }\n                else {\n                    value *= 0.5;\n                }\n                var ihi = Math.round((value * DoubleHelper.POWER_20));\n                value -= ihi * DoubleHelper.POWER_MINUS_20;\n                var ilo = Math.round((value * DoubleHelper.POWER_52));\n                ihi |= (exp + 1023) << 20;\n                if (negative) {\n                    ihi |= 2147483648;\n                }\n                return (ihi << 32) | ilo;\n            };\n            /**\n             * @skip Here for shared implementation with Arrays.hashCode\n             */\n            DoubleHelper.hashCode = function (d) {\n                return (d | 0);\n            };\n            DoubleHelper.isInfinite = function (x) {\n                return x === javaemul.internal.JsUtils.getInfinity() || x === -javaemul.internal.JsUtils.getInfinity();\n            };\n            DoubleHelper.isNaN = function (x) {\n                return isNaN(x);\n            };\n            DoubleHelper.longBitsToDouble = function (bits) {\n                var ihi = Math.round((bits >> 32));\n                var ilo = Math.round((bits & 4294967295));\n                if (ihi < 0) {\n                    ihi += 4294967296;\n                }\n                if (ilo < 0) {\n                    ilo += 4294967296;\n                }\n                var negative = (ihi & -2147483648) !== 0;\n                var exp = (((ihi >> 20) & 2047) | 0);\n                ihi &= 1048575;\n                if (exp === 0) {\n                    var d_1 = (ihi * DoubleHelper.POWER_MINUS_20) + (ilo * DoubleHelper.POWER_MINUS_52);\n                    d_1 *= DoubleHelper.POWER_MINUS_1022;\n                    return negative ? (d_1 === 0.0 ? -0.0 : -d_1) : d_1;\n                }\n                else if (exp === 2047) {\n                    if (ihi === 0 && ilo === 0) {\n                        return negative ? DoubleHelper.NEGATIVE_INFINITY_$LI$() : DoubleHelper.POSITIVE_INFINITY_$LI$();\n                    }\n                    else {\n                        return DoubleHelper.NaN_$LI$();\n                    }\n                }\n                exp -= 1023;\n                var d = 1.0 + (ihi * DoubleHelper.POWER_MINUS_20) + (ilo * DoubleHelper.POWER_MINUS_52);\n                if (exp > 0) {\n                    var bit = 512;\n                    for (var i = 0; i < 10; i++, bit >>= 1) {\n                        if (exp >= bit) {\n                            d *= DoubleHelper.PowersTable.powers_$LI$()[i];\n                            exp -= bit;\n                        }\n                    }\n                }\n                else if (exp < 0) {\n                    while ((exp < 0)) {\n                        var bit = 512;\n                        for (var i = 0; i < 10; i++, bit >>= 1) {\n                            if (exp <= -bit) {\n                                d *= DoubleHelper.PowersTable.invPowers_$LI$()[i];\n                                exp += bit;\n                            }\n                        }\n                    }\n                    ;\n                }\n                return negative ? -d : d;\n            };\n            DoubleHelper.parseDouble = function (s) {\n                return internal.NumberHelper.__parseAndValidateDouble(s);\n            };\n            DoubleHelper.toString = function (b) {\n                return new String(b).toString();\n            };\n            DoubleHelper.valueOf$double = function (d) {\n                return new DoubleHelper(d);\n            };\n            DoubleHelper.valueOf = function (s) {\n                if (((typeof s === 'string') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return new DoubleHelper(s);\n                    })();\n                }\n                else if (((typeof s === 'number') || s === null)) {\n                    return javaemul.internal.DoubleHelper.valueOf$double(s);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            DoubleHelper.prototype.byteValue = function () {\n                return (this.doubleValue() | 0);\n            };\n            DoubleHelper.prototype.compareTo = function (b) {\n                var _this = this;\n                if (((b != null && b instanceof javaemul.internal.DoubleHelper) || b === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return DoubleHelper.compare(_this.doubleValue(), b.doubleValue());\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            DoubleHelper.prototype.doubleValue = function () {\n                return DoubleHelper.unsafeCast(javaemul.internal.InternalPreconditions.checkNotNull(this));\n            };\n            DoubleHelper.unsafeCast = function (instance) {\n                return instance;\n            };\n            DoubleHelper.prototype.equals = function (o) {\n                return javaemul.internal.InternalPreconditions.checkNotNull(this) === o;\n            };\n            DoubleHelper.prototype.floatValue = function () {\n                return this.doubleValue();\n            };\n            /**\n             * Performance caution: using Double objects as map keys is not recommended.\n             * Using double values as keys is generally a bad idea due to difficulty\n             * determining exact equality. In addition, there is no efficient JavaScript\n             * equivalent of <code>doubleToIntBits</code>. As a result, this method\n             * computes a hash code by truncating the whole number portion of the\n             * double, which may lead to poor performance for certain value sets if\n             * Doubles are used as keys in a {@link java.util.HashMap}.\n             */\n            DoubleHelper.prototype.hashCode = function () {\n                return DoubleHelper.hashCode(this.doubleValue());\n            };\n            DoubleHelper.prototype.intValue = function () {\n                return (this.doubleValue() | 0);\n            };\n            DoubleHelper.prototype.isInfinite = function () {\n                return DoubleHelper.isInfinite(this.doubleValue());\n            };\n            DoubleHelper.prototype.isNaN = function () {\n                return DoubleHelper.isNaN(this.doubleValue());\n            };\n            DoubleHelper.prototype.longValue = function () {\n                return Math.round(this.doubleValue());\n            };\n            DoubleHelper.prototype.shortValue = function () {\n                return (this.doubleValue() | 0);\n            };\n            DoubleHelper.prototype.toString = function () {\n                return DoubleHelper.toString(this.doubleValue());\n            };\n            DoubleHelper.MAX_VALUE = 1.7976931348623157E308;\n            DoubleHelper.MIN_VALUE = 4.9E-324;\n            DoubleHelper.MIN_NORMAL = 2.2250738585072014E-308;\n            DoubleHelper.MAX_EXPONENT = 1023;\n            DoubleHelper.MIN_EXPONENT = -1022;\n            DoubleHelper.SIZE = 64;\n            DoubleHelper.POWER_512 = 1.3407807929942597E154;\n            DoubleHelper.POWER_MINUS_512 = 7.458340731200207E-155;\n            DoubleHelper.POWER_256 = 1.157920892373162E77;\n            DoubleHelper.POWER_MINUS_256 = 8.636168555094445E-78;\n            DoubleHelper.POWER_128 = 3.4028236692093846E38;\n            DoubleHelper.POWER_MINUS_128 = 2.9387358770557188E-39;\n            DoubleHelper.POWER_64 = 1.8446744073709552E19;\n            DoubleHelper.POWER_MINUS_64 = 5.421010862427522E-20;\n            DoubleHelper.POWER_52 = 4.503599627370496E15;\n            DoubleHelper.POWER_MINUS_52 = 2.220446049250313E-16;\n            DoubleHelper.POWER_32 = 4.294967296E9;\n            DoubleHelper.POWER_MINUS_32 = 2.3283064365386963E-10;\n            DoubleHelper.POWER_31 = 2.147483648E9;\n            DoubleHelper.POWER_20 = 1048576.0;\n            DoubleHelper.POWER_MINUS_20 = 9.5367431640625E-7;\n            DoubleHelper.POWER_16 = 65536.0;\n            DoubleHelper.POWER_MINUS_16 = 1.52587890625E-5;\n            DoubleHelper.POWER_8 = 256.0;\n            DoubleHelper.POWER_MINUS_8 = 0.00390625;\n            DoubleHelper.POWER_4 = 16.0;\n            DoubleHelper.POWER_MINUS_4 = 0.0625;\n            DoubleHelper.POWER_2 = 4.0;\n            DoubleHelper.POWER_MINUS_2 = 0.25;\n            DoubleHelper.POWER_1 = 2.0;\n            DoubleHelper.POWER_MINUS_1 = 0.5;\n            DoubleHelper.POWER_MINUS_1022 = 2.2250738585072014E-308;\n            return DoubleHelper;\n        }(javaemul.internal.NumberHelper));\n        internal.DoubleHelper = DoubleHelper;\n        DoubleHelper[\"__class\"] = \"javaemul.internal.DoubleHelper\";\n        DoubleHelper[\"__interfaces\"] = [\"java.lang.Comparable\", \"java.io.Serializable\"];\n        var DoubleHelper;\n        (function (DoubleHelper) {\n            var PowersTable = (function () {\n                function PowersTable() {\n                }\n                PowersTable.powers_$LI$ = function () { if (PowersTable.powers == null)\n                    PowersTable.powers = [javaemul.internal.DoubleHelper.POWER_512, javaemul.internal.DoubleHelper.POWER_256, javaemul.internal.DoubleHelper.POWER_128, javaemul.internal.DoubleHelper.POWER_64, javaemul.internal.DoubleHelper.POWER_32, javaemul.internal.DoubleHelper.POWER_16, javaemul.internal.DoubleHelper.POWER_8, javaemul.internal.DoubleHelper.POWER_4, javaemul.internal.DoubleHelper.POWER_2, javaemul.internal.DoubleHelper.POWER_1]; return PowersTable.powers; };\n                ;\n                PowersTable.invPowers_$LI$ = function () { if (PowersTable.invPowers == null)\n                    PowersTable.invPowers = [javaemul.internal.DoubleHelper.POWER_MINUS_512, javaemul.internal.DoubleHelper.POWER_MINUS_256, javaemul.internal.DoubleHelper.POWER_MINUS_128, javaemul.internal.DoubleHelper.POWER_MINUS_64, javaemul.internal.DoubleHelper.POWER_MINUS_32, javaemul.internal.DoubleHelper.POWER_MINUS_16, javaemul.internal.DoubleHelper.POWER_MINUS_8, javaemul.internal.DoubleHelper.POWER_MINUS_4, javaemul.internal.DoubleHelper.POWER_MINUS_2, javaemul.internal.DoubleHelper.POWER_MINUS_1]; return PowersTable.invPowers; };\n                ;\n                return PowersTable;\n            }());\n            DoubleHelper.PowersTable = PowersTable;\n            PowersTable[\"__class\"] = \"javaemul.internal.DoubleHelper.PowersTable\";\n        })(DoubleHelper = internal.DoubleHelper || (internal.DoubleHelper = {}));\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * Wraps a primitive <code>float</code> as an object.\n         */\n        var FloatHelper = (function (_super) {\n            __extends(FloatHelper, _super);\n            function FloatHelper(s) {\n                var _this = this;\n                if (((typeof s === 'string') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    this.value = 0;\n                    (function () {\n                        _this.value = FloatHelper.parseFloat(s);\n                    })();\n                }\n                else if (((typeof s === 'number') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var value_2 = __args[0];\n                    _super.call(this);\n                    this.value = 0;\n                    (function () {\n                        _this.value = value_2;\n                    })();\n                }\n                else if (((typeof s === 'number') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var value_3 = __args[0];\n                    _super.call(this);\n                    this.value = 0;\n                    (function () {\n                        _this.value = value_3;\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            FloatHelper.NaN_$LI$ = function () { if (FloatHelper.NaN == null)\n                FloatHelper.NaN = 0.0 / 0.0; return FloatHelper.NaN; };\n            ;\n            FloatHelper.NEGATIVE_INFINITY_$LI$ = function () { if (FloatHelper.NEGATIVE_INFINITY == null)\n                FloatHelper.NEGATIVE_INFINITY = -1.0 / 0.0; return FloatHelper.NEGATIVE_INFINITY; };\n            ;\n            FloatHelper.POSITIVE_INFINITY_$LI$ = function () { if (FloatHelper.POSITIVE_INFINITY == null)\n                FloatHelper.POSITIVE_INFINITY = 1.0 / 0.0; return FloatHelper.POSITIVE_INFINITY; };\n            ;\n            FloatHelper.compare = function (x, y) {\n                return javaemul.internal.DoubleHelper.compare(x, y);\n            };\n            FloatHelper.floatToIntBits = function (value) {\n                if (FloatHelper.isNaN(value)) {\n                    return 2143289344;\n                }\n                if (value === 0.0) {\n                    if (1.0 / value === FloatHelper.NEGATIVE_INFINITY_$LI$()) {\n                        return -2147483648;\n                    }\n                    else {\n                        return 0;\n                    }\n                }\n                var negative = false;\n                if (value < 0.0) {\n                    negative = true;\n                    value = -value;\n                }\n                if (FloatHelper.isInfinite(value)) {\n                    if (negative) {\n                        return -8388608;\n                    }\n                    else {\n                        return 2139095040;\n                    }\n                }\n                var l = javaemul.internal.DoubleHelper.doubleToLongBits(value);\n                var exp = ((((l >> 52) & 2047) - 1023) | 0);\n                var mantissa = (((l & 4503599627370495) >> 29) | 0);\n                if (exp <= -127) {\n                    mantissa = (8388608 | mantissa) >> (-127 - exp + 1);\n                    exp = -127;\n                }\n                var bits = negative ? FloatHelper.POWER_31_INT : 0;\n                bits |= (exp + 127) << 23;\n                bits |= mantissa;\n                return (bits | 0);\n            };\n            /**\n             * @skip Here for shared implementation with Arrays.hashCode.\n             * @param f\n             * @return hash value of float (currently just truncated to int)\n             */\n            FloatHelper.hashCode = function (f) {\n                return (f | 0);\n            };\n            FloatHelper.intBitsToFloat = function (bits) {\n                var negative = (bits & -2147483648) !== 0;\n                var exp = (bits >> 23) & 255;\n                bits &= 8388607;\n                if (exp === 0) {\n                    if (bits === 0) {\n                        return negative ? -0.0 : 0.0;\n                    }\n                }\n                else if (exp === 255) {\n                    if (bits === 0) {\n                        return negative ? FloatHelper.NEGATIVE_INFINITY_$LI$() : FloatHelper.POSITIVE_INFINITY_$LI$();\n                    }\n                    else {\n                        return FloatHelper.NaN_$LI$();\n                    }\n                }\n                if (exp === 0) {\n                    exp = 1;\n                    while (((bits & 8388608) === 0)) {\n                        bits <<= 1;\n                        exp--;\n                    }\n                    ;\n                    bits &= 8388607;\n                }\n                var bits64 = negative ? -9223372036854775808 : 0;\n                bits64 |= (Math.round((exp + 896))) << 52;\n                bits64 |= (Math.round(bits)) << 29;\n                return javaemul.internal.DoubleHelper.longBitsToDouble(bits64);\n            };\n            FloatHelper.isInfinite = function (x) {\n                return javaemul.internal.DoubleHelper.isInfinite(x);\n            };\n            FloatHelper.isNaN = function (x) {\n                return javaemul.internal.DoubleHelper.isNaN(x);\n            };\n            FloatHelper.parseFloat = function (s) {\n                var doubleValue = internal.NumberHelper.__parseAndValidateDouble(s);\n                if (doubleValue > FloatHelper.MAX_VALUE) {\n                    return FloatHelper.POSITIVE_INFINITY_$LI$();\n                }\n                else if (doubleValue < -FloatHelper.MAX_VALUE) {\n                    return FloatHelper.NEGATIVE_INFINITY_$LI$();\n                }\n                return doubleValue;\n            };\n            FloatHelper.toString = function (b) {\n                return new String(b).toString();\n            };\n            FloatHelper.valueOf$float = function (f) {\n                return new FloatHelper(f);\n            };\n            FloatHelper.valueOf = function (s) {\n                if (((typeof s === 'string') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return new FloatHelper(s);\n                    })();\n                }\n                else if (((typeof s === 'number') || s === null)) {\n                    return javaemul.internal.FloatHelper.valueOf$float(s);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            FloatHelper.prototype.byteValue = function () {\n                return (this.value | 0);\n            };\n            FloatHelper.prototype.compareTo = function (b) {\n                var _this = this;\n                if (((b != null && b instanceof javaemul.internal.FloatHelper) || b === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return FloatHelper.compare(_this.value, b.value);\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            FloatHelper.prototype.doubleValue = function () {\n                return this.value;\n            };\n            FloatHelper.prototype.equals = function (o) {\n                return (o != null && o instanceof javaemul.internal.FloatHelper) && (o.value === this.value);\n            };\n            FloatHelper.prototype.floatValue = function () {\n                return this.value;\n            };\n            /**\n             * Performance caution: using Float objects as map keys is not recommended.\n             * Using floating point values as keys is generally a bad idea due to\n             * difficulty determining exact equality. In addition, there is no efficient\n             * JavaScript equivalent of <code>floatToIntBits</code>. As a result, this\n             * method computes a hash code by truncating the whole number portion of the\n             * float, which may lead to poor performance for certain value sets if\n             * Floats are used as keys in a {@link java.util.HashMap}.\n             */\n            FloatHelper.prototype.hashCode = function () {\n                return FloatHelper.hashCode(this.value);\n            };\n            FloatHelper.prototype.intValue = function () {\n                return (this.value | 0);\n            };\n            FloatHelper.prototype.isInfinite = function () {\n                return FloatHelper.isInfinite(this.value);\n            };\n            FloatHelper.prototype.isNaN = function () {\n                return FloatHelper.isNaN(this.value);\n            };\n            FloatHelper.prototype.longValue = function () {\n                return Math.round(this.value);\n            };\n            FloatHelper.prototype.shortValue = function () {\n                return (this.value | 0);\n            };\n            FloatHelper.prototype.toString = function () {\n                return FloatHelper.toString(this.value);\n            };\n            FloatHelper.MAX_VALUE = 3.4028235E38;\n            FloatHelper.MIN_VALUE = 1.4E-45;\n            FloatHelper.MAX_EXPONENT = 127;\n            FloatHelper.MIN_EXPONENT = -126;\n            FloatHelper.MIN_NORMAL = 1.17549435E-38;\n            FloatHelper.SIZE = 32;\n            FloatHelper.POWER_31_INT = 2147483648;\n            return FloatHelper;\n        }(javaemul.internal.NumberHelper));\n        internal.FloatHelper = FloatHelper;\n        FloatHelper[\"__class\"] = \"javaemul.internal.FloatHelper\";\n        FloatHelper[\"__interfaces\"] = [\"java.lang.Comparable\", \"java.io.Serializable\"];\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * Wraps a primitive <code>int</code> as an object.\n         */\n        var IntegerHelper = (function (_super) {\n            __extends(IntegerHelper, _super);\n            function IntegerHelper(s) {\n                var _this = this;\n                if (((typeof s === 'string') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    this.value = 0;\n                    (function () {\n                        _this.value = IntegerHelper.parseInt(s);\n                    })();\n                }\n                else if (((typeof s === 'number') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var value_4 = __args[0];\n                    _super.call(this);\n                    this.value = 0;\n                    (function () {\n                        _this.value = value_4;\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            IntegerHelper.bitCount = function (x) {\n                x -= ((x >> 1) & 1431655765);\n                x = (((x >> 2) & 858993459) + (x & 858993459));\n                x = (((x >> 4) + x) & 252645135);\n                x += (x >> 8);\n                x += (x >> 16);\n                return x & 63;\n            };\n            IntegerHelper.compare = function (x, y) {\n                if (x < y) {\n                    return -1;\n                }\n                else if (x > y) {\n                    return 1;\n                }\n                else {\n                    return 0;\n                }\n            };\n            IntegerHelper.decode = function (s) {\n                return IntegerHelper.valueOf(internal.NumberHelper.__decodeAndValidateInt(s, IntegerHelper.MIN_VALUE, IntegerHelper.MAX_VALUE));\n            };\n            /**\n             * @skip\n             *\n             * Here for shared implementation with Arrays.hashCode\n             */\n            IntegerHelper.hashCode = function (i) {\n                return i;\n            };\n            IntegerHelper.highestOneBit = function (i) {\n                if (i < 0) {\n                    return IntegerHelper.MIN_VALUE;\n                }\n                else if (i === 0) {\n                    return 0;\n                }\n                else {\n                    var rtn = void 0;\n                    for (rtn = 1073741824; (rtn & i) === 0; rtn >>= 1) {\n                    }\n                    return rtn;\n                }\n            };\n            IntegerHelper.lowestOneBit = function (i) {\n                return i & -i;\n            };\n            IntegerHelper.numberOfLeadingZeros = function (i) {\n                if (i < 0) {\n                    return 0;\n                }\n                else if (i === 0) {\n                    return IntegerHelper.SIZE;\n                }\n                else {\n                    var y = void 0;\n                    var m = void 0;\n                    var n = void 0;\n                    y = -(i >> 16);\n                    m = (y >> 16) & 16;\n                    n = 16 - m;\n                    i = i >> m;\n                    y = i - 256;\n                    m = (y >> 16) & 8;\n                    n += m;\n                    i <<= m;\n                    y = i - 4096;\n                    m = (y >> 16) & 4;\n                    n += m;\n                    i <<= m;\n                    y = i - 16384;\n                    m = (y >> 16) & 2;\n                    n += m;\n                    i <<= m;\n                    y = i >> 14;\n                    m = y & ~(y >> 1);\n                    return n + 2 - m;\n                }\n            };\n            IntegerHelper.numberOfTrailingZeros = function (i) {\n                if (i === 0) {\n                    return IntegerHelper.SIZE;\n                }\n                else {\n                    var rtn = 0;\n                    for (var r = 1; (r & i) === 0; r <<= 1) {\n                        rtn++;\n                    }\n                    return rtn;\n                }\n            };\n            IntegerHelper.parseInt = function (s, radix) {\n                if (radix === void 0) { radix = 10; }\n                return internal.NumberHelper.__parseAndValidateInt(s, radix, IntegerHelper.MIN_VALUE, IntegerHelper.MAX_VALUE);\n            };\n            IntegerHelper.reverse = function (i) {\n                var nibbles = IntegerHelper.ReverseNibbles.reverseNibbles_$LI$();\n                return (nibbles[i >>> 28]) | (nibbles[(i >> 24) & 15] << 4) | (nibbles[(i >> 20) & 15] << 8) | (nibbles[(i >> 16) & 15] << 12) | (nibbles[(i >> 12) & 15] << 16) | (nibbles[(i >> 8) & 15] << 20) | (nibbles[(i >> 4) & 15] << 24) | (nibbles[i & 15] << 28);\n            };\n            IntegerHelper.reverseBytes = function (i) {\n                return ((i & 255) << 24) | ((i & 65280) << 8) | ((i & 16711680) >> 8) | ((i & -16777216) >>> 24);\n            };\n            IntegerHelper.rotateLeft = function (i, distance) {\n                while ((distance-- > 0)) {\n                    i = i << 1 | ((i < 0) ? 1 : 0);\n                }\n                ;\n                return i;\n            };\n            IntegerHelper.rotateRight = function (i, distance) {\n                var ui = i & IntegerHelper.MAX_VALUE;\n                var carry = (i < 0) ? 1073741824 : 0;\n                while ((distance-- > 0)) {\n                    var nextcarry = ui & 1;\n                    ui = carry | (ui >> 1);\n                    carry = (nextcarry === 0) ? 0 : 1073741824;\n                }\n                ;\n                if (carry !== 0) {\n                    ui = ui | IntegerHelper.MIN_VALUE;\n                }\n                return ui;\n            };\n            IntegerHelper.signum = function (i) {\n                if (i === 0) {\n                    return 0;\n                }\n                else if (i < 0) {\n                    return -1;\n                }\n                else {\n                    return 1;\n                }\n            };\n            IntegerHelper.toBinaryString = function (value) {\n                return IntegerHelper.toUnsignedRadixString(value, 2);\n            };\n            IntegerHelper.toHexString = function (value) {\n                return IntegerHelper.toUnsignedRadixString(value, 16);\n            };\n            IntegerHelper.toOctalString = function (value) {\n                return IntegerHelper.toUnsignedRadixString(value, 8);\n            };\n            IntegerHelper.toString$int = function (value) {\n                return new String(value).toString();\n            };\n            IntegerHelper.toString = function (value, radix) {\n                if (((typeof value === 'number') || value === null) && ((typeof radix === 'number') || radix === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (radix === 10 || radix < javaemul.internal.CharacterHelper.MIN_RADIX || radix > javaemul.internal.CharacterHelper.MAX_RADIX) {\n                            return new String(value).toString();\n                        }\n                        return IntegerHelper.toRadixString(value, radix);\n                    })();\n                }\n                else if (((typeof value === 'number') || value === null) && radix === undefined) {\n                    return javaemul.internal.IntegerHelper.toString$int(value);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            IntegerHelper.valueOf$int = function (i) {\n                if (i > -129 && i < 128) {\n                    var rebase = i + 128;\n                    var result = IntegerHelper.BoxedValues.boxedValues_$LI$()[rebase];\n                    if (result == null) {\n                        result = IntegerHelper.BoxedValues.boxedValues_$LI$()[rebase] = new Number(i);\n                    }\n                    return result;\n                }\n                return new Number(i);\n            };\n            IntegerHelper.valueOf$java_lang_String = function (s) {\n                return IntegerHelper.valueOf(s, 10);\n            };\n            IntegerHelper.valueOf = function (s, radix) {\n                if (((typeof s === 'string') || s === null) && ((typeof radix === 'number') || radix === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return IntegerHelper.valueOf(IntegerHelper.parseInt(s, radix));\n                    })();\n                }\n                else if (((typeof s === 'string') || s === null) && radix === undefined) {\n                    return javaemul.internal.IntegerHelper.valueOf$java_lang_String(s);\n                }\n                else if (((typeof s === 'number') || s === null) && radix === undefined) {\n                    return javaemul.internal.IntegerHelper.valueOf$int(s);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            IntegerHelper.toRadixString = function (value, radix) {\n                return value.toString(radix);\n            };\n            IntegerHelper.toUnsignedRadixString = function (value, radix) {\n                // \">>> 0\" converts the value to unsigned number.\n                return (value >>> 0).toString(radix);\n            };\n            IntegerHelper.prototype.byteValue = function () {\n                return (this.value | 0);\n            };\n            IntegerHelper.prototype.compareTo = function (b) {\n                var _this = this;\n                if (((b != null && b instanceof javaemul.internal.IntegerHelper) || b === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return IntegerHelper.compare(_this.value, b.value);\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            IntegerHelper.prototype.doubleValue = function () {\n                return this.value;\n            };\n            IntegerHelper.prototype.equals = function (o) {\n                return (o != null && o instanceof javaemul.internal.IntegerHelper) && (o.value === this.value);\n            };\n            IntegerHelper.prototype.floatValue = function () {\n                return this.value;\n            };\n            IntegerHelper.prototype.hashCode = function () {\n                return IntegerHelper.hashCode(this.value);\n            };\n            IntegerHelper.prototype.intValue = function () {\n                return this.value;\n            };\n            IntegerHelper.prototype.longValue = function () {\n                return this.value;\n            };\n            IntegerHelper.prototype.shortValue = function () {\n                return (this.value | 0);\n            };\n            IntegerHelper.prototype.toString = function () {\n                return IntegerHelper.toString(this.value);\n            };\n            IntegerHelper.getInteger = function (nm) {\n                return IntegerHelper.decode(java.lang.System.getProperty(nm));\n            };\n            IntegerHelper.MAX_VALUE = 2147483647;\n            IntegerHelper.MIN_VALUE = -2147483648;\n            IntegerHelper.SIZE = 32;\n            return IntegerHelper;\n        }(javaemul.internal.NumberHelper));\n        internal.IntegerHelper = IntegerHelper;\n        IntegerHelper[\"__class\"] = \"javaemul.internal.IntegerHelper\";\n        IntegerHelper[\"__interfaces\"] = [\"java.lang.Comparable\", \"java.io.Serializable\"];\n        var IntegerHelper;\n        (function (IntegerHelper) {\n            /**\n             * Use nested class to avoid clinit on outer.\n             */\n            var BoxedValues = (function () {\n                function BoxedValues() {\n                }\n                BoxedValues.boxedValues_$LI$ = function () { if (BoxedValues.boxedValues == null)\n                    BoxedValues.boxedValues = new Array(256); return BoxedValues.boxedValues; };\n                ;\n                return BoxedValues;\n            }());\n            IntegerHelper.BoxedValues = BoxedValues;\n            BoxedValues[\"__class\"] = \"javaemul.internal.IntegerHelper.BoxedValues\";\n            /**\n             * Use nested class to avoid clinit on outer.\n             */\n            var ReverseNibbles = (function () {\n                function ReverseNibbles() {\n                }\n                ReverseNibbles.reverseNibbles_$LI$ = function () { if (ReverseNibbles.reverseNibbles == null)\n                    ReverseNibbles.reverseNibbles = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]; return ReverseNibbles.reverseNibbles; };\n                ;\n                return ReverseNibbles;\n            }());\n            IntegerHelper.ReverseNibbles = ReverseNibbles;\n            ReverseNibbles[\"__class\"] = \"javaemul.internal.IntegerHelper.ReverseNibbles\";\n        })(IntegerHelper = internal.IntegerHelper || (internal.IntegerHelper = {}));\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * Wraps a primitive <code>long</code> as an object.\n         */\n        var LongHelper = (function (_super) {\n            __extends(LongHelper, _super);\n            function LongHelper(s) {\n                var _this = this;\n                if (((typeof s === 'string') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    this.value = 0;\n                    (function () {\n                        _this.value = LongHelper.parseLong(s);\n                    })();\n                }\n                else if (((typeof s === 'number') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var value_5 = __args[0];\n                    _super.call(this);\n                    this.value = 0;\n                    (function () {\n                        _this.value = value_5;\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            LongHelper.bitCount = function (i) {\n                var high = ((i >> 32) | 0);\n                var low = (i | 0);\n                return javaemul.internal.IntegerHelper.bitCount(high) + javaemul.internal.IntegerHelper.bitCount(low);\n            };\n            LongHelper.compare = function (x, y) {\n                if (x < y) {\n                    return -1;\n                }\n                else if (x > y) {\n                    return 1;\n                }\n                else {\n                    return 0;\n                }\n            };\n            LongHelper.decode = function (s) {\n                var decode = internal.NumberHelper.__decodeNumberString(s);\n                return LongHelper.valueOf(decode.payload, decode.radix);\n            };\n            /**\n             * @skip Here for shared implementation with Arrays.hashCode\n             */\n            LongHelper.hashCode = function (l) {\n                return (l | 0);\n            };\n            LongHelper.highestOneBit = function (i) {\n                var high = ((i >> 32) | 0);\n                if (high !== 0) {\n                    return (Math.round(javaemul.internal.IntegerHelper.highestOneBit(high))) << 32;\n                }\n                else {\n                    return javaemul.internal.IntegerHelper.highestOneBit((i | 0)) & 4294967295;\n                }\n            };\n            LongHelper.lowestOneBit = function (i) {\n                return i & -i;\n            };\n            LongHelper.numberOfLeadingZeros = function (i) {\n                var high = ((i >> 32) | 0);\n                if (high !== 0) {\n                    return javaemul.internal.IntegerHelper.numberOfLeadingZeros(high);\n                }\n                else {\n                    return javaemul.internal.IntegerHelper.numberOfLeadingZeros((i | 0)) + 32;\n                }\n            };\n            LongHelper.numberOfTrailingZeros = function (i) {\n                var low = (i | 0);\n                if (low !== 0) {\n                    return javaemul.internal.IntegerHelper.numberOfTrailingZeros(low);\n                }\n                else {\n                    return javaemul.internal.IntegerHelper.numberOfTrailingZeros(((i >> 32) | 0)) + 32;\n                }\n            };\n            LongHelper.parseLong = function (s, radix) {\n                if (radix === void 0) { radix = 10; }\n                return internal.NumberHelper.__parseAndValidateLong(s, radix);\n            };\n            LongHelper.reverse = function (i) {\n                var high = ((i >>> 32) | 0);\n                var low = (i | 0);\n                return (Math.round(javaemul.internal.IntegerHelper.reverse(low)) << 32) | (javaemul.internal.IntegerHelper.reverse(high) & 4294967295);\n            };\n            LongHelper.reverseBytes = function (i) {\n                var high = ((i >>> 32) | 0);\n                var low = (i | 0);\n                return (Math.round(javaemul.internal.IntegerHelper.reverseBytes(low)) << 32) | (javaemul.internal.IntegerHelper.reverseBytes(high) & 4294967295);\n            };\n            LongHelper.rotateLeft = function (i, distance) {\n                while ((distance-- > 0)) {\n                    i = i << 1 | ((i < 0) ? 1 : 0);\n                }\n                ;\n                return i;\n            };\n            LongHelper.rotateRight = function (i, distance) {\n                var ui = i & LongHelper.MAX_VALUE;\n                var carry = (i < 0) ? 4611686018427387904 : 0;\n                while ((distance-- > 0)) {\n                    var nextcarry = ui & 1;\n                    ui = carry | (ui >> 1);\n                    carry = (nextcarry === 0) ? 0 : 4611686018427387904;\n                }\n                ;\n                if (carry !== 0) {\n                    ui = ui | LongHelper.MIN_VALUE;\n                }\n                return ui;\n            };\n            LongHelper.signum = function (i) {\n                if (i === 0) {\n                    return 0;\n                }\n                else if (i < 0) {\n                    return -1;\n                }\n                else {\n                    return 1;\n                }\n            };\n            LongHelper.toBinaryString = function (value) {\n                return LongHelper.toPowerOfTwoUnsignedString(value, 1);\n            };\n            LongHelper.toHexString = function (value) {\n                return LongHelper.toPowerOfTwoUnsignedString(value, 4);\n            };\n            LongHelper.toOctalString = function (value) {\n                return LongHelper.toPowerOfTwoUnsignedString(value, 3);\n            };\n            LongHelper.toString$long = function (value) {\n                return new String(value).toString();\n            };\n            LongHelper.toString = function (value, intRadix) {\n                if (((typeof value === 'number') || value === null) && ((typeof intRadix === 'number') || intRadix === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (intRadix === 10 || intRadix < javaemul.internal.CharacterHelper.MIN_RADIX || intRadix > javaemul.internal.CharacterHelper.MAX_RADIX) {\n                            return new String(value).toString();\n                        }\n                        var intValue = (value | 0);\n                        if (intValue === value) {\n                            return javaemul.internal.IntegerHelper.toString(intValue, intRadix);\n                        }\n                        var negative = value < 0;\n                        if (!negative) {\n                            value = -value;\n                        }\n                        var bufLen = intRadix < 8 ? 65 : 23;\n                        var buf = new Array(bufLen);\n                        var cursor = bufLen;\n                        var radix = intRadix;\n                        do {\n                            var q = Math.round(value / radix);\n                            buf[--cursor] = javaemul.internal.CharacterHelper.forDigit(((radix * q - value) | 0));\n                            value = q;\n                        } while ((value !== 0));\n                        if (negative) {\n                            buf[--cursor] = '-';\n                        }\n                        return (function (str, index, len) { return str.join('').substring(index, index + len); })(buf, cursor, bufLen - cursor);\n                    })();\n                }\n                else if (((typeof value === 'number') || value === null) && intRadix === undefined) {\n                    return javaemul.internal.LongHelper.toString$long(value);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            LongHelper.valueOf$long = function (i) {\n                if (i > -129 && i < 128) {\n                    var rebase = (i | 0) + 128;\n                    var result = LongHelper.BoxedValues.boxedValues_$LI$()[rebase];\n                    if (result == null) {\n                        result = LongHelper.BoxedValues.boxedValues_$LI$()[rebase] = new LongHelper(i);\n                    }\n                    return result;\n                }\n                return new LongHelper(i);\n            };\n            LongHelper.valueOf$java_lang_String = function (s) {\n                return LongHelper.valueOf(s, 10);\n            };\n            LongHelper.valueOf = function (s, radix) {\n                if (((typeof s === 'string') || s === null) && ((typeof radix === 'number') || radix === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return LongHelper.valueOf(LongHelper.parseLong(s, radix));\n                    })();\n                }\n                else if (((typeof s === 'string') || s === null) && radix === undefined) {\n                    return javaemul.internal.LongHelper.valueOf$java_lang_String(s);\n                }\n                else if (((typeof s === 'number') || s === null) && radix === undefined) {\n                    return javaemul.internal.LongHelper.valueOf$long(s);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            LongHelper.toPowerOfTwoUnsignedString = function (value, shift) {\n                var radix = 1 << shift;\n                if (javaemul.internal.IntegerHelper.MIN_VALUE <= value && value <= javaemul.internal.IntegerHelper.MAX_VALUE) {\n                    return javaemul.internal.IntegerHelper.toString((value | 0), radix);\n                }\n                var mask = radix - 1;\n                var bufSize = (64 / shift | 0) + 1;\n                var buf = new Array(bufSize);\n                var pos = bufSize;\n                do {\n                    buf[--pos] = javaemul.internal.CharacterHelper.forDigit(((value | 0)) & mask);\n                    value >>>= shift;\n                } while ((value !== 0));\n                return (function (str, index, len) { return str.join('').substring(index, index + len); })(buf, pos, bufSize - pos);\n            };\n            LongHelper.prototype.byteValue = function () {\n                return (this.value | 0);\n            };\n            LongHelper.prototype.compareTo = function (b) {\n                var _this = this;\n                if (((b != null && b instanceof javaemul.internal.LongHelper) || b === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return LongHelper.compare(_this.value, b.value);\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            LongHelper.prototype.doubleValue = function () {\n                return this.value;\n            };\n            LongHelper.prototype.equals = function (o) {\n                return (o != null && o instanceof javaemul.internal.LongHelper) && (o.value === this.value);\n            };\n            LongHelper.prototype.floatValue = function () {\n                return this.value;\n            };\n            LongHelper.prototype.hashCode = function () {\n                return LongHelper.hashCode(this.value);\n            };\n            LongHelper.prototype.intValue = function () {\n                return (this.value | 0);\n            };\n            LongHelper.prototype.longValue = function () {\n                return this.value;\n            };\n            LongHelper.prototype.shortValue = function () {\n                return (this.value | 0);\n            };\n            LongHelper.prototype.toString = function () {\n                return LongHelper.toString(this.value);\n            };\n            LongHelper.MAX_VALUE = 9223372036854775807;\n            LongHelper.MIN_VALUE = -9223372036854775808;\n            LongHelper.SIZE = 64;\n            return LongHelper;\n        }(javaemul.internal.NumberHelper));\n        internal.LongHelper = LongHelper;\n        LongHelper[\"__class\"] = \"javaemul.internal.LongHelper\";\n        LongHelper[\"__interfaces\"] = [\"java.lang.Comparable\", \"java.io.Serializable\"];\n        var LongHelper;\n        (function (LongHelper) {\n            /**\n             * Use nested class to avoid clinit on outer.\n             */\n            var BoxedValues = (function () {\n                function BoxedValues() {\n                }\n                BoxedValues.boxedValues_$LI$ = function () { if (BoxedValues.boxedValues == null)\n                    BoxedValues.boxedValues = new Array(256); return BoxedValues.boxedValues; };\n                ;\n                return BoxedValues;\n            }());\n            LongHelper.BoxedValues = BoxedValues;\n            BoxedValues[\"__class\"] = \"javaemul.internal.LongHelper.BoxedValues\";\n        })(LongHelper = internal.LongHelper || (internal.LongHelper = {}));\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * Wraps a primitive <code>short</code> as an object.\n         */\n        var ShortHelper = (function (_super) {\n            __extends(ShortHelper, _super);\n            function ShortHelper(s) {\n                var _this = this;\n                if (((typeof s === 'string') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    this.value = 0;\n                    (function () {\n                        _this.value = ShortHelper.parseShort(s);\n                    })();\n                }\n                else if (((typeof s === 'number') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var value_6 = __args[0];\n                    _super.call(this);\n                    this.value = 0;\n                    (function () {\n                        _this.value = value_6;\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            ShortHelper.MIN_VALUE_$LI$ = function () { if (ShortHelper.MIN_VALUE == null)\n                ShortHelper.MIN_VALUE = (32768 | 0); return ShortHelper.MIN_VALUE; };\n            ;\n            ShortHelper.MAX_VALUE_$LI$ = function () { if (ShortHelper.MAX_VALUE == null)\n                ShortHelper.MAX_VALUE = (32767 | 0); return ShortHelper.MAX_VALUE; };\n            ;\n            ShortHelper.TYPE_$LI$ = function () { if (ShortHelper.TYPE == null)\n                ShortHelper.TYPE = Number; return ShortHelper.TYPE; };\n            ;\n            ShortHelper.compare = function (x, y) {\n                return x - y;\n            };\n            ShortHelper.decode = function (s) {\n                return ShortHelper.valueOf((internal.NumberHelper.__decodeAndValidateInt(s, ShortHelper.MIN_VALUE_$LI$(), ShortHelper.MAX_VALUE_$LI$()) | 0));\n            };\n            /**\n             * @skip Here for shared implementation with Arrays.hashCode\n             */\n            ShortHelper.hashCode = function (s) {\n                return s;\n            };\n            ShortHelper.parseShort = function (s, radix) {\n                if (radix === void 0) { radix = 10; }\n                return (internal.NumberHelper.__parseAndValidateInt(s, radix, ShortHelper.MIN_VALUE_$LI$(), ShortHelper.MAX_VALUE_$LI$()) | 0);\n            };\n            ShortHelper.reverseBytes = function (s) {\n                return ((((s & 255) << 8) | ((s & 65280) >> 8)) | 0);\n            };\n            ShortHelper.toString = function (b) {\n                return new String(b).toString();\n            };\n            ShortHelper.valueOf$short = function (s) {\n                if (s > -129 && s < 128) {\n                    var rebase = s + 128;\n                    var result = ShortHelper.BoxedValues.boxedValues_$LI$()[rebase];\n                    if (result == null) {\n                        result = ShortHelper.BoxedValues.boxedValues_$LI$()[rebase] = new ShortHelper(s);\n                    }\n                    return result;\n                }\n                return new ShortHelper(s);\n            };\n            ShortHelper.valueOf$java_lang_String = function (s) {\n                return ShortHelper.valueOf(s, 10);\n            };\n            ShortHelper.valueOf = function (s, radix) {\n                if (((typeof s === 'string') || s === null) && ((typeof radix === 'number') || radix === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return ShortHelper.valueOf(ShortHelper.parseShort(s, radix));\n                    })();\n                }\n                else if (((typeof s === 'string') || s === null) && radix === undefined) {\n                    return javaemul.internal.ShortHelper.valueOf$java_lang_String(s);\n                }\n                else if (((typeof s === 'number') || s === null) && radix === undefined) {\n                    return javaemul.internal.ShortHelper.valueOf$short(s);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            ShortHelper.prototype.byteValue = function () {\n                return (this.value | 0);\n            };\n            ShortHelper.prototype.compareTo = function (b) {\n                var _this = this;\n                if (((b != null && b instanceof javaemul.internal.ShortHelper) || b === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return ShortHelper.compare(_this.value, b.value);\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            ShortHelper.prototype.doubleValue = function () {\n                return this.value;\n            };\n            ShortHelper.prototype.equals = function (o) {\n                return (o != null && o instanceof javaemul.internal.ShortHelper) && (o.value === this.value);\n            };\n            ShortHelper.prototype.floatValue = function () {\n                return this.value;\n            };\n            ShortHelper.prototype.hashCode = function () {\n                return ShortHelper.hashCode(this.value);\n            };\n            ShortHelper.prototype.intValue = function () {\n                return this.value;\n            };\n            ShortHelper.prototype.longValue = function () {\n                return this.value;\n            };\n            ShortHelper.prototype.shortValue = function () {\n                return this.value;\n            };\n            ShortHelper.prototype.toString = function () {\n                return ShortHelper.toString(this.value);\n            };\n            ShortHelper.SIZE = 16;\n            return ShortHelper;\n        }(javaemul.internal.NumberHelper));\n        internal.ShortHelper = ShortHelper;\n        ShortHelper[\"__class\"] = \"javaemul.internal.ShortHelper\";\n        ShortHelper[\"__interfaces\"] = [\"java.lang.Comparable\", \"java.io.Serializable\"];\n        var ShortHelper;\n        (function (ShortHelper) {\n            /**\n             * Use nested class to avoid clinit on outer.\n             */\n            var BoxedValues = (function () {\n                function BoxedValues() {\n                }\n                BoxedValues.boxedValues_$LI$ = function () { if (BoxedValues.boxedValues == null)\n                    BoxedValues.boxedValues = new Array(256); return BoxedValues.boxedValues; };\n                ;\n                return BoxedValues;\n            }());\n            ShortHelper.BoxedValues = BoxedValues;\n            BoxedValues[\"__class\"] = \"javaemul.internal.ShortHelper.BoxedValues\";\n        })(ShortHelper = internal.ShortHelper || (internal.ShortHelper = {}));\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var io;\n    (function (io) {\n        /**\n         * @skip\n         */\n        var PrintStream = (function (_super) {\n            __extends(PrintStream, _super);\n            function PrintStream(out) {\n                _super.call(this, out);\n            }\n            PrintStream.prototype.print$boolean = function (x) {\n            };\n            PrintStream.prototype.print$char = function (x) {\n            };\n            PrintStream.prototype.print = function (x) {\n                if (((x != null && x instanceof Array) || x === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                    })();\n                }\n                else if (((typeof x === 'string') || x === null)) {\n                    return this.print$java_lang_String(x);\n                }\n                else if (((typeof x === 'boolean') || x === null)) {\n                    return this.print$boolean(x);\n                }\n                else if (((typeof x === 'string') || x === null)) {\n                    return this.print$char(x);\n                }\n                else if (((typeof x === 'number') || x === null)) {\n                    return this.print$int(x);\n                }\n                else if (((typeof x === 'number') || x === null)) {\n                    return this.print$long(x);\n                }\n                else if (((typeof x === 'number') || x === null)) {\n                    return this.print$float(x);\n                }\n                else if (((typeof x === 'number') || x === null)) {\n                    return this.print$double(x);\n                }\n                else if (((x != null) || x === null)) {\n                    return this.print$java_lang_Object(x);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            PrintStream.prototype.print$double = function (x) {\n            };\n            PrintStream.prototype.print$float = function (x) {\n            };\n            PrintStream.prototype.print$int = function (x) {\n            };\n            PrintStream.prototype.print$long = function (x) {\n            };\n            PrintStream.prototype.print$java_lang_Object = function (x) {\n            };\n            PrintStream.prototype.print$java_lang_String = function (s) {\n            };\n            PrintStream.prototype.println$ = function () {\n            };\n            PrintStream.prototype.println$boolean = function (x) {\n            };\n            PrintStream.prototype.println$char = function (x) {\n            };\n            PrintStream.prototype.println = function (x) {\n                if (((x != null && x instanceof Array) || x === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                    })();\n                }\n                else if (((typeof x === 'string') || x === null)) {\n                    return this.println$java_lang_String(x);\n                }\n                else if (((typeof x === 'boolean') || x === null)) {\n                    return this.println$boolean(x);\n                }\n                else if (((typeof x === 'string') || x === null)) {\n                    return this.println$char(x);\n                }\n                else if (((typeof x === 'number') || x === null)) {\n                    return this.println$int(x);\n                }\n                else if (((typeof x === 'number') || x === null)) {\n                    return this.println$long(x);\n                }\n                else if (((typeof x === 'number') || x === null)) {\n                    return this.println$float(x);\n                }\n                else if (((typeof x === 'number') || x === null)) {\n                    return this.println$double(x);\n                }\n                else if (((x != null) || x === null)) {\n                    return this.println$java_lang_Object(x);\n                }\n                else if (x === undefined) {\n                    return this.println$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            PrintStream.prototype.println$double = function (x) {\n            };\n            PrintStream.prototype.println$float = function (x) {\n            };\n            PrintStream.prototype.println$int = function (x) {\n            };\n            PrintStream.prototype.println$long = function (x) {\n            };\n            PrintStream.prototype.println$java_lang_Object = function (x) {\n            };\n            PrintStream.prototype.println$java_lang_String = function (s) {\n            };\n            return PrintStream;\n        }(java.io.FilterOutputStream));\n        io.PrintStream = PrintStream;\n        PrintStream[\"__class\"] = \"java.io.PrintStream\";\n        PrintStream[\"__interfaces\"] = [\"java.io.Closeable\", \"java.lang.AutoCloseable\", \"java.io.Flushable\"];\n    })(io = java.io || (java.io = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var io;\n    (function (io) {\n        /**\n         * A character encoding is not supported - <a\n         * href=\"http://java.sun.com/javase/6/docs/api/java/io/UnsupportedEncodingException.html\">[Sun's\n         * docs]</a>.\n         */\n        var UnsupportedEncodingException = (function (_super) {\n            __extends(UnsupportedEncodingException, _super);\n            function UnsupportedEncodingException(msg) {\n                if (((typeof msg === 'string') || msg === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, msg);\n                }\n                else if (msg === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return UnsupportedEncodingException;\n        }(java.io.IOException));\n        io.UnsupportedEncodingException = UnsupportedEncodingException;\n        UnsupportedEncodingException[\"__class\"] = \"java.io.UnsupportedEncodingException\";\n        UnsupportedEncodingException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(io = java.io || (java.io = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var io;\n    (function (io) {\n        /**\n         * See <a\n         * href=\"https://docs.oracle.com/javase/8/docs/api/java/io/UncheckedIOException.html\">the\n         * official Java API doc</a> for details.\n         */\n        var UncheckedIOException = (function (_super) {\n            __extends(UncheckedIOException, _super);\n            function UncheckedIOException(message, cause) {\n                if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof java.io.IOException) || cause === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (((message != null && message instanceof java.io.IOException) || message === null) && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var cause_5 = __args[0];\n                    _super.call(this, javaemul.internal.InternalPreconditions.checkNotNull(cause_5));\n                    this.message = javaemul.internal.InternalPreconditions.checkNotNull(cause_5);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            UncheckedIOException.prototype.getCause = function () {\n                return null;\n            };\n            return UncheckedIOException;\n        }(Error));\n        io.UncheckedIOException = UncheckedIOException;\n        UncheckedIOException[\"__class\"] = \"java.io.UncheckedIOException\";\n        UncheckedIOException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(io = java.io || (java.io = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        var annotation;\n        (function (annotation) {\n            /**\n             * Indicates an attempt to access an element of an annotation that has changed\n             * since it was compiled or serialized <a\n             * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/annotation/AnnotationTypeMismatchException.html\">[Sun\n             * docs]</a>.\n             */\n            var AnnotationTypeMismatchException = (function (_super) {\n                __extends(AnnotationTypeMismatchException, _super);\n                function AnnotationTypeMismatchException() {\n                    _super.call(this);\n                }\n                return AnnotationTypeMismatchException;\n            }(Error));\n            annotation.AnnotationTypeMismatchException = AnnotationTypeMismatchException;\n            AnnotationTypeMismatchException[\"__class\"] = \"java.lang.annotation.AnnotationTypeMismatchException\";\n            AnnotationTypeMismatchException[\"__interfaces\"] = [\"java.io.Serializable\"];\n        })(annotation = lang.annotation || (lang.annotation = {}));\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        var annotation;\n        (function (annotation) {\n            /**\n             * Indicates an attempt to access an element of an annotation that was added\n             * since it was compiled or serialized <a\n             * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/annotation/IncompleteAnnotationException.html\">[Sun\n             * docs]</a>.\n             */\n            var IncompleteAnnotationException = (function (_super) {\n                __extends(IncompleteAnnotationException, _super);\n                function IncompleteAnnotationException(annotationType, elementName) {\n                    _super.call(this, \"Incomplete annotation: trying to access \" + elementName + \" on \" + annotationType);\n                    this.message = \"Incomplete annotation: trying to access \" + elementName + \" on \" + annotationType;\n                    this.__annotationType = annotationType;\n                    this.__elementName = elementName;\n                }\n                IncompleteAnnotationException.prototype.annotationType = function () {\n                    return this.__annotationType;\n                };\n                IncompleteAnnotationException.prototype.elementName = function () {\n                    return this.__elementName;\n                };\n                return IncompleteAnnotationException;\n            }(Error));\n            annotation.IncompleteAnnotationException = IncompleteAnnotationException;\n            IncompleteAnnotationException[\"__class\"] = \"java.lang.annotation.IncompleteAnnotationException\";\n            IncompleteAnnotationException[\"__interfaces\"] = [\"java.io.Serializable\"];\n        })(annotation = lang.annotation || (lang.annotation = {}));\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * NOTE: in GWT this is only thrown for division by zero on longs and\n         * BigInteger/BigDecimal.\n         * <p>\n         * See <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/ArithmeticException.html\">the\n         * official Java API doc</a> for details.\n         */\n        var ArithmeticException = (function (_super) {\n            __extends(ArithmeticException, _super);\n            function ArithmeticException(explanation) {\n                if (((typeof explanation === 'string') || explanation === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, explanation);\n                    this.message = explanation;\n                }\n                else if (explanation === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return ArithmeticException;\n        }(Error));\n        lang.ArithmeticException = ArithmeticException;\n        ArithmeticException[\"__class\"] = \"java.lang.ArithmeticException\";\n        ArithmeticException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * See <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/ArrayStoreException.html\">the\n         * official Java API doc</a> for details.\n         */\n        var ArrayStoreException = (function (_super) {\n            __extends(ArrayStoreException, _super);\n            function ArrayStoreException(message) {\n                if (((typeof message === 'string') || message === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (message === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return ArrayStoreException;\n        }(Error));\n        lang.ArrayStoreException = ArrayStoreException;\n        ArrayStoreException[\"__class\"] = \"java.lang.ArrayStoreException\";\n        ArrayStoreException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * Indicates failure to cast one type into another.\n         */\n        var ClassCastException = (function (_super) {\n            __extends(ClassCastException, _super);\n            function ClassCastException(message) {\n                if (((typeof message === 'string') || message === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (message === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return ClassCastException;\n        }(Error));\n        lang.ClassCastException = ClassCastException;\n        ClassCastException[\"__class\"] = \"java.lang.ClassCastException\";\n        ClassCastException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * See <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/IllegalArgumentException.html\">the\n         * official Java API doc</a> for details.\n         */\n        var IllegalArgumentException = (function (_super) {\n            __extends(IllegalArgumentException, _super);\n            function IllegalArgumentException(message, cause) {\n                if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof Error) || cause === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (((typeof message === 'string') || message === null) && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (((message != null && message instanceof Error) || message === null) && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var cause_6 = __args[0];\n                    _super.call(this, cause_6);\n                    this.message = cause_6;\n                }\n                else if (message === undefined && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return IllegalArgumentException;\n        }(Error));\n        lang.IllegalArgumentException = IllegalArgumentException;\n        IllegalArgumentException[\"__class\"] = \"java.lang.IllegalArgumentException\";\n        IllegalArgumentException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * Indicates that an objet was in an invalid state during an attempted\n         * operation.\n         */\n        var IllegalStateException = (function (_super) {\n            __extends(IllegalStateException, _super);\n            function IllegalStateException(message, cause) {\n                if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof Error) || cause === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (((typeof message === 'string') || message === null) && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var s = __args[0];\n                    _super.call(this, s);\n                    this.message = s;\n                }\n                else if (((message != null && message instanceof Error) || message === null) && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var cause_7 = __args[0];\n                    _super.call(this, cause_7);\n                    this.message = cause_7;\n                }\n                else if (message === undefined && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return IllegalStateException;\n        }(Error));\n        lang.IllegalStateException = IllegalStateException;\n        IllegalStateException[\"__class\"] = \"java.lang.IllegalStateException\";\n        IllegalStateException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * See <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/IndexOutOfBoundsException.html\">the\n         * official Java API doc</a> for details.\n         */\n        var IndexOutOfBoundsException = (function (_super) {\n            __extends(IndexOutOfBoundsException, _super);\n            function IndexOutOfBoundsException(message) {\n                if (((typeof message === 'string') || message === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (message === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return IndexOutOfBoundsException;\n        }(Error));\n        lang.IndexOutOfBoundsException = IndexOutOfBoundsException;\n        IndexOutOfBoundsException[\"__class\"] = \"java.lang.IndexOutOfBoundsException\";\n        IndexOutOfBoundsException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * See <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/NegativeArraySizeException.html\">the\n         * official Java API doc</a> for details.\n         */\n        var NegativeArraySizeException = (function (_super) {\n            __extends(NegativeArraySizeException, _super);\n            function NegativeArraySizeException(message) {\n                if (((typeof message === 'string') || message === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (message === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return NegativeArraySizeException;\n        }(Error));\n        lang.NegativeArraySizeException = NegativeArraySizeException;\n        NegativeArraySizeException[\"__class\"] = \"java.lang.NegativeArraySizeException\";\n        NegativeArraySizeException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * See <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/NullPointerException.html\">the\n         * official Java API doc</a> for details.\n         */\n        var NullPointerException = (function (_super) {\n            __extends(NullPointerException, _super);\n            function NullPointerException(message) {\n                if (((typeof message === 'string') || message === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (message === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            NullPointerException.prototype.createError = function (msg) {\n                return new TypeError(msg);\n            };\n            return NullPointerException;\n        }(Error));\n        lang.NullPointerException = NullPointerException;\n        NullPointerException[\"__class\"] = \"java.lang.NullPointerException\";\n        NullPointerException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * See <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/UnsupportedOperationException.html\">the\n         * official Java API doc</a> for details.\n         */\n        var UnsupportedOperationException = (function (_super) {\n            __extends(UnsupportedOperationException, _super);\n            function UnsupportedOperationException(message, cause) {\n                if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof Error) || cause === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (((typeof message === 'string') || message === null) && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (((message != null && message instanceof Error) || message === null) && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var cause_8 = __args[0];\n                    _super.call(this, cause_8);\n                    this.message = cause_8;\n                }\n                else if (message === undefined && cause === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return UnsupportedOperationException;\n        }(Error));\n        lang.UnsupportedOperationException = UnsupportedOperationException;\n        UnsupportedOperationException[\"__class\"] = \"java.lang.UnsupportedOperationException\";\n        UnsupportedOperationException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * See <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/ConcurrentModificationException.html\">the\n         * official Java API doc</a> for details.\n         */\n        var ConcurrentModificationException = (function (_super) {\n            __extends(ConcurrentModificationException, _super);\n            function ConcurrentModificationException(message) {\n                if (((typeof message === 'string') || message === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                    this.message = message;\n                }\n                else if (message === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return ConcurrentModificationException;\n        }(Error));\n        util.ConcurrentModificationException = ConcurrentModificationException;\n        ConcurrentModificationException[\"__class\"] = \"java.util.ConcurrentModificationException\";\n        ConcurrentModificationException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * See <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/EmptyStackException.html\">the\n         * official Java API doc</a> for details.\n         */\n        var EmptyStackException = (function (_super) {\n            __extends(EmptyStackException, _super);\n            function EmptyStackException() {\n                _super.call(this);\n            }\n            return EmptyStackException;\n        }(Error));\n        util.EmptyStackException = EmptyStackException;\n        EmptyStackException[\"__class\"] = \"java.util.EmptyStackException\";\n        EmptyStackException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * See <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/MissingResourceException.html\">the\n         * official Java API doc</a> for details.\n         */\n        var MissingResourceException = (function (_super) {\n            __extends(MissingResourceException, _super);\n            function MissingResourceException(s, className, key) {\n                _super.call(this, s);\n                this.message = s;\n                this.key = key;\n                this.className = className;\n            }\n            MissingResourceException.prototype.getClassName = function () {\n                return this.className;\n            };\n            MissingResourceException.prototype.getKey = function () {\n                return this.key;\n            };\n            return MissingResourceException;\n        }(Error));\n        util.MissingResourceException = MissingResourceException;\n        MissingResourceException[\"__class\"] = \"java.util.MissingResourceException\";\n        MissingResourceException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * See <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/NoSuchElementException.html\">the\n         * official Java API doc</a> for details.\n         */\n        var NoSuchElementException = (function (_super) {\n            __extends(NoSuchElementException, _super);\n            function NoSuchElementException(s) {\n                if (((typeof s === 'string') || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, s);\n                    this.message = s;\n                }\n                else if (s === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return NoSuchElementException;\n        }(Error));\n        util.NoSuchElementException = NoSuchElementException;\n        NoSuchElementException[\"__class\"] = \"java.util.NoSuchElementException\";\n        NoSuchElementException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var security;\n    (function (security) {\n        /**\n         * A generic security exception type - <a\n         * href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/security/DigestException.html\">[Sun's\n         * docs]</a>.\n         */\n        var DigestException = (function (_super) {\n            __extends(DigestException, _super);\n            function DigestException(msg) {\n                if (((typeof msg === 'string') || msg === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, msg);\n                }\n                else if (msg === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return DigestException;\n        }(java.security.GeneralSecurityException));\n        security.DigestException = DigestException;\n        DigestException[\"__class\"] = \"java.security.DigestException\";\n        DigestException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(security = java.security || (java.security = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var security;\n    (function (security) {\n        /**\n         * A generic security exception type - <a\n         * href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/security/NoSuchAlgorithmException.html\">[Sun's\n         * docs]</a>.\n         */\n        var NoSuchAlgorithmException = (function (_super) {\n            __extends(NoSuchAlgorithmException, _super);\n            function NoSuchAlgorithmException(msg) {\n                if (((typeof msg === 'string') || msg === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, msg);\n                }\n                else if (msg === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return NoSuchAlgorithmException;\n        }(java.security.GeneralSecurityException));\n        security.NoSuchAlgorithmException = NoSuchAlgorithmException;\n        NoSuchAlgorithmException[\"__class\"] = \"java.security.NoSuchAlgorithmException\";\n        NoSuchAlgorithmException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(security = java.security || (java.security = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var nio;\n    (function (nio) {\n        var charset;\n        (function (charset) {\n            /**\n             * Constant definitions for the standard Charsets.\n             */\n            var StandardCharsets = (function () {\n                function StandardCharsets() {\n                }\n                StandardCharsets.ISO_8859_1_$LI$ = function () { if (StandardCharsets.ISO_8859_1 == null)\n                    StandardCharsets.ISO_8859_1 = javaemul.internal.EmulatedCharset.ISO_8859_1_$LI$(); return StandardCharsets.ISO_8859_1; };\n                ;\n                StandardCharsets.UTF_8_$LI$ = function () { if (StandardCharsets.UTF_8 == null)\n                    StandardCharsets.UTF_8 = javaemul.internal.EmulatedCharset.UTF_8_$LI$(); return StandardCharsets.UTF_8; };\n                ;\n                return StandardCharsets;\n            }());\n            charset.StandardCharsets = StandardCharsets;\n            StandardCharsets[\"__class\"] = \"java.nio.charset.StandardCharsets\";\n        })(charset = nio.charset || (nio.charset = {}));\n    })(nio = java.nio || (java.nio = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Skeletal implementation of the List interface. <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/AbstractSequentialList.html\">[Sun\n         * docs]</a>\n         *\n         * @param <E> element type.\n         */\n        var AbstractSequentialList = (function (_super) {\n            __extends(AbstractSequentialList, _super);\n            function AbstractSequentialList() {\n                _super.call(this);\n            }\n            AbstractSequentialList.prototype.add = function (index, element) {\n                var _this = this;\n                if (((typeof index === 'number') || index === null) && ((element != null) || element === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var iter = _this.listIterator(index);\n                        iter.add(element);\n                    })();\n                }\n                else if (((index != null) || index === null) && element === undefined) {\n                    return this.add$java_lang_Object(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractSequentialList.prototype.addAll = function (index, c) {\n                var _this = this;\n                if (((typeof index === 'number') || index === null) && ((c != null && (c[\"__interfaces\"] != null && c[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || c.constructor != null && c.constructor[\"__interfaces\"] != null && c.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || c === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        javaemul.internal.InternalPreconditions.checkNotNull(c);\n                        var modified = false;\n                        var iter = _this.listIterator(index);\n                        for (var index136 = c.iterator(); index136.hasNext();) {\n                            var e = index136.next();\n                            {\n                                iter.add(e);\n                                modified = true;\n                            }\n                        }\n                        return modified;\n                    })();\n                }\n                else if (((index != null && (index[\"__interfaces\"] != null && index[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || index.constructor != null && index.constructor[\"__interfaces\"] != null && index.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || index === null) && c === undefined) {\n                    return this.addAll$java_util_Collection(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractSequentialList.prototype.get = function (index) {\n                var iter = this.listIterator(index);\n                try {\n                    return iter.next();\n                }\n                catch (e) {\n                    throw new java.lang.IndexOutOfBoundsException(\"Can\\'t get element \" + index);\n                }\n                ;\n            };\n            AbstractSequentialList.prototype.iterator = function () {\n                return this.listIterator();\n            };\n            AbstractSequentialList.prototype.listIterator = function (index) {\n                if (((typeof index === 'number') || index === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return null;\n                }\n                else if (index === undefined) {\n                    return this.listIterator$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractSequentialList.prototype.remove = function (index) {\n                var _this = this;\n                if (((typeof index === 'number') || index === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var iter = _this.listIterator(index);\n                        try {\n                            var old = iter.next();\n                            iter.remove();\n                            return old;\n                        }\n                        catch (e) {\n                            throw new java.lang.IndexOutOfBoundsException(\"Can\\'t remove element \" + index);\n                        }\n                        ;\n                    })();\n                }\n                else if (((index != null) || index === null)) {\n                    return this.remove$java_lang_Object(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractSequentialList.prototype.set = function (index, element) {\n                var iter = this.listIterator(index);\n                try {\n                    var old = iter.next();\n                    iter.set(element);\n                    return old;\n                }\n                catch (e) {\n                    throw new java.lang.IndexOutOfBoundsException(\"Can\\'t set element \" + index);\n                }\n                ;\n            };\n            return AbstractSequentialList;\n        }(java.util.AbstractList));\n        util.AbstractSequentialList = AbstractSequentialList;\n        AbstractSequentialList[\"__class\"] = \"java.util.AbstractSequentialList\";\n        AbstractSequentialList[\"__interfaces\"] = [\"java.util.List\", \"java.util.Collection\", \"java.lang.Iterable\"];\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Resizeable array implementation of the List interface. <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/ArrayList.html\">[Sun\n         * docs]</a>\n         *\n         * <p>\n         * This implementation differs from JDK 1.5 <code>ArrayList</code> in terms of\n         * capacity management. There is no speed advantage to pre-allocating array\n         * sizes in JavaScript, so this implementation does not include any of the\n         * capacity and \"growth increment\" concepts in the standard ArrayList class.\n         * Although <code>ArrayList(int)</code> accepts a value for the initial\n         * capacity of the array, this constructor simply delegates to\n         * <code>ArrayList()</code>. It is only present for compatibility with JDK\n         * 1.5's API.\n         * </p>\n         *\n         * @param <E> the element type.\n         */\n        var ArrayList = (function (_super) {\n            __extends(ArrayList, _super);\n            function ArrayList(c) {\n                var _this = this;\n                if (((c != null && (c[\"__interfaces\"] != null && c[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || c.constructor != null && c.constructor[\"__interfaces\"] != null && c.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || c === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    (function () {\n                        _this.array = new Array(0);\n                        javaemul.internal.ArrayHelper.insertTo(_this.array, 0, c.toArray());\n                    })();\n                }\n                else if (((typeof c === 'number') || c === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var initialCapacity_1 = __args[0];\n                    _super.call(this);\n                    (function () {\n                        javaemul.internal.InternalPreconditions.checkArgument(initialCapacity_1 >= 0, \"Initial capacity must not be negative\");\n                        _this.array = new Array(0);\n                    })();\n                }\n                else if (c === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    (function () {\n                        _this.array = new Array(0);\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            ArrayList.prototype.forEach = function (action) {\n                javaemul.internal.InternalPreconditions.checkNotNull(action);\n                for (var index137 = this.iterator(); index137.hasNext();) {\n                    var t = index137.next();\n                    {\n                        action(t);\n                    }\n                }\n            };\n            ArrayList.prototype.add$java_lang_Object = function (o) {\n                this.array[this.array.length] = o;\n                return true;\n            };\n            ArrayList.prototype.add = function (index, o) {\n                var _this = this;\n                if (((typeof index === 'number') || index === null) && ((o != null) || o === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        javaemul.internal.InternalPreconditions.checkPositionIndex(index, _this.array.length);\n                        javaemul.internal.ArrayHelper.insertTo(_this.array, index, o);\n                    })();\n                }\n                else if (((index != null) || index === null) && o === undefined) {\n                    return this.add$java_lang_Object(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            ArrayList.prototype.addAll$java_util_Collection = function (c) {\n                var cArray = c.toArray();\n                var len = cArray.length;\n                if (len === 0) {\n                    return false;\n                }\n                javaemul.internal.ArrayHelper.insertTo(this.array, this.array.length, cArray);\n                return true;\n            };\n            ArrayList.prototype.addAll = function (index, c) {\n                var _this = this;\n                if (((typeof index === 'number') || index === null) && ((c != null && (c[\"__interfaces\"] != null && c[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || c.constructor != null && c.constructor[\"__interfaces\"] != null && c.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || c === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        javaemul.internal.InternalPreconditions.checkPositionIndex(index, _this.array.length);\n                        var cArray = c.toArray();\n                        var len = cArray.length;\n                        if (len === 0) {\n                            return false;\n                        }\n                        javaemul.internal.ArrayHelper.insertTo(_this.array, index, cArray);\n                        return true;\n                    })();\n                }\n                else if (((index != null && (index[\"__interfaces\"] != null && index[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || index.constructor != null && index.constructor[\"__interfaces\"] != null && index.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || index === null) && c === undefined) {\n                    return this.addAll$java_util_Collection(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            ArrayList.prototype.clear = function () {\n                this.array = new Array(0);\n            };\n            ArrayList.prototype.clone = function () {\n                return (new ArrayList(this));\n            };\n            ArrayList.prototype.contains = function (o) {\n                return (this.indexOf(o) !== -1);\n            };\n            ArrayList.prototype.ensureCapacity = function (ignored) {\n            };\n            ArrayList.prototype.get = function (index) {\n                javaemul.internal.InternalPreconditions.checkElementIndex(index, this.array.length);\n                return this.array[index];\n            };\n            ArrayList.prototype.indexOf$java_lang_Object = function (o) {\n                return this.indexOf(o, 0);\n            };\n            ArrayList.prototype.iterator = function () {\n                return new ArrayList.ArrayList$0(this);\n            };\n            ArrayList.prototype.isEmpty = function () {\n                return this.array.length === 0;\n            };\n            ArrayList.prototype.lastIndexOf$java_lang_Object = function (o) {\n                return this.lastIndexOf(o, this.size() - 1);\n            };\n            ArrayList.prototype.remove = function (index) {\n                var _this = this;\n                if (((typeof index === 'number') || index === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var previous = _this.get(index);\n                        javaemul.internal.ArrayHelper.removeFrom(_this.array, index, 1);\n                        return previous;\n                    })();\n                }\n                else if (((index != null) || index === null)) {\n                    return this.remove$java_lang_Object(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            ArrayList.prototype.remove$java_lang_Object = function (o) {\n                var i = this.indexOf(o);\n                if (i === -1) {\n                    return false;\n                }\n                this.remove(i);\n                return true;\n            };\n            ArrayList.prototype.set = function (index, o) {\n                var previous = this.get(index);\n                this.array[index] = o;\n                return previous;\n            };\n            ArrayList.prototype.size = function () {\n                return this.array.length;\n            };\n            ArrayList.prototype.toArray$ = function () {\n                return javaemul.internal.ArrayHelper.clone(this.array, 0, this.array.length);\n            };\n            ArrayList.prototype.toArray = function (out) {\n                var _this = this;\n                if (((out != null && out instanceof Array) || out === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var size = _this.array.length;\n                        if (out.length < size) {\n                            out = javaemul.internal.ArrayHelper.createFrom(out, size);\n                        }\n                        for (var i = 0; i < size; ++i) {\n                            out[i] = _this.array[i];\n                        }\n                        if (out.length > size) {\n                            out[size] = null;\n                        }\n                        return out;\n                    })();\n                }\n                else if (out === undefined) {\n                    return this.toArray$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            ArrayList.prototype.trimToSize = function () {\n            };\n            ArrayList.prototype.removeRange = function (fromIndex, endIndex) {\n                javaemul.internal.InternalPreconditions.checkPositionIndexes(fromIndex, endIndex, this.array.length);\n                var count = endIndex - fromIndex;\n                javaemul.internal.ArrayHelper.removeFrom(this.array, fromIndex, count);\n            };\n            /**\n             * Used by Vector.\n             */\n            ArrayList.prototype.indexOf = function (o, index) {\n                var _this = this;\n                if (((o != null) || o === null) && ((typeof index === 'number') || index === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        for (; index < _this.array.length; ++index) {\n                            if (java.util.Objects.equals(o, _this.array[index])) {\n                                return index;\n                            }\n                        }\n                        return -1;\n                    })();\n                }\n                else if (((o != null) || o === null) && index === undefined) {\n                    return this.indexOf$java_lang_Object(o);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Used by Vector.\n             */\n            ArrayList.prototype.lastIndexOf = function (o, index) {\n                var _this = this;\n                if (((o != null) || o === null) && ((typeof index === 'number') || index === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        for (; index >= 0; --index) {\n                            if (java.util.Objects.equals(o, _this.array[index])) {\n                                return index;\n                            }\n                        }\n                        return -1;\n                    })();\n                }\n                else if (((o != null) || o === null) && index === undefined) {\n                    return this.lastIndexOf$java_lang_Object(o);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            ArrayList.prototype.setSize = function (newSize) {\n                javaemul.internal.ArrayHelper.setLength(this.array, newSize);\n            };\n            return ArrayList;\n        }(java.util.AbstractList));\n        util.ArrayList = ArrayList;\n        ArrayList[\"__class\"] = \"java.util.ArrayList\";\n        ArrayList[\"__interfaces\"] = [\"java.util.RandomAccess\", \"java.util.List\", \"java.lang.Cloneable\", \"java.util.Collection\", \"java.lang.Iterable\", \"java.io.Serializable\"];\n        var ArrayList;\n        (function (ArrayList) {\n            var ArrayList$0 = (function () {\n                function ArrayList$0(__parent) {\n                    this.__parent = __parent;\n                    this.i = 0;\n                    this.last = -1;\n                }\n                ArrayList$0.prototype.forEachRemaining = function (consumer) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(consumer);\n                    while ((this.hasNext())) {\n                        consumer(this.next());\n                    }\n                    ;\n                };\n                ArrayList$0.prototype.hasNext = function () {\n                    return this.i < this.__parent.array.length;\n                };\n                ArrayList$0.prototype.next = function () {\n                    javaemul.internal.InternalPreconditions.checkElement(this.hasNext());\n                    this.last = this.i++;\n                    return this.__parent.array[this.last];\n                };\n                ArrayList$0.prototype.remove = function () {\n                    javaemul.internal.InternalPreconditions.checkState(this.last !== -1);\n                    this.__parent.remove(this.i = this.last);\n                    this.last = -1;\n                };\n                return ArrayList$0;\n            }());\n            ArrayList.ArrayList$0 = ArrayList$0;\n        })(ArrayList = util.ArrayList || (util.ArrayList = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Utility methods related to native arrays. <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/Arrays.html\">[Sun\n         * docs]</a>\n         */\n        var Arrays = (function () {\n            function Arrays() {\n            }\n            Arrays.asList = function () {\n                var array = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    array[_i - 0] = arguments[_i];\n                }\n                return (new Arrays.ArrayList(array));\n            };\n            /**\n             * Perform a binary search on a sorted byte array.\n             *\n             * @param sortedArray byte array to search\n             * @param key value to search for\n             * @return the index of an element with a matching value, or a negative number\n             * which is the index of the next larger value (or just past the end\n             * of the array if the searched value is larger than all elements in\n             * the array) minus 1 (to ensure error returns are negative)\n             */\n            Arrays.binarySearch$byte_A$byte = function (sortedArray, key) {\n                var low = 0;\n                var high = sortedArray.length - 1;\n                while ((low <= high)) {\n                    var mid = low + ((high - low) >> 1);\n                    var midVal = sortedArray[mid];\n                    if (midVal < key) {\n                        low = mid + 1;\n                    }\n                    else if (midVal > key) {\n                        high = mid - 1;\n                    }\n                    else {\n                        return mid;\n                    }\n                }\n                ;\n                return -low - 1;\n            };\n            /**\n             * Perform a binary search on a sorted char array.\n             *\n             * @param a char array to search\n             * @param key value to search for\n             * @return the index of an element with a matching value, or a negative number\n             * which is the index of the next larger value (or just past the end\n             * of the array if the searched value is larger than all elements in\n             * the array) minus 1 (to ensure error returns are negative)\n             */\n            Arrays.binarySearch$char_A$char = function (a, key) {\n                var low = 0;\n                var high = a.length - 1;\n                while ((low <= high)) {\n                    var mid = low + ((high - low) >> 1);\n                    var midVal = a[mid];\n                    if ((midVal).charCodeAt(0) < (key).charCodeAt(0)) {\n                        low = mid + 1;\n                    }\n                    else if ((midVal).charCodeAt(0) > (key).charCodeAt(0)) {\n                        high = mid - 1;\n                    }\n                    else {\n                        return mid;\n                    }\n                }\n                ;\n                return -low - 1;\n            };\n            /**\n             * Perform a binary search on a sorted double array.\n             *\n             * @param sortedArray double array to search\n             * @param key value to search for\n             * @return the index of an element with a matching value, or a negative number\n             * which is the index of the next larger value (or just past the end\n             * of the array if the searched value is larger than all elements in\n             * the array) minus 1 (to ensure error returns are negative)\n             */\n            Arrays.binarySearch$double_A$double = function (sortedArray, key) {\n                var low = 0;\n                var high = sortedArray.length - 1;\n                while ((low <= high)) {\n                    var mid = low + ((high - low) >> 1);\n                    var midVal = sortedArray[mid];\n                    if (midVal < key) {\n                        low = mid + 1;\n                    }\n                    else if (midVal > key) {\n                        high = mid - 1;\n                    }\n                    else {\n                        return mid;\n                    }\n                }\n                ;\n                return -low - 1;\n            };\n            /**\n             * Perform a binary search on a sorted float array.\n             *\n             * Note that some underlying JavaScript interpreters do not actually implement\n             * floats (using double instead), so you may get slightly different behavior\n             * regarding values that are very close (or equal) since conversion errors\n             * to/from double may change the values slightly.\n             *\n             * @param sortedArray float array to search\n             * @param key value to search for\n             * @return the index of an element with a matching value, or a negative number\n             * which is the index of the next larger value (or just past the end\n             * of the array if the searched value is larger than all elements in\n             * the array) minus 1 (to ensure error returns are negative)\n             */\n            Arrays.binarySearch$float_A$float = function (sortedArray, key) {\n                var low = 0;\n                var high = sortedArray.length - 1;\n                while ((low <= high)) {\n                    var mid = low + ((high - low) >> 1);\n                    var midVal = sortedArray[mid];\n                    if (midVal < key) {\n                        low = mid + 1;\n                    }\n                    else if (midVal > key) {\n                        high = mid - 1;\n                    }\n                    else {\n                        return mid;\n                    }\n                }\n                ;\n                return -low - 1;\n            };\n            /**\n             * Perform a binary search on a sorted int array.\n             *\n             * @param sortedArray int array to search\n             * @param key value to search for\n             * @return the index of an element with a matching value, or a negative number\n             * which is the index of the next larger value (or just past the end\n             * of the array if the searched value is larger than all elements in\n             * the array) minus 1 (to ensure error returns are negative)\n             */\n            Arrays.binarySearch$int_A$int = function (sortedArray, key) {\n                var low = 0;\n                var high = sortedArray.length - 1;\n                while ((low <= high)) {\n                    var mid = low + ((high - low) >> 1);\n                    var midVal = sortedArray[mid];\n                    if (midVal < key) {\n                        low = mid + 1;\n                    }\n                    else if (midVal > key) {\n                        high = mid - 1;\n                    }\n                    else {\n                        return mid;\n                    }\n                }\n                ;\n                return -low - 1;\n            };\n            /**\n             * Perform a binary search on a sorted long array.\n             *\n             * Note that most underlying JavaScript interpreters do not actually implement\n             * longs, so the values must be stored in doubles instead. This means that\n             * certain legal values cannot be represented, and comparison of two unequal\n             * long values may result in unexpected results if they are not also\n             * representable as doubles.\n             *\n             * @param sortedArray long array to search\n             * @param key value to search for\n             * @return the index of an element with a matching value, or a negative number\n             * which is the index of the next larger value (or just past the end\n             * of the array if the searched value is larger than all elements in\n             * the array) minus 1 (to ensure error returns are negative)\n             */\n            Arrays.binarySearch$long_A$long = function (sortedArray, key) {\n                var low = 0;\n                var high = sortedArray.length - 1;\n                while ((low <= high)) {\n                    var mid = low + ((high - low) >> 1);\n                    var midVal = sortedArray[mid];\n                    if (midVal < key) {\n                        low = mid + 1;\n                    }\n                    else if (midVal > key) {\n                        high = mid - 1;\n                    }\n                    else {\n                        return mid;\n                    }\n                }\n                ;\n                return -low - 1;\n            };\n            /**\n             * Perform a binary search on a sorted object array, using natural ordering.\n             *\n             * @param sortedArray object array to search\n             * @param key value to search for\n             * @return the index of an element with a matching value, or a negative number\n             * which is the index of the next larger value (or just past the end\n             * of the array if the searched value is larger than all elements in\n             * the array) minus 1 (to ensure error returns are negative)\n             * @throws ClassCastException if <code>key</code> is not comparable to\n             * <code>sortedArray</code>'s elements.\n             */\n            Arrays.binarySearch$java_lang_Object_A$java_lang_Object = function (sortedArray, key) {\n                return Arrays.binarySearch(sortedArray, key, java.util.Comparators.natural());\n            };\n            /**\n             * Perform a binary search on a sorted short array.\n             *\n             * @param sortedArray short array to search\n             * @param key value to search for\n             * @return the index of an element with a matching value, or a negative number\n             * which is the index of the next larger value (or just past the end\n             * of the array if the searched value is larger than all elements in\n             * the array) minus 1 (to ensure error returns are negative)\n             */\n            Arrays.binarySearch$short_A$short = function (sortedArray, key) {\n                var low = 0;\n                var high = sortedArray.length - 1;\n                while ((low <= high)) {\n                    var mid = low + ((high - low) >> 1);\n                    var midVal = sortedArray[mid];\n                    if (midVal < key) {\n                        low = mid + 1;\n                    }\n                    else if (midVal > key) {\n                        high = mid - 1;\n                    }\n                    else {\n                        return mid;\n                    }\n                }\n                ;\n                return -low - 1;\n            };\n            /**\n             * Perform a binary search on a sorted object array, using a user-specified\n             * comparison function.\n             *\n             * @param sortedArray object array to search\n             * @param key value to search for\n             * @param comparator comparision function, <code>null</code> indicates\n             * <i>natural ordering</i> should be used.\n             * @return the index of an element with a matching value, or a negative number\n             * which is the index of the next larger value (or just past the end\n             * of the array if the searched value is larger than all elements in\n             * the array) minus 1 (to ensure error returns are negative)\n             * @throws ClassCastException if <code>key</code> and\n             * <code>sortedArray</code>'s elements cannot be compared by\n             * <code>comparator</code>.\n             */\n            Arrays.binarySearch = function (sortedArray, key, comparator) {\n                if (((sortedArray != null && sortedArray instanceof Array) || sortedArray === null) && ((key != null) || key === null) && ((comparator != null && (comparator[\"__interfaces\"] != null && comparator[\"__interfaces\"].indexOf(\"java.util.Comparator\") >= 0 || comparator.constructor != null && comparator.constructor[\"__interfaces\"] != null && comparator.constructor[\"__interfaces\"].indexOf(\"java.util.Comparator\") >= 0)) || comparator === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (comparator == null) {\n                            comparator = java.util.Comparators.natural();\n                        }\n                        var low = 0;\n                        var high = sortedArray.length - 1;\n                        while ((low <= high)) {\n                            var mid = low + ((high - low) >> 1);\n                            var midVal = sortedArray[mid];\n                            var compareResult = comparator.compare(midVal, key);\n                            if (compareResult < 0) {\n                                low = mid + 1;\n                            }\n                            else if (compareResult > 0) {\n                                high = mid - 1;\n                            }\n                            else {\n                                return mid;\n                            }\n                        }\n                        ;\n                        return -low - 1;\n                    })();\n                }\n                else if (((sortedArray != null && sortedArray instanceof Array) || sortedArray === null) && ((typeof key === 'number') || key === null) && comparator === undefined) {\n                    return java.util.Arrays.binarySearch$byte_A$byte(sortedArray, key);\n                }\n                else if (((sortedArray != null && sortedArray instanceof Array) || sortedArray === null) && ((typeof key === 'string') || key === null) && comparator === undefined) {\n                    return java.util.Arrays.binarySearch$char_A$char(sortedArray, key);\n                }\n                else if (((sortedArray != null && sortedArray instanceof Array) || sortedArray === null) && ((typeof key === 'number') || key === null) && comparator === undefined) {\n                    return java.util.Arrays.binarySearch$short_A$short(sortedArray, key);\n                }\n                else if (((sortedArray != null && sortedArray instanceof Array) || sortedArray === null) && ((typeof key === 'number') || key === null) && comparator === undefined) {\n                    return java.util.Arrays.binarySearch$int_A$int(sortedArray, key);\n                }\n                else if (((sortedArray != null && sortedArray instanceof Array) || sortedArray === null) && ((typeof key === 'number') || key === null) && comparator === undefined) {\n                    return java.util.Arrays.binarySearch$long_A$long(sortedArray, key);\n                }\n                else if (((sortedArray != null && sortedArray instanceof Array) || sortedArray === null) && ((typeof key === 'number') || key === null) && comparator === undefined) {\n                    return java.util.Arrays.binarySearch$float_A$float(sortedArray, key);\n                }\n                else if (((sortedArray != null && sortedArray instanceof Array) || sortedArray === null) && ((typeof key === 'number') || key === null) && comparator === undefined) {\n                    return java.util.Arrays.binarySearch$double_A$double(sortedArray, key);\n                }\n                else if (((sortedArray != null && sortedArray instanceof Array) || sortedArray === null) && ((key != null) || key === null) && comparator === undefined) {\n                    return java.util.Arrays.binarySearch$java_lang_Object_A$java_lang_Object(sortedArray, key);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Arrays.copyOf = function (original, newLength) {\n                if (((original != null && original instanceof Array) || original === null) && ((typeof newLength === 'number') || newLength === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        javaemul.internal.InternalPreconditions.checkArraySize(newLength);\n                        return Arrays.copyOfRange(original, 0, newLength);\n                    })();\n                }\n                else if (((original != null && original instanceof Array) || original === null) && ((typeof newLength === 'number') || newLength === null)) {\n                    return java.util.Arrays.copyOf$byte_A$int(original, newLength);\n                }\n                else if (((original != null && original instanceof Array) || original === null) && ((typeof newLength === 'number') || newLength === null)) {\n                    return java.util.Arrays.copyOf$char_A$int(original, newLength);\n                }\n                else if (((original != null && original instanceof Array) || original === null) && ((typeof newLength === 'number') || newLength === null)) {\n                    return java.util.Arrays.copyOf$double_A$int(original, newLength);\n                }\n                else if (((original != null && original instanceof Array) || original === null) && ((typeof newLength === 'number') || newLength === null)) {\n                    return java.util.Arrays.copyOf$float_A$int(original, newLength);\n                }\n                else if (((original != null && original instanceof Array) || original === null) && ((typeof newLength === 'number') || newLength === null)) {\n                    return java.util.Arrays.copyOf$int_A$int(original, newLength);\n                }\n                else if (((original != null && original instanceof Array) || original === null) && ((typeof newLength === 'number') || newLength === null)) {\n                    return java.util.Arrays.copyOf$long_A$int(original, newLength);\n                }\n                else if (((original != null && original instanceof Array) || original === null) && ((typeof newLength === 'number') || newLength === null)) {\n                    return java.util.Arrays.copyOf$short_A$int(original, newLength);\n                }\n                else if (((original != null && original instanceof Array) || original === null) && ((typeof newLength === 'number') || newLength === null)) {\n                    return java.util.Arrays.copyOf$java_lang_Object_A$int(original, newLength);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Arrays.copyOf$byte_A$int = function (original, newLength) {\n                javaemul.internal.InternalPreconditions.checkArraySize(newLength);\n                return Arrays.copyOfRange(original, 0, newLength);\n            };\n            Arrays.copyOf$char_A$int = function (original, newLength) {\n                javaemul.internal.InternalPreconditions.checkArraySize(newLength);\n                return Arrays.copyOfRange(original, 0, newLength);\n            };\n            Arrays.copyOf$double_A$int = function (original, newLength) {\n                javaemul.internal.InternalPreconditions.checkArraySize(newLength);\n                return Arrays.copyOfRange(original, 0, newLength);\n            };\n            Arrays.copyOf$float_A$int = function (original, newLength) {\n                javaemul.internal.InternalPreconditions.checkArraySize(newLength);\n                return Arrays.copyOfRange(original, 0, newLength);\n            };\n            Arrays.copyOf$int_A$int = function (original, newLength) {\n                javaemul.internal.InternalPreconditions.checkArraySize(newLength);\n                return Arrays.copyOfRange(original, 0, newLength);\n            };\n            Arrays.copyOf$long_A$int = function (original, newLength) {\n                javaemul.internal.InternalPreconditions.checkArraySize(newLength);\n                return Arrays.copyOfRange(original, 0, newLength);\n            };\n            Arrays.copyOf$short_A$int = function (original, newLength) {\n                javaemul.internal.InternalPreconditions.checkArraySize(newLength);\n                return Arrays.copyOfRange(original, 0, newLength);\n            };\n            Arrays.copyOf$java_lang_Object_A$int = function (original, newLength) {\n                javaemul.internal.InternalPreconditions.checkArraySize(newLength);\n                javaemul.internal.InternalPreconditions.checkNotNull(original, \"original\");\n                var clone = javaemul.internal.ArrayHelper.clone(original, 0, newLength);\n                javaemul.internal.ArrayHelper.setLength(clone, newLength);\n                return clone;\n            };\n            Arrays.copyOfRange = function (original, from, to) {\n                if (((original != null && original instanceof Array) || original === null) && ((typeof from === 'number') || from === null) && ((typeof to === 'number') || to === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var len = Arrays.getCopyLength(original, from, to);\n                        var copy = new Array(to - from);\n                        javaemul.internal.ArrayHelper.copy(original, from, copy, 0, len);\n                        return copy;\n                    })();\n                }\n                else if (((original != null && original instanceof Array) || original === null) && ((typeof from === 'number') || from === null) && ((typeof to === 'number') || to === null)) {\n                    return java.util.Arrays.copyOfRange$byte_A$int$int(original, from, to);\n                }\n                else if (((original != null && original instanceof Array) || original === null) && ((typeof from === 'number') || from === null) && ((typeof to === 'number') || to === null)) {\n                    return java.util.Arrays.copyOfRange$char_A$int$int(original, from, to);\n                }\n                else if (((original != null && original instanceof Array) || original === null) && ((typeof from === 'number') || from === null) && ((typeof to === 'number') || to === null)) {\n                    return java.util.Arrays.copyOfRange$double_A$int$int(original, from, to);\n                }\n                else if (((original != null && original instanceof Array) || original === null) && ((typeof from === 'number') || from === null) && ((typeof to === 'number') || to === null)) {\n                    return java.util.Arrays.copyOfRange$float_A$int$int(original, from, to);\n                }\n                else if (((original != null && original instanceof Array) || original === null) && ((typeof from === 'number') || from === null) && ((typeof to === 'number') || to === null)) {\n                    return java.util.Arrays.copyOfRange$int_A$int$int(original, from, to);\n                }\n                else if (((original != null && original instanceof Array) || original === null) && ((typeof from === 'number') || from === null) && ((typeof to === 'number') || to === null)) {\n                    return java.util.Arrays.copyOfRange$long_A$int$int(original, from, to);\n                }\n                else if (((original != null && original instanceof Array) || original === null) && ((typeof from === 'number') || from === null) && ((typeof to === 'number') || to === null)) {\n                    return java.util.Arrays.copyOfRange$short_A$int$int(original, from, to);\n                }\n                else if (((original != null && original instanceof Array) || original === null) && ((typeof from === 'number') || from === null) && ((typeof to === 'number') || to === null)) {\n                    return java.util.Arrays.copyOfRange$java_lang_Object_A$int$int(original, from, to);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Arrays.copyOfRange$byte_A$int$int = function (original, from, to) {\n                var len = Arrays.getCopyLength(original, from, to);\n                var copy = new Array(to - from);\n                javaemul.internal.ArrayHelper.copy(original, from, copy, 0, len);\n                return copy;\n            };\n            Arrays.copyOfRange$char_A$int$int = function (original, from, to) {\n                var len = Arrays.getCopyLength(original, from, to);\n                var copy = new Array(to - from);\n                javaemul.internal.ArrayHelper.copy(original, from, copy, 0, len);\n                return copy;\n            };\n            Arrays.copyOfRange$double_A$int$int = function (original, from, to) {\n                var len = Arrays.getCopyLength(original, from, to);\n                var copy = new Array(to - from);\n                javaemul.internal.ArrayHelper.copy(original, from, copy, 0, len);\n                return copy;\n            };\n            Arrays.copyOfRange$float_A$int$int = function (original, from, to) {\n                var len = Arrays.getCopyLength(original, from, to);\n                var copy = new Array(to - from);\n                javaemul.internal.ArrayHelper.copy(original, from, copy, 0, len);\n                return copy;\n            };\n            Arrays.copyOfRange$int_A$int$int = function (original, from, to) {\n                var len = Arrays.getCopyLength(original, from, to);\n                var copy = new Array(to - from);\n                javaemul.internal.ArrayHelper.copy(original, from, copy, 0, len);\n                return copy;\n            };\n            Arrays.copyOfRange$long_A$int$int = function (original, from, to) {\n                var len = Arrays.getCopyLength(original, from, to);\n                var copy = new Array(to - from);\n                javaemul.internal.ArrayHelper.copy(original, from, copy, 0, len);\n                return copy;\n            };\n            Arrays.copyOfRange$short_A$int$int = function (original, from, to) {\n                var len = Arrays.getCopyLength(original, from, to);\n                var copy = new Array(to - from);\n                javaemul.internal.ArrayHelper.copy(original, from, copy, 0, len);\n                return copy;\n            };\n            Arrays.copyOfRange$java_lang_Object_A$int$int = function (original, from, to) {\n                var len = Arrays.getCopyLength(original, from, to);\n                var copy = javaemul.internal.ArrayHelper.createFrom(original, to - from);\n                javaemul.internal.ArrayHelper.copy(original, from, copy, 0, len);\n                return copy;\n            };\n            Arrays.deepEquals = function (a1, a2) {\n                if (a1 === a2) {\n                    return true;\n                }\n                if (a1 == null || a2 == null) {\n                    return false;\n                }\n                if (a1.length !== a2.length) {\n                    return false;\n                }\n                for (var i = 0, n = a1.length; i < n; ++i) {\n                    if (!java.util.Objects.deepEquals(a1[i], a2[i])) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            Arrays.deepHashCode = function (a) {\n                if (a == null) {\n                    return 0;\n                }\n                var hashCode = 1;\n                for (var index138 = 0; index138 < a.length; index138++) {\n                    var obj = a[index138];\n                    {\n                        var hash = void 0;\n                        if (obj != null && obj instanceof Array) {\n                            hash = Arrays.deepHashCode(obj);\n                        }\n                        else if (obj != null && obj instanceof Array) {\n                            hash = Arrays.hashCode(obj);\n                        }\n                        else if (obj != null && obj instanceof Array) {\n                            hash = Arrays.hashCode(obj);\n                        }\n                        else if (obj != null && obj instanceof Array) {\n                            hash = Arrays.hashCode(obj);\n                        }\n                        else if (obj != null && obj instanceof Array) {\n                            hash = Arrays.hashCode(obj);\n                        }\n                        else if (obj != null && obj instanceof Array) {\n                            hash = Arrays.hashCode(obj);\n                        }\n                        else if (obj != null && obj instanceof Array) {\n                            hash = Arrays.hashCode(obj);\n                        }\n                        else if (obj != null && obj instanceof Array) {\n                            hash = Arrays.hashCode(obj);\n                        }\n                        else if (obj != null && obj instanceof Array) {\n                            hash = Arrays.hashCode(obj);\n                        }\n                        else {\n                            hash = java.util.Objects.hashCode(obj);\n                        }\n                        hashCode = 31 * hashCode + hash;\n                        hashCode = javaemul.internal.Coercions.ensureInt(hashCode);\n                    }\n                }\n                return hashCode;\n            };\n            Arrays.deepToString$java_lang_Object_A = function (a) {\n                return Arrays.deepToString(a, (new java.util.HashSet()));\n            };\n            Arrays.equals = function (array1, array2) {\n                if (((array1 != null && array1 instanceof Array) || array1 === null) && ((array2 != null && array2 instanceof Array) || array2 === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (array1 === array2) {\n                            return true;\n                        }\n                        if (array1 == null || array2 == null) {\n                            return false;\n                        }\n                        if (array1.length !== array2.length) {\n                            return false;\n                        }\n                        for (var i = 0; i < array1.length; ++i) {\n                            if (array1[i] !== array2[i]) {\n                                return false;\n                            }\n                        }\n                        return true;\n                    })();\n                }\n                else if (((array1 != null && array1 instanceof Array) || array1 === null) && ((array2 != null && array2 instanceof Array) || array2 === null)) {\n                    return java.util.Arrays.equals$byte_A$byte_A(array1, array2);\n                }\n                else if (((array1 != null && array1 instanceof Array) || array1 === null) && ((array2 != null && array2 instanceof Array) || array2 === null)) {\n                    return java.util.Arrays.equals$char_A$char_A(array1, array2);\n                }\n                else if (((array1 != null && array1 instanceof Array) || array1 === null) && ((array2 != null && array2 instanceof Array) || array2 === null)) {\n                    return java.util.Arrays.equals$double_A$double_A(array1, array2);\n                }\n                else if (((array1 != null && array1 instanceof Array) || array1 === null) && ((array2 != null && array2 instanceof Array) || array2 === null)) {\n                    return java.util.Arrays.equals$float_A$float_A(array1, array2);\n                }\n                else if (((array1 != null && array1 instanceof Array) || array1 === null) && ((array2 != null && array2 instanceof Array) || array2 === null)) {\n                    return java.util.Arrays.equals$int_A$int_A(array1, array2);\n                }\n                else if (((array1 != null && array1 instanceof Array) || array1 === null) && ((array2 != null && array2 instanceof Array) || array2 === null)) {\n                    return java.util.Arrays.equals$long_A$long_A(array1, array2);\n                }\n                else if (((array1 != null && array1 instanceof Array) || array1 === null) && ((array2 != null && array2 instanceof Array) || array2 === null)) {\n                    return java.util.Arrays.equals$java_lang_Object_A$java_lang_Object_A(array1, array2);\n                }\n                else if (((array1 != null && array1 instanceof Array) || array1 === null) && ((array2 != null && array2 instanceof Array) || array2 === null)) {\n                    return java.util.Arrays.equals$short_A$short_A(array1, array2);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Arrays.equals$byte_A$byte_A = function (array1, array2) {\n                if (array1 === array2) {\n                    return true;\n                }\n                if (array1 == null || array2 == null) {\n                    return false;\n                }\n                if (array1.length !== array2.length) {\n                    return false;\n                }\n                for (var i = 0; i < array1.length; ++i) {\n                    if (array1[i] !== array2[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            Arrays.equals$char_A$char_A = function (array1, array2) {\n                if (array1 === array2) {\n                    return true;\n                }\n                if (array1 == null || array2 == null) {\n                    return false;\n                }\n                if (array1.length !== array2.length) {\n                    return false;\n                }\n                for (var i = 0; i < array1.length; ++i) {\n                    if (array1[i] !== array2[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            Arrays.equals$double_A$double_A = function (array1, array2) {\n                if (array1 === array2) {\n                    return true;\n                }\n                if (array1 == null || array2 == null) {\n                    return false;\n                }\n                if (array1.length !== array2.length) {\n                    return false;\n                }\n                for (var i = 0; i < array1.length; ++i) {\n                    if (array1[i] !== array2[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            Arrays.equals$float_A$float_A = function (array1, array2) {\n                if (array1 === array2) {\n                    return true;\n                }\n                if (array1 == null || array2 == null) {\n                    return false;\n                }\n                if (array1.length !== array2.length) {\n                    return false;\n                }\n                for (var i = 0; i < array1.length; ++i) {\n                    if (array1[i] !== array2[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            Arrays.equals$int_A$int_A = function (array1, array2) {\n                if (array1 === array2) {\n                    return true;\n                }\n                if (array1 == null || array2 == null) {\n                    return false;\n                }\n                if (array1.length !== array2.length) {\n                    return false;\n                }\n                for (var i = 0; i < array1.length; ++i) {\n                    if (array1[i] !== array2[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            Arrays.equals$long_A$long_A = function (array1, array2) {\n                if (array1 === array2) {\n                    return true;\n                }\n                if (array1 == null || array2 == null) {\n                    return false;\n                }\n                if (array1.length !== array2.length) {\n                    return false;\n                }\n                for (var i = 0; i < array1.length; ++i) {\n                    if (array1[i] !== array2[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            Arrays.equals$java_lang_Object_A$java_lang_Object_A = function (array1, array2) {\n                if (array1 === array2) {\n                    return true;\n                }\n                if (array1 == null || array2 == null) {\n                    return false;\n                }\n                if (array1.length !== array2.length) {\n                    return false;\n                }\n                for (var i = 0; i < array1.length; ++i) {\n                    var val1 = array1[i];\n                    var val2 = array2[i];\n                    if (!java.util.Objects.equals(val1, val2)) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            Arrays.equals$short_A$short_A = function (array1, array2) {\n                if (array1 === array2) {\n                    return true;\n                }\n                if (array1 == null || array2 == null) {\n                    return false;\n                }\n                if (array1.length !== array2.length) {\n                    return false;\n                }\n                for (var i = 0; i < array1.length; ++i) {\n                    if (array1[i] !== array2[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            Arrays.fill$boolean_A$boolean = function (a, val) {\n                Arrays.fill(a, 0, a.length, val);\n            };\n            Arrays.fill = function (a, fromIndex, toIndex, val) {\n                if (((a != null && a instanceof Array) || a === null) && ((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null) && ((typeof val === 'boolean') || val === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        for (var i = fromIndex; i < toIndex; ++i) {\n                            a[i] = val;\n                        }\n                    })();\n                }\n                else if (((a != null && a instanceof Array) || a === null) && ((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null) && ((typeof val === 'number') || val === null)) {\n                    return java.util.Arrays.fill$byte_A$int$int$byte(a, fromIndex, toIndex, val);\n                }\n                else if (((a != null && a instanceof Array) || a === null) && ((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null) && ((typeof val === 'string') || val === null)) {\n                    return java.util.Arrays.fill$char_A$int$int$char(a, fromIndex, toIndex, val);\n                }\n                else if (((a != null && a instanceof Array) || a === null) && ((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null) && ((typeof val === 'number') || val === null)) {\n                    return java.util.Arrays.fill$short_A$int$int$short(a, fromIndex, toIndex, val);\n                }\n                else if (((a != null && a instanceof Array) || a === null) && ((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null) && ((typeof val === 'number') || val === null)) {\n                    return java.util.Arrays.fill$int_A$int$int$int(a, fromIndex, toIndex, val);\n                }\n                else if (((a != null && a instanceof Array) || a === null) && ((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null) && ((typeof val === 'number') || val === null)) {\n                    return java.util.Arrays.fill$long_A$int$int$long(a, fromIndex, toIndex, val);\n                }\n                else if (((a != null && a instanceof Array) || a === null) && ((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null) && ((typeof val === 'number') || val === null)) {\n                    return java.util.Arrays.fill$float_A$int$int$float(a, fromIndex, toIndex, val);\n                }\n                else if (((a != null && a instanceof Array) || a === null) && ((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null) && ((typeof val === 'number') || val === null)) {\n                    return java.util.Arrays.fill$double_A$int$int$double(a, fromIndex, toIndex, val);\n                }\n                else if (((a != null && a instanceof Array) || a === null) && ((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null) && ((val != null) || val === null)) {\n                    return java.util.Arrays.fill$java_lang_Object_A$int$int$java_lang_Object(a, fromIndex, toIndex, val);\n                }\n                else if (((a != null && a instanceof Array) || a === null) && ((typeof fromIndex === 'boolean') || fromIndex === null) && toIndex === undefined && val === undefined) {\n                    return java.util.Arrays.fill$boolean_A$boolean(a, fromIndex);\n                }\n                else if (((a != null && a instanceof Array) || a === null) && ((typeof fromIndex === 'number') || fromIndex === null) && toIndex === undefined && val === undefined) {\n                    return java.util.Arrays.fill$byte_A$byte(a, fromIndex);\n                }\n                else if (((a != null && a instanceof Array) || a === null) && ((typeof fromIndex === 'string') || fromIndex === null) && toIndex === undefined && val === undefined) {\n                    return java.util.Arrays.fill$char_A$char(a, fromIndex);\n                }\n                else if (((a != null && a instanceof Array) || a === null) && ((typeof fromIndex === 'number') || fromIndex === null) && toIndex === undefined && val === undefined) {\n                    return java.util.Arrays.fill$short_A$short(a, fromIndex);\n                }\n                else if (((a != null && a instanceof Array) || a === null) && ((typeof fromIndex === 'number') || fromIndex === null) && toIndex === undefined && val === undefined) {\n                    return java.util.Arrays.fill$int_A$int(a, fromIndex);\n                }\n                else if (((a != null && a instanceof Array) || a === null) && ((typeof fromIndex === 'number') || fromIndex === null) && toIndex === undefined && val === undefined) {\n                    return java.util.Arrays.fill$long_A$long(a, fromIndex);\n                }\n                else if (((a != null && a instanceof Array) || a === null) && ((typeof fromIndex === 'number') || fromIndex === null) && toIndex === undefined && val === undefined) {\n                    return java.util.Arrays.fill$float_A$float(a, fromIndex);\n                }\n                else if (((a != null && a instanceof Array) || a === null) && ((typeof fromIndex === 'number') || fromIndex === null) && toIndex === undefined && val === undefined) {\n                    return java.util.Arrays.fill$double_A$double(a, fromIndex);\n                }\n                else if (((a != null && a instanceof Array) || a === null) && ((fromIndex != null) || fromIndex === null) && toIndex === undefined && val === undefined) {\n                    return java.util.Arrays.fill$java_lang_Object_A$java_lang_Object(a, fromIndex);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Arrays.fill$byte_A$byte = function (a, val) {\n                Arrays.fill(a, 0, a.length, val);\n            };\n            Arrays.fill$byte_A$int$int$byte = function (a, fromIndex, toIndex, val) {\n                for (var i = fromIndex; i < toIndex; ++i) {\n                    a[i] = val;\n                }\n            };\n            Arrays.fill$char_A$char = function (a, val) {\n                Arrays.fill(a, 0, a.length, val);\n            };\n            Arrays.fill$char_A$int$int$char = function (a, fromIndex, toIndex, val) {\n                for (var i = fromIndex; i < toIndex; ++i) {\n                    a[i] = val;\n                }\n            };\n            Arrays.fill$double_A$double = function (a, val) {\n                Arrays.fill(a, 0, a.length, val);\n            };\n            Arrays.fill$double_A$int$int$double = function (a, fromIndex, toIndex, val) {\n                for (var i = fromIndex; i < toIndex; ++i) {\n                    a[i] = val;\n                }\n            };\n            Arrays.fill$float_A$float = function (a, val) {\n                Arrays.fill(a, 0, a.length, val);\n            };\n            Arrays.fill$float_A$int$int$float = function (a, fromIndex, toIndex, val) {\n                for (var i = fromIndex; i < toIndex; ++i) {\n                    a[i] = val;\n                }\n            };\n            Arrays.fill$int_A$int = function (a, val) {\n                Arrays.fill(a, 0, a.length, val);\n            };\n            Arrays.fill$int_A$int$int$int = function (a, fromIndex, toIndex, val) {\n                for (var i = fromIndex; i < toIndex; ++i) {\n                    a[i] = val;\n                }\n            };\n            Arrays.fill$long_A$int$int$long = function (a, fromIndex, toIndex, val) {\n                for (var i = fromIndex; i < toIndex; ++i) {\n                    a[i] = val;\n                }\n            };\n            Arrays.fill$long_A$long = function (a, val) {\n                Arrays.fill(a, 0, a.length, val);\n            };\n            Arrays.fill$java_lang_Object_A$int$int$java_lang_Object = function (a, fromIndex, toIndex, val) {\n                for (var i = fromIndex; i < toIndex; ++i) {\n                    a[i] = val;\n                }\n            };\n            Arrays.fill$java_lang_Object_A$java_lang_Object = function (a, val) {\n                Arrays.fill(a, 0, a.length, val);\n            };\n            Arrays.fill$short_A$int$int$short = function (a, fromIndex, toIndex, val) {\n                for (var i = fromIndex; i < toIndex; ++i) {\n                    a[i] = val;\n                }\n            };\n            Arrays.fill$short_A$short = function (a, val) {\n                Arrays.fill(a, 0, a.length, val);\n            };\n            Arrays.hashCode = function (a) {\n                if (((a != null && a instanceof Array) || a === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (a == null) {\n                            return 0;\n                        }\n                        var hashCode = 1;\n                        for (var index139 = 0; index139 < a.length; index139++) {\n                            var e = a[index139];\n                            {\n                                hashCode = 31 * hashCode + javaemul.internal.BooleanHelper.hashCode(e);\n                                hashCode = javaemul.internal.Coercions.ensureInt(hashCode);\n                            }\n                        }\n                        return hashCode;\n                    })();\n                }\n                else if (((a != null && a instanceof Array) || a === null)) {\n                    return java.util.Arrays.hashCode$byte_A(a);\n                }\n                else if (((a != null && a instanceof Array) || a === null)) {\n                    return java.util.Arrays.hashCode$char_A(a);\n                }\n                else if (((a != null && a instanceof Array) || a === null)) {\n                    return java.util.Arrays.hashCode$double_A(a);\n                }\n                else if (((a != null && a instanceof Array) || a === null)) {\n                    return java.util.Arrays.hashCode$float_A(a);\n                }\n                else if (((a != null && a instanceof Array) || a === null)) {\n                    return java.util.Arrays.hashCode$int_A(a);\n                }\n                else if (((a != null && a instanceof Array) || a === null)) {\n                    return java.util.Arrays.hashCode$long_A(a);\n                }\n                else if (((a != null && a instanceof Array) || a === null)) {\n                    return java.util.Arrays.hashCode$java_lang_Object_A(a);\n                }\n                else if (((a != null && a instanceof Array) || a === null)) {\n                    return java.util.Arrays.hashCode$short_A(a);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Arrays.hashCode$byte_A = function (a) {\n                if (a == null) {\n                    return 0;\n                }\n                var hashCode = 1;\n                for (var index140 = 0; index140 < a.length; index140++) {\n                    var e = a[index140];\n                    {\n                        hashCode = 31 * hashCode + javaemul.internal.ByteHelper.hashCode(e);\n                        hashCode = javaemul.internal.Coercions.ensureInt(hashCode);\n                    }\n                }\n                return hashCode;\n            };\n            Arrays.hashCode$char_A = function (a) {\n                if (a == null) {\n                    return 0;\n                }\n                var hashCode = 1;\n                for (var index141 = 0; index141 < a.length; index141++) {\n                    var e = a[index141];\n                    {\n                        hashCode = 31 * hashCode + javaemul.internal.CharacterHelper.hashCode(e);\n                        hashCode = javaemul.internal.Coercions.ensureInt(hashCode);\n                    }\n                }\n                return hashCode;\n            };\n            Arrays.hashCode$double_A = function (a) {\n                if (a == null) {\n                    return 0;\n                }\n                var hashCode = 1;\n                for (var index142 = 0; index142 < a.length; index142++) {\n                    var e = a[index142];\n                    {\n                        hashCode = 31 * hashCode + javaemul.internal.DoubleHelper.hashCode(e);\n                        hashCode = javaemul.internal.Coercions.ensureInt(hashCode);\n                    }\n                }\n                return hashCode;\n            };\n            Arrays.hashCode$float_A = function (a) {\n                if (a == null) {\n                    return 0;\n                }\n                var hashCode = 1;\n                for (var index143 = 0; index143 < a.length; index143++) {\n                    var e = a[index143];\n                    {\n                        hashCode = 31 * hashCode + javaemul.internal.FloatHelper.hashCode(e);\n                        hashCode = javaemul.internal.Coercions.ensureInt(hashCode);\n                    }\n                }\n                return hashCode;\n            };\n            Arrays.hashCode$int_A = function (a) {\n                if (a == null) {\n                    return 0;\n                }\n                var hashCode = 1;\n                for (var index144 = 0; index144 < a.length; index144++) {\n                    var e = a[index144];\n                    {\n                        hashCode = 31 * hashCode + javaemul.internal.IntegerHelper.hashCode(e);\n                        hashCode = javaemul.internal.Coercions.ensureInt(hashCode);\n                    }\n                }\n                return hashCode;\n            };\n            Arrays.hashCode$long_A = function (a) {\n                if (a == null) {\n                    return 0;\n                }\n                var hashCode = 1;\n                for (var index145 = 0; index145 < a.length; index145++) {\n                    var e = a[index145];\n                    {\n                        hashCode = 31 * hashCode + javaemul.internal.LongHelper.hashCode(e);\n                        hashCode = javaemul.internal.Coercions.ensureInt(hashCode);\n                    }\n                }\n                return hashCode;\n            };\n            Arrays.hashCode$java_lang_Object_A = function (a) {\n                if (a == null) {\n                    return 0;\n                }\n                var hashCode = 1;\n                for (var index146 = 0; index146 < a.length; index146++) {\n                    var e = a[index146];\n                    {\n                        hashCode = 31 * hashCode + java.util.Objects.hashCode(e);\n                        hashCode = javaemul.internal.Coercions.ensureInt(hashCode);\n                    }\n                }\n                return hashCode;\n            };\n            Arrays.hashCode$short_A = function (a) {\n                if (a == null) {\n                    return 0;\n                }\n                var hashCode = 1;\n                for (var index147 = 0; index147 < a.length; index147++) {\n                    var e = a[index147];\n                    {\n                        hashCode = 31 * hashCode + javaemul.internal.ShortHelper.hashCode(e);\n                        hashCode = javaemul.internal.Coercions.ensureInt(hashCode);\n                    }\n                }\n                return hashCode;\n            };\n            Arrays.sort$byte_A = function (array) {\n                Arrays.nativeNumberSort(array);\n            };\n            Arrays.sort$byte_A$int$int = function (array, fromIndex, toIndex) {\n                javaemul.internal.InternalPreconditions.checkPositionIndexes(fromIndex, toIndex, array.length);\n                Arrays.nativeNumberSort(array, fromIndex, toIndex);\n            };\n            Arrays.sort$char_A = function (array) {\n                Arrays.nativeNumberSort(array);\n            };\n            Arrays.sort$char_A$int$int = function (array, fromIndex, toIndex) {\n                javaemul.internal.InternalPreconditions.checkPositionIndexes(fromIndex, toIndex, array.length);\n                Arrays.nativeNumberSort(array, fromIndex, toIndex);\n            };\n            Arrays.sort$double_A = function (array) {\n                Arrays.nativeNumberSort(array);\n            };\n            Arrays.sort$double_A$int$int = function (array, fromIndex, toIndex) {\n                javaemul.internal.InternalPreconditions.checkPositionIndexes(fromIndex, toIndex, array.length);\n                Arrays.nativeNumberSort(array, fromIndex, toIndex);\n            };\n            Arrays.sort$float_A = function (array) {\n                Arrays.nativeNumberSort(array);\n            };\n            Arrays.sort$float_A$int$int = function (array, fromIndex, toIndex) {\n                javaemul.internal.InternalPreconditions.checkPositionIndexes(fromIndex, toIndex, array.length);\n                Arrays.nativeNumberSort(array, fromIndex, toIndex);\n            };\n            Arrays.sort$int_A = function (array) {\n                Arrays.nativeNumberSort(array);\n            };\n            Arrays.sort$int_A$int$int = function (array, fromIndex, toIndex) {\n                javaemul.internal.InternalPreconditions.checkPositionIndexes(fromIndex, toIndex, array.length);\n                Arrays.nativeNumberSort(array, fromIndex, toIndex);\n            };\n            Arrays.sort$long_A = function (array) {\n                Arrays.nativeLongSort(array, javaemul.internal.LongCompareHolder.getLongComparator());\n            };\n            Arrays.sort$long_A$int$int = function (array, fromIndex, toIndex) {\n                javaemul.internal.InternalPreconditions.checkPositionIndexes(fromIndex, toIndex, array.length);\n                Arrays.nativeLongSort(array, fromIndex, toIndex);\n            };\n            Arrays.sort$java_lang_Object_A = function (array) {\n                Arrays.mergeSort(array, 0, array.length, java.util.Comparators.natural());\n            };\n            Arrays.sort$java_lang_Object_A$int$int = function (x, fromIndex, toIndex) {\n                Arrays.mergeSort(x, fromIndex, toIndex, java.util.Comparators.natural());\n            };\n            Arrays.sort$short_A = function (array) {\n                Arrays.nativeNumberSort(array);\n            };\n            Arrays.sort$short_A$int$int = function (array, fromIndex, toIndex) {\n                javaemul.internal.InternalPreconditions.checkPositionIndexes(fromIndex, toIndex, array.length);\n                Arrays.nativeNumberSort(array, fromIndex, toIndex);\n            };\n            Arrays.sort$java_lang_Object_A$java_util_Comparator = function (x, c) {\n                Arrays.mergeSort(x, 0, x.length, c);\n            };\n            Arrays.sort = function (x, fromIndex, toIndex, c) {\n                if (((x != null && x instanceof Array) || x === null) && ((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null) && ((c != null && (c[\"__interfaces\"] != null && c[\"__interfaces\"].indexOf(\"java.util.Comparator\") >= 0 || c.constructor != null && c.constructor[\"__interfaces\"] != null && c.constructor[\"__interfaces\"].indexOf(\"java.util.Comparator\") >= 0)) || c === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        javaemul.internal.InternalPreconditions.checkPositionIndexes(fromIndex, toIndex, x.length);\n                        Arrays.mergeSort(x, fromIndex, toIndex, c);\n                    })();\n                }\n                else if (((x != null && x instanceof Array) || x === null) && ((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null) && c === undefined) {\n                    return java.util.Arrays.sort$byte_A$int$int(x, fromIndex, toIndex);\n                }\n                else if (((x != null && x instanceof Array) || x === null) && ((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null) && c === undefined) {\n                    return java.util.Arrays.sort$char_A$int$int(x, fromIndex, toIndex);\n                }\n                else if (((x != null && x instanceof Array) || x === null) && ((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null) && c === undefined) {\n                    return java.util.Arrays.sort$double_A$int$int(x, fromIndex, toIndex);\n                }\n                else if (((x != null && x instanceof Array) || x === null) && ((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null) && c === undefined) {\n                    return java.util.Arrays.sort$float_A$int$int(x, fromIndex, toIndex);\n                }\n                else if (((x != null && x instanceof Array) || x === null) && ((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null) && c === undefined) {\n                    return java.util.Arrays.sort$int_A$int$int(x, fromIndex, toIndex);\n                }\n                else if (((x != null && x instanceof Array) || x === null) && ((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null) && c === undefined) {\n                    return java.util.Arrays.sort$long_A$int$int(x, fromIndex, toIndex);\n                }\n                else if (((x != null && x instanceof Array) || x === null) && ((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null) && c === undefined) {\n                    return java.util.Arrays.sort$java_lang_Object_A$int$int(x, fromIndex, toIndex);\n                }\n                else if (((x != null && x instanceof Array) || x === null) && ((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null) && c === undefined) {\n                    return java.util.Arrays.sort$short_A$int$int(x, fromIndex, toIndex);\n                }\n                else if (((x != null && x instanceof Array) || x === null) && ((fromIndex != null && (fromIndex[\"__interfaces\"] != null && fromIndex[\"__interfaces\"].indexOf(\"java.util.Comparator\") >= 0 || fromIndex.constructor != null && fromIndex.constructor[\"__interfaces\"] != null && fromIndex.constructor[\"__interfaces\"].indexOf(\"java.util.Comparator\") >= 0)) || fromIndex === null) && toIndex === undefined && c === undefined) {\n                    return java.util.Arrays.sort$java_lang_Object_A$java_util_Comparator(x, fromIndex);\n                }\n                else if (((x != null && x instanceof Array) || x === null) && fromIndex === undefined && toIndex === undefined && c === undefined) {\n                    return java.util.Arrays.sort$byte_A(x);\n                }\n                else if (((x != null && x instanceof Array) || x === null) && fromIndex === undefined && toIndex === undefined && c === undefined) {\n                    return java.util.Arrays.sort$char_A(x);\n                }\n                else if (((x != null && x instanceof Array) || x === null) && fromIndex === undefined && toIndex === undefined && c === undefined) {\n                    return java.util.Arrays.sort$double_A(x);\n                }\n                else if (((x != null && x instanceof Array) || x === null) && fromIndex === undefined && toIndex === undefined && c === undefined) {\n                    return java.util.Arrays.sort$float_A(x);\n                }\n                else if (((x != null && x instanceof Array) || x === null) && fromIndex === undefined && toIndex === undefined && c === undefined) {\n                    return java.util.Arrays.sort$int_A(x);\n                }\n                else if (((x != null && x instanceof Array) || x === null) && fromIndex === undefined && toIndex === undefined && c === undefined) {\n                    return java.util.Arrays.sort$long_A(x);\n                }\n                else if (((x != null && x instanceof Array) || x === null) && fromIndex === undefined && toIndex === undefined && c === undefined) {\n                    return java.util.Arrays.sort$java_lang_Object_A(x);\n                }\n                else if (((x != null && x instanceof Array) || x === null) && fromIndex === undefined && toIndex === undefined && c === undefined) {\n                    return java.util.Arrays.sort$short_A(x);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Arrays.toString = function (a) {\n                if (((a != null && a instanceof Array) || a === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (a == null) {\n                            return \"null\";\n                        }\n                        var joiner = new java.util.StringJoiner(\", \", \"[\", \"]\");\n                        for (var index148 = 0; index148 < a.length; index148++) {\n                            var element = a[index148];\n                            {\n                                joiner.add(/* valueOf */ new String(element).toString());\n                            }\n                        }\n                        return joiner.toString();\n                    })();\n                }\n                else if (((a != null && a instanceof Array) || a === null)) {\n                    return java.util.Arrays.toString$byte_A(a);\n                }\n                else if (((a != null && a instanceof Array) || a === null)) {\n                    return java.util.Arrays.toString$char_A(a);\n                }\n                else if (((a != null && a instanceof Array) || a === null)) {\n                    return java.util.Arrays.toString$double_A(a);\n                }\n                else if (((a != null && a instanceof Array) || a === null)) {\n                    return java.util.Arrays.toString$float_A(a);\n                }\n                else if (((a != null && a instanceof Array) || a === null)) {\n                    return java.util.Arrays.toString$int_A(a);\n                }\n                else if (((a != null && a instanceof Array) || a === null)) {\n                    return java.util.Arrays.toString$long_A(a);\n                }\n                else if (((a != null && a instanceof Array) || a === null)) {\n                    return java.util.Arrays.toString$java_lang_Object_A(a);\n                }\n                else if (((a != null && a instanceof Array) || a === null)) {\n                    return java.util.Arrays.toString$short_A(a);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Arrays.toString$byte_A = function (a) {\n                if (a == null) {\n                    return \"null\";\n                }\n                var joiner = new java.util.StringJoiner(\", \", \"[\", \"]\");\n                for (var index149 = 0; index149 < a.length; index149++) {\n                    var element = a[index149];\n                    {\n                        joiner.add(/* valueOf */ new String(element).toString());\n                    }\n                }\n                return joiner.toString();\n            };\n            Arrays.toString$char_A = function (a) {\n                if (a == null) {\n                    return \"null\";\n                }\n                var joiner = new java.util.StringJoiner(\", \", \"[\", \"]\");\n                for (var index150 = 0; index150 < a.length; index150++) {\n                    var element = a[index150];\n                    {\n                        joiner.add(/* valueOf */ new String(element).toString());\n                    }\n                }\n                return joiner.toString();\n            };\n            Arrays.toString$double_A = function (a) {\n                if (a == null) {\n                    return \"null\";\n                }\n                var joiner = new java.util.StringJoiner(\", \", \"[\", \"]\");\n                for (var index151 = 0; index151 < a.length; index151++) {\n                    var element = a[index151];\n                    {\n                        joiner.add(/* valueOf */ new String(element).toString());\n                    }\n                }\n                return joiner.toString();\n            };\n            Arrays.toString$float_A = function (a) {\n                if (a == null) {\n                    return \"null\";\n                }\n                var joiner = new java.util.StringJoiner(\", \", \"[\", \"]\");\n                for (var index152 = 0; index152 < a.length; index152++) {\n                    var element = a[index152];\n                    {\n                        joiner.add(/* valueOf */ new String(element).toString());\n                    }\n                }\n                return joiner.toString();\n            };\n            Arrays.toString$int_A = function (a) {\n                if (a == null) {\n                    return \"null\";\n                }\n                var joiner = new java.util.StringJoiner(\", \", \"[\", \"]\");\n                for (var index153 = 0; index153 < a.length; index153++) {\n                    var element = a[index153];\n                    {\n                        joiner.add(/* valueOf */ new String(element).toString());\n                    }\n                }\n                return joiner.toString();\n            };\n            Arrays.toString$long_A = function (a) {\n                if (a == null) {\n                    return \"null\";\n                }\n                var joiner = new java.util.StringJoiner(\", \", \"[\", \"]\");\n                for (var index154 = 0; index154 < a.length; index154++) {\n                    var element = a[index154];\n                    {\n                        joiner.add(/* valueOf */ new String(element).toString());\n                    }\n                }\n                return joiner.toString();\n            };\n            Arrays.toString$java_lang_Object_A = function (x) {\n                if (x == null) {\n                    return \"null\";\n                }\n                return Arrays.asList.apply(null, x).toString();\n            };\n            Arrays.toString$short_A = function (a) {\n                if (a == null) {\n                    return \"null\";\n                }\n                var joiner = new java.util.StringJoiner(\", \", \"[\", \"]\");\n                for (var index155 = 0; index155 < a.length; index155++) {\n                    var element = a[index155];\n                    {\n                        joiner.add(/* valueOf */ new String(element).toString());\n                    }\n                }\n                return joiner.toString();\n            };\n            /**\n             * Recursive helper function for {@link Arrays#deepToString(Object[])}.\n             */\n            Arrays.deepToString = function (a, arraysIveSeen) {\n                if (((a != null && a instanceof Array) || a === null) && ((arraysIveSeen != null && (arraysIveSeen[\"__interfaces\"] != null && arraysIveSeen[\"__interfaces\"].indexOf(\"java.util.Set\") >= 0 || arraysIveSeen.constructor != null && arraysIveSeen.constructor[\"__interfaces\"] != null && arraysIveSeen.constructor[\"__interfaces\"].indexOf(\"java.util.Set\") >= 0)) || arraysIveSeen === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (a == null) {\n                            return \"null\";\n                        }\n                        if (!arraysIveSeen.add(a)) {\n                            return \"[...]\";\n                        }\n                        var joiner = new java.util.StringJoiner(\", \", \"[\", \"]\");\n                        for (var index156 = 0; index156 < a.length; index156++) {\n                            var obj = a[index156];\n                            {\n                                if (obj != null && obj.constructor.isArray()) {\n                                    if (obj != null && obj instanceof Array) {\n                                        if (arraysIveSeen.contains(obj)) {\n                                            joiner.add(\"[...]\");\n                                        }\n                                        else {\n                                            var objArray = obj;\n                                            var tempSet = (new java.util.HashSet(arraysIveSeen));\n                                            joiner.add(Arrays.deepToString(objArray, tempSet));\n                                        }\n                                    }\n                                    else if (obj != null && obj instanceof Array) {\n                                        joiner.add(Arrays.toString(obj));\n                                    }\n                                    else if (obj != null && obj instanceof Array) {\n                                        joiner.add(Arrays.toString(obj));\n                                    }\n                                    else if (obj != null && obj instanceof Array) {\n                                        joiner.add(Arrays.toString(obj));\n                                    }\n                                    else if (obj != null && obj instanceof Array) {\n                                        joiner.add(Arrays.toString(obj));\n                                    }\n                                    else if (obj != null && obj instanceof Array) {\n                                        joiner.add(Arrays.toString(obj));\n                                    }\n                                    else if (obj != null && obj instanceof Array) {\n                                        joiner.add(Arrays.toString(obj));\n                                    }\n                                    else if (obj != null && obj instanceof Array) {\n                                        joiner.add(Arrays.toString(obj));\n                                    }\n                                    else if (obj != null && obj instanceof Array) {\n                                        joiner.add(Arrays.toString(obj));\n                                    }\n                                    else {\n                                    }\n                                }\n                                else {\n                                    joiner.add(/* valueOf */ new String(obj).toString());\n                                }\n                            }\n                        }\n                        return joiner.toString();\n                    })();\n                }\n                else if (((a != null && a instanceof Array) || a === null) && arraysIveSeen === undefined) {\n                    return java.util.Arrays.deepToString$java_lang_Object_A(a);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Arrays.getCopyLength = function (array, from, to) {\n                javaemul.internal.InternalPreconditions.checkArgument(from <= to, \"%s > %s\", from, to);\n                var len = javaemul.internal.ArrayHelper.getLength(array);\n                to = Math.min(to, len);\n                javaemul.internal.InternalPreconditions.checkCriticalPositionIndexes(from, to, len);\n                return to - from;\n            };\n            /**\n             * Sort a small subsection of an array by insertion sort.\n             *\n             * @param array array to sort\n             * @param low lower bound of range to sort\n             * @param high upper bound of range to sort\n             * @param comp comparator to use\n             */\n            Arrays.insertionSort = function (array, low, high, comp) {\n                for (var i = low + 1; i < high; ++i) {\n                    for (var j = i; j > low && comp.compare(array[j - 1], array[j]) > 0; --j) {\n                        var t = array[j];\n                        array[j] = array[j - 1];\n                        array[j - 1] = t;\n                    }\n                }\n            };\n            /**\n             * Merge the two sorted subarrays (srcLow,srcMid] and (srcMid,srcHigh] into\n             * dest.\n             *\n             * @param src source array for merge\n             * @param srcLow lower bound of bottom sorted half\n             * @param srcMid upper bound of bottom sorted half & lower bound of top sorted\n             * half\n             * @param srcHigh upper bound of top sorted half\n             * @param dest destination array for merge\n             * @param destLow lower bound of destination\n             * @param destHigh upper bound of destination\n             * @param comp comparator to use\n             */\n            Arrays.merge = function (src, srcLow, srcMid, srcHigh, dest, destLow, destHigh, comp) {\n                var topIdx = srcMid;\n                while ((destLow < destHigh)) {\n                    if (topIdx >= srcHigh || (srcLow < srcMid && comp.compare(src[srcLow], src[topIdx]) <= 0)) {\n                        dest[destLow++] = src[srcLow++];\n                    }\n                    else {\n                        dest[destLow++] = src[topIdx++];\n                    }\n                }\n                ;\n            };\n            /**\n             * Performs a merge sort on the specified portion of an object array.\n             *\n             * Uses O(n) temporary space to perform the merge, but is stable.\n             */\n            Arrays.mergeSort$java_lang_Object_A$int$int$java_util_Comparator = function (x, fromIndex, toIndex, comp) {\n                if (comp == null) {\n                    comp = java.util.Comparators.natural();\n                }\n                var temp = Arrays.copyOfRange(x, fromIndex, toIndex);\n                Arrays.mergeSort(temp, x, fromIndex, toIndex, -fromIndex, comp);\n            };\n            /**\n             * Recursive helper function for\n             * {@link Arrays#mergeSort(Object[], int, int, Comparator)}.\n             *\n             * @param temp temporary space, as large as the range of elements being\n             * sorted. On entry, temp should contain a copy of the sort range\n             * from array.\n             * @param array array to sort\n             * @param low lower bound of range to sort\n             * @param high upper bound of range to sort\n             * @param ofs offset to convert an array index into a temp index\n             * @param comp comparison function\n             */\n            Arrays.mergeSort = function (temp, array, low, high, ofs, comp) {\n                if (((temp != null && temp instanceof Array) || temp === null) && ((array != null && array instanceof Array) || array === null) && ((typeof low === 'number') || low === null) && ((typeof high === 'number') || high === null) && ((typeof ofs === 'number') || ofs === null) && ((comp != null && (comp[\"__interfaces\"] != null && comp[\"__interfaces\"].indexOf(\"java.util.Comparator\") >= 0 || comp.constructor != null && comp.constructor[\"__interfaces\"] != null && comp.constructor[\"__interfaces\"].indexOf(\"java.util.Comparator\") >= 0)) || comp === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var length = high - low;\n                        if (length < 7) {\n                            Arrays.insertionSort(array, low, high, comp);\n                            return;\n                        }\n                        var tempLow = low + ofs;\n                        var tempHigh = high + ofs;\n                        var tempMid = tempLow + ((tempHigh - tempLow) >> 1);\n                        Arrays.mergeSort(array, temp, tempLow, tempMid, -ofs, comp);\n                        Arrays.mergeSort(array, temp, tempMid, tempHigh, -ofs, comp);\n                        if (comp.compare(temp[tempMid - 1], temp[tempMid]) <= 0) {\n                            while ((low < high)) {\n                                array[low++] = temp[tempLow++];\n                            }\n                            ;\n                            return;\n                        }\n                        Arrays.merge(temp, tempLow, tempMid, tempHigh, array, low, high, comp);\n                    })();\n                }\n                else if (((temp != null && temp instanceof Array) || temp === null) && ((typeof array === 'number') || array === null) && ((typeof low === 'number') || low === null) && ((high != null && (high[\"__interfaces\"] != null && high[\"__interfaces\"].indexOf(\"java.util.Comparator\") >= 0 || high.constructor != null && high.constructor[\"__interfaces\"] != null && high.constructor[\"__interfaces\"].indexOf(\"java.util.Comparator\") >= 0)) || high === null) && ofs === undefined && comp === undefined) {\n                    return java.util.Arrays.mergeSort$java_lang_Object_A$int$int$java_util_Comparator(temp, array, low, high);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Sort an entire array of number primitives.\n             */\n            Arrays.nativeLongSort$java_lang_Object$java_lang_Object = function (array, compareFunction) {\n                array.sort(compareFunction);\n            };\n            /**\n             * Sort a subset of an array of number primitives.\n             */\n            Arrays.nativeLongSort = function (array, fromIndex, toIndex) {\n                if (((array != null) || array === null) && ((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var temp = javaemul.internal.ArrayHelper.unsafeClone(array, fromIndex, toIndex);\n                        Arrays.nativeLongSort(temp, javaemul.internal.LongCompareHolder.getLongComparator());\n                        javaemul.internal.ArrayHelper.copy(temp, 0, array, fromIndex, toIndex - fromIndex);\n                    })();\n                }\n                else if (((array != null) || array === null) && ((fromIndex != null) || fromIndex === null) && toIndex === undefined) {\n                    return java.util.Arrays.nativeLongSort$java_lang_Object$java_lang_Object(array, fromIndex);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Sort an entire array of number primitives.\n             */\n            Arrays.nativeNumberSort$java_lang_Object = function (array) {\n                array.sort(function (a, b) {\n                    return a - b;\n                });\n            };\n            /**\n             * Sort a subset of an array of number primitives.\n             */\n            Arrays.nativeNumberSort = function (array, fromIndex, toIndex) {\n                if (((array != null) || array === null) && ((typeof fromIndex === 'number') || fromIndex === null) && ((typeof toIndex === 'number') || toIndex === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var temp = javaemul.internal.ArrayHelper.unsafeClone(array, fromIndex, toIndex);\n                        Arrays.nativeNumberSort(temp);\n                        javaemul.internal.ArrayHelper.copy(temp, 0, array, fromIndex, toIndex - fromIndex);\n                    })();\n                }\n                else if (((array != null) || array === null) && fromIndex === undefined && toIndex === undefined) {\n                    return java.util.Arrays.nativeNumberSort$java_lang_Object(array);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            return Arrays;\n        }());\n        util.Arrays = Arrays;\n        Arrays[\"__class\"] = \"java.util.Arrays\";\n        var Arrays;\n        (function (Arrays) {\n            var ArrayList = (function (_super) {\n                __extends(ArrayList, _super);\n                function ArrayList(array) {\n                    _super.call(this);\n                    this.array = array;\n                }\n                ArrayList.prototype.contains = function (o) {\n                    return (this.indexOf(o) !== -1);\n                };\n                ArrayList.prototype.get = function (index) {\n                    javaemul.internal.InternalPreconditions.checkElementIndex(index, this.size());\n                    return this.array[index];\n                };\n                ArrayList.prototype.set = function (index, value) {\n                    var was = this.get(index);\n                    this.array[index] = value;\n                    return was;\n                };\n                ArrayList.prototype.size = function () {\n                    return this.array.length;\n                };\n                ArrayList.prototype.toArray$ = function () {\n                    return this.toArray(new Array(this.array.length));\n                };\n                ArrayList.prototype.toArray = function (out) {\n                    var _this = this;\n                    if (((out != null && out instanceof Array) || out === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            var size = _this.size();\n                            if (out.length < size) {\n                                out = javaemul.internal.ArrayHelper.createFrom(out, size);\n                            }\n                            for (var i = 0; i < size; ++i) {\n                                out[i] = _this.array[i];\n                            }\n                            if (out.length > size) {\n                                out[size] = null;\n                            }\n                            return out;\n                        })();\n                    }\n                    else if (out === undefined) {\n                        return this.toArray$();\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                return ArrayList;\n            }(java.util.AbstractList));\n            Arrays.ArrayList = ArrayList;\n            ArrayList[\"__class\"] = \"java.util.Arrays.ArrayList\";\n            ArrayList[\"__interfaces\"] = [\"java.util.RandomAccess\", \"java.util.List\", \"java.util.Collection\", \"java.lang.Iterable\", \"java.io.Serializable\"];\n        })(Arrays = util.Arrays || (util.Arrays = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * To keep performance characteristics in line with Java community expectations,\n         * <code>Vector</code> is a wrapper around <code>ArrayList</code>. <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/Vector.html\">[Sun\n         * docs]</a>\n         *\n         * @param <E> element type.\n         */\n        var Vector = (function (_super) {\n            __extends(Vector, _super);\n            /**\n             * Capacity increment is ignored.\n             */\n            function Vector(initialCapacity, ignoredCapacityIncrement) {\n                var _this = this;\n                if (((typeof initialCapacity === 'number') || initialCapacity === null) && ((typeof ignoredCapacityIncrement === 'number') || ignoredCapacityIncrement === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    {\n                        var __args_11 = Array.prototype.slice.call(arguments);\n                        _super.call(this);\n                        (function () {\n                            _this.arrayList = (new java.util.ArrayList(initialCapacity));\n                        })();\n                    }\n                }\n                else if (((initialCapacity != null && (initialCapacity[\"__interfaces\"] != null && initialCapacity[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || initialCapacity.constructor != null && initialCapacity.constructor[\"__interfaces\"] != null && initialCapacity.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || initialCapacity === null) && ignoredCapacityIncrement === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var c_1 = __args[0];\n                    _super.call(this);\n                    (function () {\n                        _this.arrayList = (new java.util.ArrayList());\n                        _this.addAll(c_1);\n                    })();\n                }\n                else if (((typeof initialCapacity === 'number') || initialCapacity === null) && ignoredCapacityIncrement === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    (function () {\n                        _this.arrayList = (new java.util.ArrayList(initialCapacity));\n                    })();\n                }\n                else if (initialCapacity === undefined && ignoredCapacityIncrement === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    (function () {\n                        _this.arrayList = (new java.util.ArrayList());\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            Vector.prototype.forEach = function (action) {\n                javaemul.internal.InternalPreconditions.checkNotNull(action);\n                for (var index157 = this.iterator(); index157.hasNext();) {\n                    var t = index157.next();\n                    {\n                        action(t);\n                    }\n                }\n            };\n            Vector.prototype.add$java_lang_Object = function (o) {\n                return this.arrayList.add(o);\n            };\n            Vector.prototype.add = function (index, o) {\n                var _this = this;\n                if (((typeof index === 'number') || index === null) && ((o != null) || o === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        Vector.checkArrayElementIndex(index, _this.size() + 1);\n                        _this.arrayList.add(index, o);\n                    })();\n                }\n                else if (((index != null) || index === null) && o === undefined) {\n                    return this.add$java_lang_Object(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Vector.prototype.addAll$java_util_Collection = function (c) {\n                return this.arrayList.addAll(c);\n            };\n            Vector.prototype.addAll = function (index, c) {\n                var _this = this;\n                if (((typeof index === 'number') || index === null) && ((c != null && (c[\"__interfaces\"] != null && c[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || c.constructor != null && c.constructor[\"__interfaces\"] != null && c.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || c === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return _this.arrayList.addAll(index, c);\n                    })();\n                }\n                else if (((index != null && (index[\"__interfaces\"] != null && index[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || index.constructor != null && index.constructor[\"__interfaces\"] != null && index.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || index === null) && c === undefined) {\n                    return this.addAll$java_util_Collection(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Vector.prototype.addElement = function (o) {\n                this.add(o);\n            };\n            Vector.prototype.capacity = function () {\n                return this.arrayList.size();\n            };\n            Vector.prototype.clear = function () {\n                this.arrayList.clear();\n            };\n            Vector.prototype.clone = function () {\n                return (new Vector(this));\n            };\n            Vector.prototype.contains = function (elem) {\n                return this.arrayList.contains(elem);\n            };\n            Vector.prototype.containsAll = function (c) {\n                return this.arrayList.containsAll(c);\n            };\n            Vector.prototype.copyInto = function (objs) {\n                var i = -1;\n                var n = this.size();\n                while ((++i < n)) {\n                    objs[i] = this.get(i);\n                }\n                ;\n            };\n            Vector.prototype.elementAt = function (index) {\n                return this.get(index);\n            };\n            Vector.prototype.elements = function () {\n                return java.util.Collections.enumeration(this.arrayList);\n            };\n            Vector.prototype.ensureCapacity = function (capacity) {\n                this.arrayList.ensureCapacity(capacity);\n            };\n            Vector.prototype.firstElement = function () {\n                javaemul.internal.InternalPreconditions.checkElement(!this.isEmpty());\n                return this.get(0);\n            };\n            Vector.prototype.get = function (index) {\n                Vector.checkArrayElementIndex(index, this.size());\n                return this.arrayList.get(index);\n            };\n            Vector.prototype.indexOf$java_lang_Object = function (elem) {\n                return this.arrayList.indexOf(elem);\n            };\n            Vector.prototype.indexOf = function (elem, index) {\n                var _this = this;\n                if (((elem != null) || elem === null) && ((typeof index === 'number') || index === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        Vector.checkArrayIndexOutOfBounds(index >= 0, index);\n                        return _this.arrayList.indexOf(elem, index);\n                    })();\n                }\n                else if (((elem != null) || elem === null) && index === undefined) {\n                    return this.indexOf$java_lang_Object(elem);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Vector.prototype.insertElementAt = function (o, index) {\n                this.add(index, o);\n            };\n            Vector.prototype.isEmpty = function () {\n                return (this.arrayList.size() === 0);\n            };\n            Vector.prototype.iterator = function () {\n                return this.arrayList.iterator();\n            };\n            Vector.prototype.lastElement = function () {\n                javaemul.internal.InternalPreconditions.checkElement(!this.isEmpty());\n                return this.get(this.size() - 1);\n            };\n            Vector.prototype.lastIndexOf$java_lang_Object = function (o) {\n                return this.arrayList.lastIndexOf(o);\n            };\n            Vector.prototype.lastIndexOf = function (o, index) {\n                var _this = this;\n                if (((o != null) || o === null) && ((typeof index === 'number') || index === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        Vector.checkArrayIndexOutOfBounds(index < _this.size(), index);\n                        return _this.arrayList.lastIndexOf(o, index);\n                    })();\n                }\n                else if (((o != null) || o === null) && index === undefined) {\n                    return this.lastIndexOf$java_lang_Object(o);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Vector.prototype.remove = function (index) {\n                var _this = this;\n                if (((typeof index === 'number') || index === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        Vector.checkArrayElementIndex(index, _this.size());\n                        return _this.arrayList.remove(index);\n                    })();\n                }\n                else if (((index != null) || index === null)) {\n                    return this.remove$java_lang_Object(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Vector.prototype.removeAll = function (c) {\n                return this.arrayList.removeAll(c);\n            };\n            Vector.prototype.removeAllElements = function () {\n                this.clear();\n            };\n            Vector.prototype.removeElement = function (o) {\n                return this.remove(o);\n            };\n            Vector.prototype.removeElementAt = function (index) {\n                this.remove(index);\n            };\n            Vector.prototype.set = function (index, elem) {\n                Vector.checkArrayElementIndex(index, this.size());\n                return this.arrayList.set(index, elem);\n            };\n            Vector.prototype.setElementAt = function (o, index) {\n                this.set(index, o);\n            };\n            Vector.prototype.setSize = function (size) {\n                Vector.checkArrayIndexOutOfBounds(size >= 0, size);\n                this.arrayList.setSize(size);\n            };\n            Vector.prototype.size = function () {\n                return this.arrayList.size();\n            };\n            Vector.prototype.subList = function (fromIndex, toIndex) {\n                return this.arrayList.subList(fromIndex, toIndex);\n            };\n            Vector.prototype.toArray$ = function () {\n                return this.arrayList.toArray();\n            };\n            Vector.prototype.toArray = function (a) {\n                var _this = this;\n                if (((a != null && a instanceof Array) || a === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return _this.arrayList.toArray(a);\n                    })();\n                }\n                else if (a === undefined) {\n                    return this.toArray$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Vector.prototype.toString = function () {\n                return this.arrayList.toString();\n            };\n            Vector.prototype.trimToSize = function () {\n                this.arrayList.trimToSize();\n            };\n            Vector.prototype.removeRange = function (fromIndex, endIndex) {\n                this.arrayList.removeRange(fromIndex, endIndex);\n            };\n            Vector.checkArrayElementIndex = function (index, size) {\n                if (index < 0 || index >= size) {\n                    throw new java.lang.ArrayIndexOutOfBoundsException();\n                }\n            };\n            Vector.checkArrayIndexOutOfBounds = function (expression, index) {\n                if (!expression) {\n                    throw new java.lang.ArrayIndexOutOfBoundsException(/* valueOf */ new String(index).toString());\n                }\n            };\n            return Vector;\n        }(java.util.AbstractList));\n        util.Vector = Vector;\n        Vector[\"__class\"] = \"java.util.Vector\";\n        Vector[\"__interfaces\"] = [\"java.util.RandomAccess\", \"java.util.List\", \"java.lang.Cloneable\", \"java.util.Collection\", \"java.lang.Iterable\", \"java.io.Serializable\"];\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * An unbounded priority queue based on a priority heap. <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/PriorityQueue.html\">[Sun\n         * docs]</a>\n         *\n         * @param <E> element type.\n         */\n        var PriorityQueue = (function (_super) {\n            __extends(PriorityQueue, _super);\n            function PriorityQueue(initialCapacity, cmp) {\n                var _this = this;\n                if (((typeof initialCapacity === 'number') || initialCapacity === null) && ((cmp != null && (cmp[\"__interfaces\"] != null && cmp[\"__interfaces\"].indexOf(\"java.util.Comparator\") >= 0 || cmp.constructor != null && cmp.constructor[\"__interfaces\"] != null && cmp.constructor[\"__interfaces\"].indexOf(\"java.util.Comparator\") >= 0)) || cmp === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    (function () {\n                        _this.heap = (new java.util.ArrayList(initialCapacity));\n                        if (cmp == null) {\n                            cmp = java.util.Comparators.natural();\n                        }\n                        _this.cmp = cmp;\n                    })();\n                }\n                else if (((initialCapacity != null && initialCapacity instanceof java.util.PriorityQueue) || initialCapacity === null) && cmp === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var c_2 = __args[0];\n                    {\n                        var __args_12 = Array.prototype.slice.call(arguments);\n                        var initialCapacity_2 = c_2.size();\n                        var cmp_1 = c_2.comparator();\n                        _super.call(this);\n                        (function () {\n                            _this.heap = (new java.util.ArrayList(initialCapacity_2));\n                            if (cmp_1 == null) {\n                                cmp_1 = java.util.Comparators.natural();\n                            }\n                            _this.cmp = cmp_1;\n                        })();\n                    }\n                    (function () {\n                        _this.addAll(c_2);\n                    })();\n                }\n                else if (((initialCapacity != null && (initialCapacity[\"__interfaces\"] != null && initialCapacity[\"__interfaces\"].indexOf(\"java.util.SortedSet\") >= 0 || initialCapacity.constructor != null && initialCapacity.constructor[\"__interfaces\"] != null && initialCapacity.constructor[\"__interfaces\"].indexOf(\"java.util.SortedSet\") >= 0)) || initialCapacity === null) && cmp === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var c_3 = __args[0];\n                    {\n                        var __args_13 = Array.prototype.slice.call(arguments);\n                        var initialCapacity_3 = c_3.size();\n                        var cmp_2 = c_3.comparator();\n                        _super.call(this);\n                        (function () {\n                            _this.heap = (new java.util.ArrayList(initialCapacity_3));\n                            if (cmp_2 == null) {\n                                cmp_2 = java.util.Comparators.natural();\n                            }\n                            _this.cmp = cmp_2;\n                        })();\n                    }\n                    (function () {\n                        _this.addAll(c_3);\n                    })();\n                }\n                else if (((initialCapacity != null && (initialCapacity[\"__interfaces\"] != null && initialCapacity[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || initialCapacity.constructor != null && initialCapacity.constructor[\"__interfaces\"] != null && initialCapacity.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || initialCapacity === null) && cmp === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var c_4 = __args[0];\n                    {\n                        var __args_14 = Array.prototype.slice.call(arguments);\n                        var initialCapacity_4 = c_4.size();\n                        {\n                            var __args_15 = Array.prototype.slice.call(arguments);\n                            var cmp_3 = null;\n                            _super.call(this);\n                            (function () {\n                                _this.heap = (new java.util.ArrayList(initialCapacity_4));\n                                if (cmp_3 == null) {\n                                    cmp_3 = java.util.Comparators.natural();\n                                }\n                                _this.cmp = cmp_3;\n                            })();\n                        }\n                    }\n                    (function () {\n                        _this.addAll(c_4);\n                    })();\n                }\n                else if (((typeof initialCapacity === 'number') || initialCapacity === null) && cmp === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    {\n                        var __args_16 = Array.prototype.slice.call(arguments);\n                        var cmp_4 = null;\n                        _super.call(this);\n                        (function () {\n                            _this.heap = (new java.util.ArrayList(initialCapacity));\n                            if (cmp_4 == null) {\n                                cmp_4 = java.util.Comparators.natural();\n                            }\n                            _this.cmp = cmp_4;\n                        })();\n                    }\n                }\n                else if (initialCapacity === undefined && cmp === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    {\n                        var __args_17 = Array.prototype.slice.call(arguments);\n                        var initialCapacity_5 = 11;\n                        {\n                            var __args_18 = Array.prototype.slice.call(arguments);\n                            var cmp_5 = null;\n                            _super.call(this);\n                            (function () {\n                                _this.heap = (new java.util.ArrayList(initialCapacity_5));\n                                if (cmp_5 == null) {\n                                    cmp_5 = java.util.Comparators.natural();\n                                }\n                                _this.cmp = cmp_5;\n                            })();\n                        }\n                    }\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            PriorityQueue.getLeftChild = function (node) {\n                return 2 * node + 1;\n            };\n            PriorityQueue.getParent = function (node) {\n                return ((node - 1) / 2 | 0);\n            };\n            PriorityQueue.getRightChild = function (node) {\n                return 2 * node + 2;\n            };\n            PriorityQueue.isLeaf = function (node, size) {\n                return node * 2 + 1 >= size;\n            };\n            PriorityQueue.prototype.addAll = function (index, c) {\n                if (((index != null && (index[\"__interfaces\"] != null && index[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || index.constructor != null && index.constructor[\"__interfaces\"] != null && index.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || index === null) && c === undefined) {\n                    return this.addAll$java_util_Collection(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            PriorityQueue.prototype.addAll$java_util_Collection = function (c) {\n                if (this.heap.addAll(c)) {\n                    this.makeHeap(0);\n                    return true;\n                }\n                return false;\n            };\n            PriorityQueue.prototype.clear = function () {\n                this.heap.clear();\n            };\n            PriorityQueue.prototype.comparator = function () {\n                return this.cmp === java.util.Comparators.natural() ? null : this.cmp;\n            };\n            PriorityQueue.prototype.contains = function (o) {\n                return this.heap.contains(o);\n            };\n            PriorityQueue.prototype.containsAll = function (c) {\n                return this.heap.containsAll(c);\n            };\n            PriorityQueue.prototype.isEmpty = function () {\n                return this.heap.isEmpty();\n            };\n            PriorityQueue.prototype.iterator = function () {\n                return java.util.Collections.unmodifiableList(this.heap).iterator();\n            };\n            PriorityQueue.prototype.offer = function (e) {\n                var node = this.heap.size();\n                this.heap.add(e);\n                while ((node > 0)) {\n                    var childNode = node;\n                    node = PriorityQueue.getParent(node);\n                    if (this.cmp.compare(this.heap.get(node), e) <= 0) {\n                        this.heap.set(childNode, e);\n                        return true;\n                    }\n                    this.heap.set(childNode, this.heap.get(node));\n                }\n                ;\n                this.heap.set(node, e);\n                return true;\n            };\n            PriorityQueue.prototype.peek = function () {\n                if (this.heap.size() === 0) {\n                    return null;\n                }\n                return this.heap.get(0);\n            };\n            PriorityQueue.prototype.poll = function () {\n                if (this.heap.size() === 0) {\n                    return null;\n                }\n                var value = this.heap.get(0);\n                this.removeAtIndex(0);\n                return value;\n            };\n            PriorityQueue.prototype.remove = function (index) {\n                if (((index != null) || index === null)) {\n                    return this.remove$java_lang_Object(index);\n                }\n                else if (index === undefined) {\n                    return this.remove$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            PriorityQueue.prototype.remove$java_lang_Object = function (o) {\n                var index = this.heap.indexOf(o);\n                if (index < 0) {\n                    return false;\n                }\n                this.removeAtIndex(index);\n                return true;\n            };\n            PriorityQueue.prototype.removeAll = function (c) {\n                if (this.heap.removeAll(c)) {\n                    this.makeHeap(0);\n                    return true;\n                }\n                return false;\n            };\n            PriorityQueue.prototype.retainAll = function (c) {\n                if (this.heap.retainAll(c)) {\n                    this.makeHeap(0);\n                    return true;\n                }\n                return false;\n            };\n            PriorityQueue.prototype.size = function () {\n                return this.heap.size();\n            };\n            PriorityQueue.prototype.toArray$ = function () {\n                return this.heap.toArray();\n            };\n            PriorityQueue.prototype.toArray = function (a) {\n                var _this = this;\n                if (((a != null && a instanceof Array) || a === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return _this.heap.toArray(a);\n                    })();\n                }\n                else if (a === undefined) {\n                    return this.toArray$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            PriorityQueue.prototype.toString = function () {\n                return this.heap.toString();\n            };\n            /**\n             * Make the subtree rooted at <code>node</code> a valid heap. O(n) time\n             *\n             * @param node\n             */\n            PriorityQueue.prototype.makeHeap = function (node) {\n                if (this.isLeaf(node)) {\n                    return;\n                }\n                this.makeHeap(PriorityQueue.getLeftChild(node));\n                var rightChild = PriorityQueue.getRightChild(node);\n                if (rightChild < this.heap.size()) {\n                    this.makeHeap(rightChild);\n                }\n                this.mergeHeaps(node);\n            };\n            /**\n             * Merge two subheaps into a single heap. O(log n) time\n             *\n             * PRECONDITION: both children of <code>node</code> are heaps\n             *\n             * @param node the parent of the two subtrees to merge\n             */\n            PriorityQueue.prototype.mergeHeaps = function (node) {\n                var heapSize = this.heap.size();\n                var value = this.heap.get(node);\n                while ((!PriorityQueue.isLeaf(node, heapSize))) {\n                    var smallestChild = this.getSmallestChild(node, heapSize);\n                    if (this.cmp.compare(value, this.heap.get(smallestChild)) < 0) {\n                        break;\n                    }\n                    this.heap.set(node, this.heap.get(smallestChild));\n                    node = smallestChild;\n                }\n                ;\n                this.heap.set(node, value);\n            };\n            PriorityQueue.prototype.getSmallestChild = function (node, heapSize) {\n                var smallestChild;\n                var leftChild = PriorityQueue.getLeftChild(node);\n                var rightChild = leftChild + 1;\n                smallestChild = leftChild;\n                if ((rightChild < heapSize) && (this.cmp.compare(this.heap.get(rightChild), this.heap.get(leftChild)) < 0)) {\n                    smallestChild = rightChild;\n                }\n                return smallestChild;\n            };\n            PriorityQueue.prototype.isLeaf = function (node) {\n                return PriorityQueue.isLeaf(node, this.heap.size());\n            };\n            PriorityQueue.prototype.removeAtIndex = function (index) {\n                var lastValue = this.heap.remove(this.heap.size() - 1);\n                if (index < this.heap.size()) {\n                    this.heap.set(index, lastValue);\n                    this.mergeHeaps(index);\n                }\n            };\n            return PriorityQueue;\n        }(java.util.AbstractQueue));\n        util.PriorityQueue = PriorityQueue;\n        PriorityQueue[\"__class\"] = \"java.util.PriorityQueue\";\n        PriorityQueue[\"__interfaces\"] = [\"java.util.Collection\", \"java.util.Queue\", \"java.lang.Iterable\"];\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Skeletal implementation of the Map interface.\n         * <a href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/AbstractMap.html\">\n         * [Sun docs]</a>\n         *\n         * @param <K>\n         * the key type.\n         * @param <V>\n         * the value type.\n         */\n        var AbstractMap = (function () {\n            function AbstractMap() {\n            }\n            AbstractMap.prototype.clear = function () {\n                this.entrySet().clear();\n            };\n            AbstractMap.prototype.containsKey = function (key) {\n                return this.implFindEntry(key, false) != null;\n            };\n            AbstractMap.prototype.containsValue = function (value) {\n                for (var index158 = this.entrySet().iterator(); index158.hasNext();) {\n                    var entry = index158.next();\n                    {\n                        var v = entry.getValue();\n                        if (java.util.Objects.equals(value, v)) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            };\n            AbstractMap.prototype.containsEntry = function (entry) {\n                var key = entry.getKey();\n                var value = entry.getValue();\n                var ourValue = this.get(key);\n                if (!java.util.Objects.equals(value, ourValue)) {\n                    return false;\n                }\n                if (ourValue == null && !this.containsKey(key)) {\n                    return false;\n                }\n                return true;\n            };\n            AbstractMap.prototype.equals = function (obj) {\n                if (obj === this) {\n                    return true;\n                }\n                if (!(obj != null && (obj[\"__interfaces\"] != null && obj[\"__interfaces\"].indexOf(\"java.util.Map\") >= 0 || obj.constructor != null && obj.constructor[\"__interfaces\"] != null && obj.constructor[\"__interfaces\"].indexOf(\"java.util.Map\") >= 0))) {\n                    return false;\n                }\n                var otherMap = obj;\n                if (this.size() !== otherMap.size()) {\n                    return false;\n                }\n                for (var index159 = otherMap.entrySet().iterator(); index159.hasNext();) {\n                    var entry = index159.next();\n                    {\n                        if (!this.containsEntry(entry)) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            };\n            AbstractMap.prototype.get = function (key) {\n                return AbstractMap.getEntryValueOrNull(this.implFindEntry(key, false));\n            };\n            AbstractMap.prototype.hashCode = function () {\n                return java.util.Collections.hashCode(this.entrySet());\n            };\n            AbstractMap.prototype.isEmpty = function () {\n                return this.size() === 0;\n            };\n            AbstractMap.prototype.keySet = function () {\n                return new AbstractMap.AbstractMap$0(this);\n            };\n            AbstractMap.prototype.put = function (key, value) {\n                if (((key != null) || key === null) && ((value != null) || value === null)) {\n                    return this.put$java_lang_Object$java_lang_Object(key, value);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractMap.prototype.put$java_lang_Object$java_lang_Object = function (key, value) {\n                throw new java.lang.UnsupportedOperationException(\"Put not supported on this map\");\n            };\n            AbstractMap.prototype.putAll = function (map) {\n                javaemul.internal.InternalPreconditions.checkNotNull(map);\n                for (var index160 = map.entrySet().iterator(); index160.hasNext();) {\n                    var e = index160.next();\n                    {\n                        this.put(e.getKey(), e.getValue());\n                    }\n                }\n            };\n            AbstractMap.prototype.remove = function (key) {\n                return AbstractMap.getEntryValueOrNull(this.implFindEntry(key, true));\n            };\n            AbstractMap.prototype.size = function () {\n                return this.entrySet().size();\n            };\n            AbstractMap.prototype.toString$ = function () {\n                var joiner = new java.util.StringJoiner(\", \", \"{\", \"}\");\n                for (var index161 = this.entrySet().iterator(); index161.hasNext();) {\n                    var entry = index161.next();\n                    {\n                        joiner.add(this.toString(entry));\n                    }\n                }\n                return joiner.toString();\n            };\n            AbstractMap.prototype.toString = function (entry) {\n                var _this = this;\n                if (((entry != null && (entry[\"__interfaces\"] != null && entry[\"__interfaces\"].indexOf(\"java.util.Map.Entry\") >= 0 || entry.constructor != null && entry.constructor[\"__interfaces\"] != null && entry.constructor[\"__interfaces\"].indexOf(\"java.util.Map.Entry\") >= 0)) || entry === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return _this.toString(entry.getKey()) + \"=\" + _this.toString(entry.getValue());\n                    })();\n                }\n                else if (((entry != null) || entry === null)) {\n                    return this.toString$java_lang_Object(entry);\n                }\n                else if (entry === undefined) {\n                    return this.toString$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractMap.prototype.toString$java_lang_Object = function (o) {\n                return o === this ? \"(this Map)\" : new String(o).toString();\n            };\n            AbstractMap.prototype.values = function () {\n                return new AbstractMap.AbstractMap$1(this);\n            };\n            AbstractMap.getEntryKeyOrNull = function (entry) {\n                return entry == null ? null : entry.getKey();\n            };\n            AbstractMap.getEntryValueOrNull = function (entry) {\n                return entry == null ? null : entry.getValue();\n            };\n            AbstractMap.prototype.implFindEntry = function (key, remove) {\n                for (var iter = this.entrySet().iterator(); iter.hasNext();) {\n                    var entry = iter.next();\n                    var k = entry.getKey();\n                    if (java.util.Objects.equals(key, k)) {\n                        if (remove) {\n                            entry = (new AbstractMap.SimpleEntry(entry.getKey(), entry.getValue()));\n                            iter.remove();\n                        }\n                        return entry;\n                    }\n                }\n                return null;\n            };\n            return AbstractMap;\n        }());\n        util.AbstractMap = AbstractMap;\n        AbstractMap[\"__class\"] = \"java.util.AbstractMap\";\n        AbstractMap[\"__interfaces\"] = [\"java.util.Map\"];\n        var AbstractMap;\n        (function (AbstractMap) {\n            /**\n             * Basic {@link Map.Entry} implementation used by {@link SimpleEntry} and\n             * {@link SimpleImmutableEntry}.\n             */\n            var AbstractEntry = (function () {\n                function AbstractEntry(key, value) {\n                    this.key = key;\n                    this.value = value;\n                }\n                AbstractEntry.prototype.getKey = function () {\n                    return this.key;\n                };\n                AbstractEntry.prototype.getValue = function () {\n                    return this.value;\n                };\n                AbstractEntry.prototype.setValue = function (value) {\n                    var oldValue = this.value;\n                    this.value = value;\n                    return oldValue;\n                };\n                AbstractEntry.prototype.equals = function (other) {\n                    if (!(other != null && (other[\"__interfaces\"] != null && other[\"__interfaces\"].indexOf(\"java.util.Map.Entry\") >= 0 || other.constructor != null && other.constructor[\"__interfaces\"] != null && other.constructor[\"__interfaces\"].indexOf(\"java.util.Map.Entry\") >= 0))) {\n                        return false;\n                    }\n                    var entry = other;\n                    return java.util.Objects.equals(this.key, entry.getKey()) && java.util.Objects.equals(this.value, entry.getValue());\n                };\n                /**\n                 * Calculate the hash code using Sun's specified algorithm.\n                 */\n                AbstractEntry.prototype.hashCode = function () {\n                    return java.util.Objects.hashCode(this.key) ^ java.util.Objects.hashCode(this.value);\n                };\n                AbstractEntry.prototype.toString = function () {\n                    return this.key + \"=\" + this.value;\n                };\n                return AbstractEntry;\n            }());\n            AbstractMap.AbstractEntry = AbstractEntry;\n            AbstractEntry[\"__class\"] = \"java.util.AbstractMap.AbstractEntry\";\n            AbstractEntry[\"__interfaces\"] = [\"java.util.Map.Entry\"];\n            /**\n             * A mutable {@link Map.Entry} shared by several {@link Map}\n             * implementations.\n             */\n            var SimpleEntry = (function (_super) {\n                __extends(SimpleEntry, _super);\n                function SimpleEntry(key, value) {\n                    if (((key != null) || key === null) && ((value != null) || value === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        _super.call(this, key, value);\n                    }\n                    else if (((key != null && (key[\"__interfaces\"] != null && key[\"__interfaces\"].indexOf(\"java.util.Map.Entry\") >= 0 || key.constructor != null && key.constructor[\"__interfaces\"] != null && key.constructor[\"__interfaces\"].indexOf(\"java.util.Map.Entry\") >= 0)) || key === null) && value === undefined) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        var entry = __args[0];\n                        _super.call(this, entry.getKey(), entry.getValue());\n                    }\n                    else\n                        throw new Error('invalid overload');\n                }\n                return SimpleEntry;\n            }(AbstractMap.AbstractEntry));\n            AbstractMap.SimpleEntry = SimpleEntry;\n            SimpleEntry[\"__class\"] = \"java.util.AbstractMap.SimpleEntry\";\n            SimpleEntry[\"__interfaces\"] = [\"java.util.Map.Entry\"];\n            /**\n             * An immutable {@link Map.Entry} shared by several {@link Map}\n             * implementations.\n             */\n            var SimpleImmutableEntry = (function (_super) {\n                __extends(SimpleImmutableEntry, _super);\n                function SimpleImmutableEntry(key, value) {\n                    if (((key != null) || key === null) && ((value != null) || value === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        _super.call(this, key, value);\n                    }\n                    else if (((key != null && (key[\"__interfaces\"] != null && key[\"__interfaces\"].indexOf(\"java.util.Map.Entry\") >= 0 || key.constructor != null && key.constructor[\"__interfaces\"] != null && key.constructor[\"__interfaces\"].indexOf(\"java.util.Map.Entry\") >= 0)) || key === null) && value === undefined) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        var entry = __args[0];\n                        _super.call(this, entry.getKey(), entry.getValue());\n                    }\n                    else\n                        throw new Error('invalid overload');\n                }\n                SimpleImmutableEntry.prototype.setValue = function (value) {\n                    throw new java.lang.UnsupportedOperationException();\n                };\n                return SimpleImmutableEntry;\n            }(AbstractMap.AbstractEntry));\n            AbstractMap.SimpleImmutableEntry = SimpleImmutableEntry;\n            SimpleImmutableEntry[\"__class\"] = \"java.util.AbstractMap.SimpleImmutableEntry\";\n            SimpleImmutableEntry[\"__interfaces\"] = [\"java.util.Map.Entry\"];\n            var AbstractMap$0 = (function (_super) {\n                __extends(AbstractMap$0, _super);\n                function AbstractMap$0(__parent) {\n                    _super.call(this);\n                    this.__parent = __parent;\n                }\n                AbstractMap$0.prototype.clear = function () {\n                    this.__parent.clear();\n                };\n                AbstractMap$0.prototype.contains = function (key) {\n                    return this.__parent.containsKey(key);\n                };\n                AbstractMap$0.prototype.iterator = function () {\n                    var outerIter = this.__parent.entrySet().iterator();\n                    return new AbstractMap$0.AbstractMap$0$0(this, outerIter);\n                };\n                AbstractMap$0.prototype.remove = function (key) {\n                    if (this.__parent.containsKey(key)) {\n                        this.__parent.remove(key);\n                        return true;\n                    }\n                    return false;\n                };\n                AbstractMap$0.prototype.size = function () {\n                    return this.__parent.size();\n                };\n                return AbstractMap$0;\n            }(java.util.AbstractSet));\n            AbstractMap.AbstractMap$0 = AbstractMap$0;\n            var AbstractMap$0;\n            (function (AbstractMap$0) {\n                var AbstractMap$0$0 = (function () {\n                    function AbstractMap$0$0(__parent, outerIter) {\n                        this.outerIter = outerIter;\n                        this.__parent = __parent;\n                    }\n                    AbstractMap$0$0.prototype.forEachRemaining = function (consumer) {\n                        javaemul.internal.InternalPreconditions.checkNotNull(consumer);\n                        while ((this.hasNext())) {\n                            consumer(this.next());\n                        }\n                        ;\n                    };\n                    AbstractMap$0$0.prototype.hasNext = function () {\n                        return this.outerIter.hasNext();\n                    };\n                    AbstractMap$0$0.prototype.next = function () {\n                        var entry = this.outerIter.next();\n                        return entry.getKey();\n                    };\n                    AbstractMap$0$0.prototype.remove = function () {\n                        this.outerIter.remove();\n                    };\n                    return AbstractMap$0$0;\n                }());\n                AbstractMap$0.AbstractMap$0$0 = AbstractMap$0$0;\n            })(AbstractMap$0 = AbstractMap.AbstractMap$0 || (AbstractMap.AbstractMap$0 = {}));\n            var AbstractMap$1 = (function (_super) {\n                __extends(AbstractMap$1, _super);\n                function AbstractMap$1(__parent) {\n                    _super.call(this);\n                    this.__parent = __parent;\n                }\n                AbstractMap$1.prototype.clear = function () {\n                    this.__parent.clear();\n                };\n                AbstractMap$1.prototype.contains = function (value) {\n                    return this.__parent.containsValue(value);\n                };\n                AbstractMap$1.prototype.iterator = function () {\n                    var outerIter = this.__parent.entrySet().iterator();\n                    return new AbstractMap$1.AbstractMap$1$0(this, outerIter);\n                };\n                AbstractMap$1.prototype.size = function () {\n                    return this.__parent.size();\n                };\n                return AbstractMap$1;\n            }(java.util.AbstractCollection));\n            AbstractMap.AbstractMap$1 = AbstractMap$1;\n            var AbstractMap$1;\n            (function (AbstractMap$1) {\n                var AbstractMap$1$0 = (function () {\n                    function AbstractMap$1$0(__parent, outerIter) {\n                        this.outerIter = outerIter;\n                        this.__parent = __parent;\n                    }\n                    AbstractMap$1$0.prototype.forEachRemaining = function (consumer) {\n                        javaemul.internal.InternalPreconditions.checkNotNull(consumer);\n                        while ((this.hasNext())) {\n                            consumer(this.next());\n                        }\n                        ;\n                    };\n                    AbstractMap$1$0.prototype.hasNext = function () {\n                        return this.outerIter.hasNext();\n                    };\n                    AbstractMap$1$0.prototype.next = function () {\n                        var entry = this.outerIter.next();\n                        return entry.getValue();\n                    };\n                    AbstractMap$1$0.prototype.remove = function () {\n                        this.outerIter.remove();\n                    };\n                    return AbstractMap$1$0;\n                }());\n                AbstractMap$1.AbstractMap$1$0 = AbstractMap$1$0;\n            })(AbstractMap$1 = AbstractMap.AbstractMap$1 || (AbstractMap.AbstractMap$1 = {}));\n        })(AbstractMap = util.AbstractMap || (util.AbstractMap = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * A {@link java.util.Set} of {@link Enum}s. <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/EnumSet.html\">[Sun\n         * docs]</a>\n         *\n         * @param <E> enumeration type\n         */\n        var EnumSet = (function (_super) {\n            __extends(EnumSet, _super);\n            /**\n             * Single implementation only.\n             */\n            function EnumSet() {\n                _super.call(this);\n            }\n            EnumSet.allOf = function (elementType) {\n                var all = elementType.getEnumConstants();\n                var set = javaemul.internal.ArrayHelper.clone(all, 0, all.length);\n                return (new EnumSet.EnumSetImpl(all, set, all.length));\n            };\n            EnumSet.complementOf = function (other) {\n                var s = other;\n                var all = s.all;\n                var oldSet = s.set;\n                var newSet = javaemul.internal.ArrayHelper.createFrom(oldSet, oldSet.length);\n                for (var i = 0, c = oldSet.length; i < c; ++i) {\n                    if (oldSet[i] == null) {\n                        newSet[i] = all[i];\n                    }\n                }\n                return (new EnumSet.EnumSetImpl(all, newSet, all.length - s.__size));\n            };\n            EnumSet.copyOf$java_util_Collection = function (c) {\n                if (c != null && c instanceof java.util.EnumSet) {\n                    return EnumSet.copyOf(c);\n                }\n                javaemul.internal.InternalPreconditions.checkArgument(!c.isEmpty(), \"Collection is empty\");\n                var iterator = c.iterator();\n                var first = iterator.next();\n                var set = EnumSet.of(first);\n                while ((iterator.hasNext())) {\n                    var e = iterator.next();\n                    set.add(e);\n                }\n                ;\n                return set;\n            };\n            EnumSet.copyOf = function (s) {\n                if (((s != null && s instanceof java.util.EnumSet) || s === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return s.clone();\n                    })();\n                }\n                else if (((s != null && (s[\"__interfaces\"] != null && s[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || s.constructor != null && s.constructor[\"__interfaces\"] != null && s.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || s === null)) {\n                    return java.util.EnumSet.copyOf$java_util_Collection(s);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            EnumSet.noneOf = function (elementType) {\n                var all = elementType.getEnumConstants();\n                return (new EnumSet.EnumSetImpl(all, javaemul.internal.ArrayHelper.createFrom(all, all.length), 0));\n            };\n            EnumSet.of$java_lang_Enum = function (first) {\n                var set = EnumSet.noneOf(first.getDeclaringClass());\n                set.add(first);\n                return set;\n            };\n            EnumSet.of = function (first) {\n                var rest = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    rest[_i - 1] = arguments[_i];\n                }\n                if (((first != null) || first === null) && ((rest != null && rest instanceof Array) || rest === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var set = EnumSet.of(first);\n                        java.util.Collections.addAll(set, rest);\n                        return set;\n                    })();\n                }\n                else if (((first != null) || first === null) && rest === undefined) {\n                    return java.util.EnumSet.of$java_lang_Enum(first);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            EnumSet.range = function (from, to) {\n                javaemul.internal.InternalPreconditions.checkArgument(from.compareTo(to) <= 0, \"%s > %s\", from, to);\n                var all = from.getDeclaringClass().getEnumConstants();\n                var set = javaemul.internal.ArrayHelper.createFrom(all, all.length);\n                var start = from.ordinal();\n                var end = to.ordinal() + 1;\n                for (var i = start; i < end; ++i) {\n                    set[i] = all[i];\n                }\n                return (new EnumSet.EnumSetImpl(all, set, end - start));\n            };\n            return EnumSet;\n        }(java.util.AbstractSet));\n        util.EnumSet = EnumSet;\n        EnumSet[\"__class\"] = \"java.util.EnumSet\";\n        EnumSet[\"__interfaces\"] = [\"java.util.Collection\", \"java.util.Set\", \"java.lang.Iterable\"];\n        var EnumSet;\n        (function (EnumSet) {\n            /**\n             * Implemented via sparse array since the set size is finite. Iteration takes\n             * linear time with respect to the set of the enum rather than the number of\n             * items in the set.\n             *\n             * Note: Implemented as a subclass instead of a concrete final EnumSet class.\n             * This is because declaring an EnumSet.add(E) causes hosted mode to bind to\n             * the tighter method rather than the bridge method; but the tighter method\n             * isn't available in the real JRE.\n             */\n            var EnumSetImpl = (function (_super) {\n                __extends(EnumSetImpl, _super);\n                /**\n                 * Constructs a set taking ownership of the specified set. The size must\n                 * accurately reflect the number of non-null items in set.\n                 */\n                function EnumSetImpl(all, set, size) {\n                    _super.call(this);\n                    this.__size = 0;\n                    this.all = all;\n                    this.set = set;\n                    this.__size = size;\n                }\n                EnumSetImpl.prototype.add = function (index, element) {\n                    if (((index != null) || index === null) && element === undefined) {\n                        return this.add$java_lang_Enum(index);\n                    }\n                    else if (((index != null) || index === null) && element === undefined) {\n                        return this.add$java_lang_Object(index);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                EnumSetImpl.prototype.add$java_lang_Enum = function (e) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(e);\n                    var ordinal = e.ordinal();\n                    if (this.set[ordinal] == null) {\n                        this.set[ordinal] = e;\n                        ++this.__size;\n                        return true;\n                    }\n                    return false;\n                };\n                EnumSetImpl.prototype.clone = function () {\n                    var clonedSet = javaemul.internal.ArrayHelper.clone(this.set, 0, this.set.length);\n                    return (new EnumSet.EnumSetImpl(this.all, clonedSet, this.__size));\n                };\n                EnumSetImpl.prototype.contains = function (o) {\n                    return (o != null && o instanceof java.lang.Enum) && this.containsEnum(o);\n                };\n                EnumSetImpl.prototype.containsEnum = function (e) {\n                    return e != null && this.set[e.ordinal()] === e;\n                };\n                EnumSetImpl.prototype.iterator = function () {\n                    return new EnumSetImpl.IteratorImpl(this);\n                };\n                EnumSetImpl.prototype.remove = function (index) {\n                    if (((index != null) || index === null)) {\n                        return this.remove$java_lang_Object(index);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                EnumSetImpl.prototype.remove$java_lang_Object = function (o) {\n                    return (o != null && o instanceof java.lang.Enum) && this.removeEnum(o);\n                };\n                EnumSetImpl.prototype.removeEnum = function (e) {\n                    if (e != null && this.set[e.ordinal()] === e) {\n                        this.set[e.ordinal()] = null;\n                        --this.__size;\n                        return true;\n                    }\n                    return false;\n                };\n                EnumSetImpl.prototype.size = function () {\n                    return this.__size;\n                };\n                EnumSetImpl.prototype.capacity = function () {\n                    return this.all.length;\n                };\n                return EnumSetImpl;\n            }(java.util.EnumSet));\n            EnumSet.EnumSetImpl = EnumSetImpl;\n            EnumSetImpl[\"__class\"] = \"java.util.EnumSet.EnumSetImpl\";\n            EnumSetImpl[\"__interfaces\"] = [\"java.util.Collection\", \"java.util.Set\", \"java.lang.Iterable\"];\n            var EnumSetImpl;\n            (function (EnumSetImpl) {\n                var IteratorImpl = (function () {\n                    function IteratorImpl(__parent) {\n                        this.__parent = __parent;\n                        this.i = -1;\n                        this.last = -1;\n                        this.findNext();\n                    }\n                    IteratorImpl.prototype.forEachRemaining = function (consumer) {\n                        javaemul.internal.InternalPreconditions.checkNotNull(consumer);\n                        while ((this.hasNext())) {\n                            consumer(this.next());\n                        }\n                        ;\n                    };\n                    IteratorImpl.prototype.hasNext = function () {\n                        return this.i < this.__parent.capacity();\n                    };\n                    IteratorImpl.prototype.next = function () {\n                        javaemul.internal.InternalPreconditions.checkElement(this.hasNext());\n                        this.last = this.i;\n                        this.findNext();\n                        return this.__parent.set[this.last];\n                    };\n                    IteratorImpl.prototype.remove = function () {\n                        javaemul.internal.InternalPreconditions.checkState(this.last !== -1);\n                        this.__parent.set[this.last] = null;\n                        --this.__parent.__size;\n                        this.last = -1;\n                    };\n                    IteratorImpl.prototype.findNext = function () {\n                        ++this.i;\n                        for (var c = this.__parent.capacity(); this.i < c; ++this.i) {\n                            if (this.__parent.set[this.i] != null) {\n                                return;\n                            }\n                        }\n                    };\n                    return IteratorImpl;\n                }());\n                EnumSetImpl.IteratorImpl = IteratorImpl;\n                IteratorImpl[\"__class\"] = \"java.util.EnumSet.EnumSetImpl.IteratorImpl\";\n                IteratorImpl[\"__interfaces\"] = [\"java.util.Iterator\"];\n            })(EnumSetImpl = EnumSet.EnumSetImpl || (EnumSet.EnumSetImpl = {}));\n        })(EnumSet = util.EnumSet || (util.EnumSet = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Implements a set in terms of a hash table. <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/HashSet.html\">[Sun\n         * docs]</a>\n         *\n         * @param <E> element type.\n         */\n        var HashSet = (function (_super) {\n            __extends(HashSet, _super);\n            function HashSet(initialCapacity, loadFactor) {\n                var _this = this;\n                if (((typeof initialCapacity === 'number') || initialCapacity === null) && ((typeof loadFactor === 'number') || loadFactor === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    (function () {\n                        _this.map = (new java.util.HashMap(initialCapacity, loadFactor));\n                    })();\n                }\n                else if (((initialCapacity != null && (initialCapacity[\"__interfaces\"] != null && initialCapacity[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || initialCapacity.constructor != null && initialCapacity.constructor[\"__interfaces\"] != null && initialCapacity.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || initialCapacity === null) && loadFactor === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var c_5 = __args[0];\n                    _super.call(this);\n                    (function () {\n                        _this.map = (new java.util.HashMap(c_5.size()));\n                        _this.addAll(c_5);\n                    })();\n                }\n                else if (((initialCapacity != null && initialCapacity instanceof java.util.HashMap) || initialCapacity === null) && loadFactor === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var map_1 = __args[0];\n                    _super.call(this);\n                    (function () {\n                        _this.map = map_1;\n                    })();\n                }\n                else if (((typeof initialCapacity === 'number') || initialCapacity === null) && loadFactor === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    (function () {\n                        _this.map = (new java.util.HashMap(initialCapacity));\n                    })();\n                }\n                else if (initialCapacity === undefined && loadFactor === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    (function () {\n                        _this.map = (new java.util.HashMap());\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            HashSet.prototype.forEach = function (action) {\n                javaemul.internal.InternalPreconditions.checkNotNull(action);\n                for (var index162 = this.iterator(); index162.hasNext();) {\n                    var t = index162.next();\n                    {\n                        action(t);\n                    }\n                }\n            };\n            HashSet.prototype.add = function (index, element) {\n                if (((index != null) || index === null) && element === undefined) {\n                    return this.add$java_lang_Object(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            HashSet.prototype.add$java_lang_Object = function (o) {\n                var old = this.map.put(o, this);\n                return (old == null);\n            };\n            HashSet.prototype.clear = function () {\n                this.map.clear();\n            };\n            HashSet.prototype.clone = function () {\n                return (new HashSet(this));\n            };\n            HashSet.prototype.contains = function (o) {\n                return this.map.containsKey(o);\n            };\n            HashSet.prototype.isEmpty = function () {\n                return this.map.isEmpty();\n            };\n            HashSet.prototype.iterator = function () {\n                return this.map.keySet().iterator();\n            };\n            HashSet.prototype.remove = function (index) {\n                if (((index != null) || index === null)) {\n                    return this.remove$java_lang_Object(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            HashSet.prototype.remove$java_lang_Object = function (o) {\n                return (this.map.remove(o) != null);\n            };\n            HashSet.prototype.size = function () {\n                return this.map.size();\n            };\n            HashSet.prototype.toString = function () {\n                return this.map.keySet().toString();\n            };\n            return HashSet;\n        }(java.util.AbstractSet));\n        util.HashSet = HashSet;\n        HashSet[\"__class\"] = \"java.util.HashSet\";\n        HashSet[\"__interfaces\"] = [\"java.lang.Cloneable\", \"java.util.Collection\", \"java.util.Set\", \"java.lang.Iterable\", \"java.io.Serializable\"];\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Implements a set using a TreeMap. <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/TreeSet.html\">[Sun\n         * docs]</a>\n         *\n         * @param <E> element type.\n         */\n        var TreeSet = (function (_super) {\n            __extends(TreeSet, _super);\n            function TreeSet(c) {\n                var _this = this;\n                if (((c != null && (c[\"__interfaces\"] != null && c[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || c.constructor != null && c.constructor[\"__interfaces\"] != null && c.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || c === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    {\n                        var __args_19 = Array.prototype.slice.call(arguments);\n                        _super.call(this);\n                        (function () {\n                            _this.map = (new java.util.TreeMap());\n                        })();\n                    }\n                    (function () {\n                        _this.addAll(c);\n                    })();\n                }\n                else if (((c != null && (c[\"__interfaces\"] != null && c[\"__interfaces\"].indexOf(\"java.util.Comparator\") >= 0 || c.constructor != null && c.constructor[\"__interfaces\"] != null && c.constructor[\"__interfaces\"].indexOf(\"java.util.Comparator\") >= 0)) || c === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    (function () {\n                        _this.map = (new java.util.TreeMap(c));\n                    })();\n                }\n                else if (((c != null && (c[\"__interfaces\"] != null && c[\"__interfaces\"].indexOf(\"java.util.SortedSet\") >= 0 || c.constructor != null && c.constructor[\"__interfaces\"] != null && c.constructor[\"__interfaces\"].indexOf(\"java.util.SortedSet\") >= 0)) || c === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var s_1 = __args[0];\n                    {\n                        var __args_20 = Array.prototype.slice.call(arguments);\n                        var c_6 = javaemul.internal.InternalPreconditions.checkNotNull(s_1).comparator();\n                        _super.call(this);\n                        (function () {\n                            _this.map = (new java.util.TreeMap(c_6));\n                        })();\n                    }\n                    (function () {\n                        _this.addAll(s_1);\n                    })();\n                }\n                else if (((c != null && (c[\"__interfaces\"] != null && c[\"__interfaces\"].indexOf(\"java.util.NavigableMap\") >= 0 || c.constructor != null && c.constructor[\"__interfaces\"] != null && c.constructor[\"__interfaces\"].indexOf(\"java.util.NavigableMap\") >= 0)) || c === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var map_2 = __args[0];\n                    _super.call(this);\n                    (function () {\n                        _this.map = map_2;\n                    })();\n                }\n                else if (c === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    (function () {\n                        _this.map = (new java.util.TreeMap());\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            TreeSet.prototype.forEach = function (action) {\n                javaemul.internal.InternalPreconditions.checkNotNull(action);\n                for (var index163 = this.iterator(); index163.hasNext();) {\n                    var t = index163.next();\n                    {\n                        action(t);\n                    }\n                }\n            };\n            TreeSet.prototype.add = function (index, element) {\n                if (((index != null) || index === null) && element === undefined) {\n                    return this.add$java_lang_Object(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            TreeSet.prototype.add$java_lang_Object = function (o) {\n                return this.map.put(o, javaemul.internal.BooleanHelper.FALSE) == null;\n            };\n            TreeSet.prototype.ceiling = function (e) {\n                return this.map.ceilingKey(e);\n            };\n            TreeSet.prototype.clear = function () {\n                this.map.clear();\n            };\n            TreeSet.prototype.comparator = function () {\n                return this.map.comparator();\n            };\n            TreeSet.prototype.contains = function (o) {\n                return this.map.containsKey(o);\n            };\n            TreeSet.prototype.descendingIterator = function () {\n                return this.descendingSet().iterator();\n            };\n            TreeSet.prototype.descendingSet = function () {\n                return (new TreeSet(this.map.descendingMap()));\n            };\n            TreeSet.prototype.first = function () {\n                return this.map.firstKey();\n            };\n            TreeSet.prototype.floor = function (e) {\n                return this.map.floorKey(e);\n            };\n            TreeSet.prototype.headSet$java_lang_Object = function (toElement) {\n                return this.headSet(toElement, false);\n            };\n            TreeSet.prototype.headSet = function (toElement, inclusive) {\n                var _this = this;\n                if (((toElement != null) || toElement === null) && ((typeof inclusive === 'boolean') || inclusive === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return (new TreeSet(_this.map.headMap(toElement, inclusive)));\n                    })();\n                }\n                else if (((toElement != null) || toElement === null) && inclusive === undefined) {\n                    return this.headSet$java_lang_Object(toElement);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            TreeSet.prototype.higher = function (e) {\n                return this.map.higherKey(e);\n            };\n            TreeSet.prototype.iterator = function () {\n                return this.map.keySet().iterator();\n            };\n            TreeSet.prototype.last = function () {\n                return this.map.lastKey();\n            };\n            TreeSet.prototype.lower = function (e) {\n                return this.map.lowerKey(e);\n            };\n            TreeSet.prototype.pollFirst = function () {\n                return java.util.AbstractMap.getEntryKeyOrNull(this.map.pollFirstEntry());\n            };\n            TreeSet.prototype.pollLast = function () {\n                return java.util.AbstractMap.getEntryKeyOrNull(this.map.pollLastEntry());\n            };\n            TreeSet.prototype.remove = function (index) {\n                if (((index != null) || index === null)) {\n                    return this.remove$java_lang_Object(index);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            TreeSet.prototype.remove$java_lang_Object = function (o) {\n                return this.map.remove(o) != null;\n            };\n            TreeSet.prototype.size = function () {\n                return this.map.size();\n            };\n            TreeSet.prototype.subSet = function (fromElement, fromInclusive, toElement, toInclusive) {\n                var _this = this;\n                if (((fromElement != null) || fromElement === null) && ((typeof fromInclusive === 'boolean') || fromInclusive === null) && ((toElement != null) || toElement === null) && ((typeof toInclusive === 'boolean') || toInclusive === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return (new TreeSet(_this.map.subMap(fromElement, fromInclusive, toElement, toInclusive)));\n                    })();\n                }\n                else if (((fromElement != null) || fromElement === null) && ((fromInclusive != null) || fromInclusive === null) && toElement === undefined && toInclusive === undefined) {\n                    return this.subSet$java_lang_Object$java_lang_Object(fromElement, fromInclusive);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            TreeSet.prototype.subSet$java_lang_Object$java_lang_Object = function (fromElement, toElement) {\n                return this.subSet(fromElement, true, toElement, false);\n            };\n            TreeSet.prototype.tailSet$java_lang_Object = function (fromElement) {\n                return this.tailSet(fromElement, true);\n            };\n            TreeSet.prototype.tailSet = function (fromElement, inclusive) {\n                var _this = this;\n                if (((fromElement != null) || fromElement === null) && ((typeof inclusive === 'boolean') || inclusive === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return (new TreeSet(_this.map.tailMap(fromElement, inclusive)));\n                    })();\n                }\n                else if (((fromElement != null) || fromElement === null) && inclusive === undefined) {\n                    return this.tailSet$java_lang_Object(fromElement);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            return TreeSet;\n        }(java.util.AbstractSet));\n        util.TreeSet = TreeSet;\n        TreeSet[\"__class\"] = \"java.util.TreeSet\";\n        TreeSet[\"__interfaces\"] = [\"java.util.SortedSet\", \"java.util.Collection\", \"java.util.Set\", \"java.util.NavigableSet\", \"java.lang.Iterable\", \"java.io.Serializable\"];\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * General-purpose low-level utility methods. GWT only supports a limited subset\n         * of these methods due to browser limitations. Only the documented methods are\n         * available.\n         */\n        var System = (function () {\n            function System() {\n            }\n            System.err_$LI$ = function () { if (System.err == null)\n                System.err = new java.io.PrintStream(null); return System.err; };\n            ;\n            System.out_$LI$ = function () { if (System.out == null)\n                System.out = new java.io.PrintStream(null); return System.out; };\n            ;\n            System.arraycopy = function (src, srcOfs, dest, destOfs, len) {\n                javaemul.internal.InternalPreconditions.checkNotNull(src, \"src\");\n                javaemul.internal.InternalPreconditions.checkNotNull(dest, \"dest\");\n                var srclen = javaemul.internal.ArrayHelper.getLength(src);\n                var destlen = javaemul.internal.ArrayHelper.getLength(dest);\n                if (srcOfs < 0 || destOfs < 0 || len < 0 || srcOfs + len > srclen || destOfs + len > destlen) {\n                    throw new java.lang.IndexOutOfBoundsException();\n                }\n                if (len > 0) {\n                    javaemul.internal.ArrayHelper.copy(src, srcOfs, dest, destOfs, len);\n                }\n            };\n            System.currentTimeMillis = function () {\n                return Math.round(javaemul.internal.DateUtil.now());\n            };\n            /**\n             * Has no effect; just here for source compatibility.\n             *\n             * @skip\n             */\n            System.gc = function () {\n            };\n            /**\n             * The compiler replaces getProperty by the actual value of the property.\n             */\n            System.getProperty$java_lang_String = function (key) {\n                switch ((key)) {\n                    case \"user.dir\":\n                        return \"\";\n                    case \"user.home\":\n                        return \"\";\n                    case \"user.name\":\n                        return \"jsweet\";\n                    case \"file.separator\":\n                        return \"/\";\n                    case \"java.home\":\n                        return null;\n                    case \"java.vendor\":\n                        return \"JSweet\";\n                    case \"java.vendor.url\":\n                        return \"http://www.jsweet.org\";\n                    case \"java.version\":\n                        return \"jsweet\";\n                    case \"os.arch\":\n                        return \"generic\";\n                    case \"os.name\":\n                        return \"generic\";\n                    case \"os.version\":\n                        return \"unknown\";\n                    case \"java.io.tmpdir\":\n                        return \"\";\n                    default:\n                        return null;\n                }\n            };\n            /**\n             * The compiler replaces getProperty by the actual value of the property.\n             */\n            System.getProperty = function (key, def) {\n                if (((typeof key === 'string') || key === null) && ((typeof def === 'string') || def === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var prop = System.getProperty(key);\n                        return prop == null ? def : prop;\n                    })();\n                }\n                else if (((typeof key === 'string') || key === null) && def === undefined) {\n                    return java.lang.System.getProperty$java_lang_String(key);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            System.identityHashCode = function (o) {\n                return javaemul.internal.HashCodes.getIdentityHashCode(o);\n            };\n            System.setErr = function (err) {\n                java.lang.System.err = err;\n            };\n            System.setOut = function (out) {\n                java.lang.System.out = out;\n            };\n            return System;\n        }());\n        lang.System = System;\n        System[\"__class\"] = \"java.lang.System\";\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * See <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/NumberFormatException.html\">the\n         * official Java API doc</a> for details.\n         */\n        var NumberFormatException = (function (_super) {\n            __extends(NumberFormatException, _super);\n            function NumberFormatException(message) {\n                if (((typeof message === 'string') || message === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                }\n                else if (message === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            NumberFormatException.forInputString = function (s) {\n                return new java.lang.NumberFormatException(\"For input string: \\\"\" + s + \"\\\"\");\n            };\n            NumberFormatException.forNullInputString = function () {\n                return new java.lang.NumberFormatException(\"null\");\n            };\n            NumberFormatException.forRadix = function (radix) {\n                return new java.lang.NumberFormatException(\"radix \" + radix + \" out of range\");\n            };\n            return NumberFormatException;\n        }(java.lang.IllegalArgumentException));\n        lang.NumberFormatException = NumberFormatException;\n        NumberFormatException[\"__class\"] = \"java.lang.NumberFormatException\";\n        NumberFormatException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var nio;\n    (function (nio) {\n        var charset;\n        (function (charset) {\n            /**\n             * GWT emulation of {@link IllegalCharsetNameException}.\n             */\n            var IllegalCharsetNameException = (function (_super) {\n                __extends(IllegalCharsetNameException, _super);\n                function IllegalCharsetNameException(charsetName) {\n                    _super.call(this, /* valueOf */ new String(charsetName).toString());\n                    this.charsetName = charsetName;\n                }\n                IllegalCharsetNameException.prototype.getCharsetName = function () {\n                    return this.charsetName;\n                };\n                return IllegalCharsetNameException;\n            }(java.lang.IllegalArgumentException));\n            charset.IllegalCharsetNameException = IllegalCharsetNameException;\n            IllegalCharsetNameException[\"__class\"] = \"java.nio.charset.IllegalCharsetNameException\";\n            IllegalCharsetNameException[\"__interfaces\"] = [\"java.io.Serializable\"];\n        })(charset = nio.charset || (nio.charset = {}));\n    })(nio = java.nio || (java.nio = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var nio;\n    (function (nio) {\n        var charset;\n        (function (charset) {\n            /**\n             * GWT emulation of {@link UnsupportedCharsetException}.\n             */\n            var UnsupportedCharsetException = (function (_super) {\n                __extends(UnsupportedCharsetException, _super);\n                function UnsupportedCharsetException(charsetName) {\n                    _super.call(this, /* valueOf */ new String(charsetName).toString());\n                    this.charsetName = charsetName;\n                }\n                UnsupportedCharsetException.prototype.getCharsetName = function () {\n                    return this.charsetName;\n                };\n                return UnsupportedCharsetException;\n            }(java.lang.IllegalArgumentException));\n            charset.UnsupportedCharsetException = UnsupportedCharsetException;\n            UnsupportedCharsetException[\"__class\"] = \"java.nio.charset.UnsupportedCharsetException\";\n            UnsupportedCharsetException[\"__interfaces\"] = [\"java.io.Serializable\"];\n        })(charset = nio.charset || (nio.charset = {}));\n    })(nio = java.nio || (java.nio = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * NOTE: in GWT this will never be thrown for normal array accesses, only for\n         * explicit throws.\n         *\n         * See <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/ArrayIndexOutOfBoundsException.html\">the\n         * official Java API doc</a> for details.\n         */\n        var ArrayIndexOutOfBoundsException = (function (_super) {\n            __extends(ArrayIndexOutOfBoundsException, _super);\n            function ArrayIndexOutOfBoundsException(msg) {\n                if (((typeof msg === 'string') || msg === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, msg);\n                }\n                else if (((typeof msg === 'number') || msg === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var index = __args[0];\n                    _super.call(this, \"Array index \" + index + \" out of range\");\n                }\n                else if (msg === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return ArrayIndexOutOfBoundsException;\n        }(java.lang.IndexOutOfBoundsException));\n        lang.ArrayIndexOutOfBoundsException = ArrayIndexOutOfBoundsException;\n        ArrayIndexOutOfBoundsException[\"__class\"] = \"java.lang.ArrayIndexOutOfBoundsException\";\n        ArrayIndexOutOfBoundsException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var lang;\n    (function (lang) {\n        /**\n         * See <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/StringIndexOfBoundsException.html\">the\n         * official Java API doc</a> for details.\n         */\n        var StringIndexOutOfBoundsException = (function (_super) {\n            __extends(StringIndexOutOfBoundsException, _super);\n            function StringIndexOutOfBoundsException(message) {\n                if (((typeof message === 'string') || message === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, message);\n                }\n                else if (((typeof message === 'number') || message === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var index = __args[0];\n                    _super.call(this, \"String index out of range: \" + index);\n                }\n                else if (message === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            return StringIndexOutOfBoundsException;\n        }(java.lang.IndexOutOfBoundsException));\n        lang.StringIndexOutOfBoundsException = StringIndexOutOfBoundsException;\n        StringIndexOutOfBoundsException[\"__class\"] = \"java.lang.StringIndexOutOfBoundsException\";\n        StringIndexOutOfBoundsException[\"__interfaces\"] = [\"java.io.Serializable\"];\n    })(lang = java.lang || (java.lang = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Linked list implementation.\n         * <a href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/LinkedList.html\">\n         * [Sun docs]</a>\n         *\n         * @param <E>\n         * element type.\n         */\n        var LinkedList = (function (_super) {\n            __extends(LinkedList, _super);\n            function LinkedList(c) {\n                var _this = this;\n                if (((c != null && (c[\"__interfaces\"] != null && c[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || c.constructor != null && c.constructor[\"__interfaces\"] != null && c.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || c === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    this.__size = 0;\n                    (function () {\n                        _this.header = (new LinkedList.Node());\n                        _this.tail = (new LinkedList.Node());\n                        _this.reset();\n                        _this.addAll(c);\n                    })();\n                }\n                else if (c === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    this.__size = 0;\n                    (function () {\n                        _this.header = (new LinkedList.Node());\n                        _this.tail = (new LinkedList.Node());\n                        _this.reset();\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            LinkedList.prototype.forEach = function (action) {\n                javaemul.internal.InternalPreconditions.checkNotNull(action);\n                for (var index164 = this.iterator(); index164.hasNext();) {\n                    var t = index164.next();\n                    {\n                        action(t);\n                    }\n                }\n            };\n            LinkedList.prototype.add$java_lang_Object = function (o) {\n                this.addLast(o);\n                return true;\n            };\n            LinkedList.prototype.addFirst = function (o) {\n                this.addNode(o, this.header, this.header.next);\n            };\n            LinkedList.prototype.addLast = function (o) {\n                this.addNode(o, this.tail.prev, this.tail);\n            };\n            LinkedList.prototype.clear = function () {\n                this.reset();\n            };\n            LinkedList.prototype.reset = function () {\n                this.header.next = this.tail;\n                this.tail.prev = this.header;\n                this.header.prev = this.tail.next = null;\n                this.__size = 0;\n            };\n            LinkedList.prototype.clone = function () {\n                return (new LinkedList(this));\n            };\n            LinkedList.prototype.descendingIterator = function () {\n                return new LinkedList.DescendingIteratorImpl(this);\n            };\n            LinkedList.prototype.element = function () {\n                return this.getFirst();\n            };\n            LinkedList.prototype.getFirst = function () {\n                javaemul.internal.InternalPreconditions.checkElement(this.__size !== 0);\n                return this.header.next.value;\n            };\n            LinkedList.prototype.getLast = function () {\n                javaemul.internal.InternalPreconditions.checkElement(this.__size !== 0);\n                return this.tail.prev.value;\n            };\n            LinkedList.prototype.listIterator = function (index) {\n                var _this = this;\n                if (((typeof index === 'number') || index === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        javaemul.internal.InternalPreconditions.checkPositionIndex(index, _this.__size);\n                        var node;\n                        if (index >= _this.__size >> 1) {\n                            node = _this.tail;\n                            for (var i = _this.__size; i > index; --i) {\n                                node = node.prev;\n                            }\n                        }\n                        else {\n                            node = _this.header.next;\n                            for (var i = 0; i < index; ++i) {\n                                node = node.next;\n                            }\n                        }\n                        return new LinkedList.ListIteratorImpl2(_this, index, node);\n                    })();\n                }\n                else if (index === undefined) {\n                    return this.listIterator$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            LinkedList.prototype.offer = function (o) {\n                return this.offerLast(o);\n            };\n            LinkedList.prototype.offerFirst = function (e) {\n                this.addFirst(e);\n                return true;\n            };\n            LinkedList.prototype.offerLast = function (e) {\n                this.addLast(e);\n                return true;\n            };\n            LinkedList.prototype.peek = function () {\n                return this.peekFirst();\n            };\n            LinkedList.prototype.peekFirst = function () {\n                return this.__size === 0 ? null : this.getFirst();\n            };\n            LinkedList.prototype.peekLast = function () {\n                return this.__size === 0 ? null : this.getLast();\n            };\n            LinkedList.prototype.poll = function () {\n                return this.pollFirst();\n            };\n            LinkedList.prototype.pollFirst = function () {\n                return this.__size === 0 ? null : this.removeFirst();\n            };\n            LinkedList.prototype.pollLast = function () {\n                return this.__size === 0 ? null : this.removeLast();\n            };\n            LinkedList.prototype.pop = function () {\n                return this.removeFirst();\n            };\n            LinkedList.prototype.push = function (e) {\n                this.addFirst(e);\n            };\n            LinkedList.prototype.remove$ = function () {\n                return this.removeFirst();\n            };\n            LinkedList.prototype.removeFirst = function () {\n                javaemul.internal.InternalPreconditions.checkElement(this.__size !== 0);\n                return this.removeNode(this.header.next);\n            };\n            LinkedList.prototype.removeFirstOccurrence = function (o) {\n                return this.remove(o);\n            };\n            LinkedList.prototype.removeLast = function () {\n                javaemul.internal.InternalPreconditions.checkElement(this.__size !== 0);\n                return this.removeNode(this.tail.prev);\n            };\n            LinkedList.prototype.removeLastOccurrence = function (o) {\n                for (var e = this.tail.prev; e !== this.header; e = e.prev) {\n                    if (java.util.Objects.equals(e.value, o)) {\n                        this.removeNode(e);\n                        return true;\n                    }\n                }\n                return false;\n            };\n            LinkedList.prototype.size = function () {\n                return this.__size;\n            };\n            LinkedList.prototype.addNode = function (o, prev, next) {\n                var node = (new LinkedList.Node());\n                node.value = o;\n                node.prev = prev;\n                node.next = next;\n                next.prev = prev.next = node;\n                ++this.__size;\n            };\n            LinkedList.prototype.removeNode = function (node) {\n                var oldValue = node.value;\n                node.next.prev = node.prev;\n                node.prev.next = node.next;\n                node.next = node.prev = null;\n                node.value = null;\n                --this.__size;\n                return oldValue;\n            };\n            return LinkedList;\n        }(java.util.AbstractSequentialList));\n        util.LinkedList = LinkedList;\n        LinkedList[\"__class\"] = \"java.util.LinkedList\";\n        LinkedList[\"__interfaces\"] = [\"java.lang.Cloneable\", \"java.util.List\", \"java.util.Collection\", \"java.util.Queue\", \"java.util.Deque\", \"java.lang.Iterable\", \"java.io.Serializable\"];\n        var LinkedList;\n        (function (LinkedList) {\n            var DescendingIteratorImpl = (function () {\n                function DescendingIteratorImpl(__parent) {\n                    this.__parent = __parent;\n                    this.itr = new LinkedList.ListIteratorImpl2(this.__parent, this.__parent.__size, this.__parent.tail);\n                }\n                DescendingIteratorImpl.prototype.forEachRemaining = function (consumer) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(consumer);\n                    while ((this.hasNext())) {\n                        consumer(this.next());\n                    }\n                    ;\n                };\n                DescendingIteratorImpl.prototype.hasNext = function () {\n                    return this.itr.hasPrevious();\n                };\n                DescendingIteratorImpl.prototype.next = function () {\n                    return this.itr.previous();\n                };\n                DescendingIteratorImpl.prototype.remove = function () {\n                    this.itr.remove();\n                };\n                return DescendingIteratorImpl;\n            }());\n            LinkedList.DescendingIteratorImpl = DescendingIteratorImpl;\n            DescendingIteratorImpl[\"__class\"] = \"java.util.LinkedList.DescendingIteratorImpl\";\n            DescendingIteratorImpl[\"__interfaces\"] = [\"java.util.Iterator\"];\n            /**\n             * Implementation of ListIterator for linked lists.\n             */\n            var ListIteratorImpl2 = (function () {\n                /**\n                 * @param index\n                 * from the beginning of the list (0 = first node)\n                 * @param startNode\n                 * the initial current node\n                 */\n                function ListIteratorImpl2(__parent, index, startNode) {\n                    this.__parent = __parent;\n                    this.currentIndex = 0;\n                    this.lastNode = null;\n                    this.currentNode = startNode;\n                    this.currentIndex = index;\n                }\n                ListIteratorImpl2.prototype.forEachRemaining = function (consumer) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(consumer);\n                    while ((this.hasNext())) {\n                        consumer(this.next());\n                    }\n                    ;\n                };\n                ListIteratorImpl2.prototype.add = function (o) {\n                    this.__parent.addNode(o, this.currentNode.prev, this.currentNode);\n                    ++this.currentIndex;\n                    this.lastNode = null;\n                };\n                ListIteratorImpl2.prototype.hasNext = function () {\n                    return this.currentNode !== this.__parent.tail;\n                };\n                ListIteratorImpl2.prototype.hasPrevious = function () {\n                    return this.currentNode.prev !== this.__parent.header;\n                };\n                ListIteratorImpl2.prototype.next = function () {\n                    javaemul.internal.InternalPreconditions.checkElement(this.hasNext());\n                    this.lastNode = this.currentNode;\n                    this.currentNode = this.currentNode.next;\n                    ++this.currentIndex;\n                    return this.lastNode.value;\n                };\n                ListIteratorImpl2.prototype.nextIndex = function () {\n                    return this.currentIndex;\n                };\n                ListIteratorImpl2.prototype.previous = function () {\n                    javaemul.internal.InternalPreconditions.checkElement(this.hasPrevious());\n                    this.lastNode = this.currentNode = this.currentNode.prev;\n                    --this.currentIndex;\n                    return this.lastNode.value;\n                };\n                ListIteratorImpl2.prototype.previousIndex = function () {\n                    return this.currentIndex - 1;\n                };\n                ListIteratorImpl2.prototype.remove = function () {\n                    javaemul.internal.InternalPreconditions.checkState(this.lastNode != null);\n                    var nextNode = this.lastNode.next;\n                    this.__parent.removeNode(this.lastNode);\n                    if (this.currentNode === this.lastNode) {\n                        this.currentNode = nextNode;\n                    }\n                    else {\n                        --this.currentIndex;\n                    }\n                    this.lastNode = null;\n                };\n                ListIteratorImpl2.prototype.set = function (o) {\n                    javaemul.internal.InternalPreconditions.checkState(this.lastNode != null);\n                    this.lastNode.value = o;\n                };\n                return ListIteratorImpl2;\n            }());\n            LinkedList.ListIteratorImpl2 = ListIteratorImpl2;\n            ListIteratorImpl2[\"__class\"] = \"java.util.LinkedList.ListIteratorImpl2\";\n            ListIteratorImpl2[\"__interfaces\"] = [\"java.util.Iterator\", \"java.util.ListIterator\"];\n            /**\n             * Internal class representing a doubly-linked list node.\n             *\n             * @param <E>\n             * element type\n             */\n            var Node = (function () {\n                function Node() {\n                }\n                return Node;\n            }());\n            LinkedList.Node = Node;\n            Node[\"__class\"] = \"java.util.LinkedList.Node\";\n        })(LinkedList = util.LinkedList || (util.LinkedList = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Maintains a last-in, first-out collection of objects. <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/Stack.html\">[Sun\n         * docs]</a>\n         *\n         * @param <E> element type.\n         */\n        var Stack = (function (_super) {\n            __extends(Stack, _super);\n            function Stack() {\n                _super.call(this);\n            }\n            Stack.prototype.clone = function () {\n                var s = (new Stack());\n                s.addAll(this);\n                return s;\n            };\n            Stack.prototype.empty = function () {\n                return this.isEmpty();\n            };\n            Stack.prototype.peek = function () {\n                var sz = this.size();\n                if (sz > 0) {\n                    return this.get(sz - 1);\n                }\n                else {\n                    throw new java.util.EmptyStackException();\n                }\n            };\n            Stack.prototype.pop = function () {\n                var sz = this.size();\n                if (sz > 0) {\n                    return this.remove(sz - 1);\n                }\n                else {\n                    throw new java.util.EmptyStackException();\n                }\n            };\n            Stack.prototype.push = function (o) {\n                this.add(o);\n                return o;\n            };\n            Stack.prototype.search = function (o) {\n                var pos = this.lastIndexOf(o);\n                if (pos >= 0) {\n                    return this.size() - pos;\n                }\n                return -1;\n            };\n            return Stack;\n        }(java.util.Vector));\n        util.Stack = Stack;\n        Stack[\"__class\"] = \"java.util.Stack\";\n        Stack[\"__interfaces\"] = [\"java.util.RandomAccess\", \"java.util.List\", \"java.lang.Cloneable\", \"java.util.Collection\", \"java.lang.Iterable\", \"java.io.Serializable\"];\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Implementation of Map interface based on a hash table. <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/HashMap.html\">[Sun\n         * docs]</a>\n         *\n         * @param <K> key type\n         * @param <V> value type\n         */\n        var AbstractHashMap = (function (_super) {\n            __extends(AbstractHashMap, _super);\n            function AbstractHashMap(ignored, alsoIgnored) {\n                var _this = this;\n                if (((typeof ignored === 'number') || ignored === null) && ((typeof alsoIgnored === 'number') || alsoIgnored === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    (function () {\n                        javaemul.internal.InternalPreconditions.checkArgument(ignored >= 0, \"Negative initial capacity\");\n                        javaemul.internal.InternalPreconditions.checkArgument(alsoIgnored >= 0, \"Non-positive load factor\");\n                        _this.reset();\n                    })();\n                }\n                else if (((ignored != null && (ignored[\"__interfaces\"] != null && ignored[\"__interfaces\"].indexOf(\"java.util.Map\") >= 0 || ignored.constructor != null && ignored.constructor[\"__interfaces\"] != null && ignored.constructor[\"__interfaces\"].indexOf(\"java.util.Map\") >= 0)) || ignored === null) && alsoIgnored === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var toBeCopied_1 = __args[0];\n                    _super.call(this);\n                    (function () {\n                        _this.reset();\n                        _this.putAll(toBeCopied_1);\n                    })();\n                }\n                else if (((typeof ignored === 'number') || ignored === null) && alsoIgnored === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    {\n                        var __args_21 = Array.prototype.slice.call(arguments);\n                        var alsoIgnored_1 = 0;\n                        _super.call(this);\n                        (function () {\n                            javaemul.internal.InternalPreconditions.checkArgument(ignored >= 0, \"Negative initial capacity\");\n                            javaemul.internal.InternalPreconditions.checkArgument(alsoIgnored_1 >= 0, \"Non-positive load factor\");\n                            _this.reset();\n                        })();\n                    }\n                }\n                else if (ignored === undefined && alsoIgnored === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    (function () {\n                        _this.reset();\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            AbstractHashMap.prototype.clear = function () {\n                this.reset();\n            };\n            AbstractHashMap.prototype.reset = function () {\n                this.hashCodeMap = (new java.util.InternalHashCodeMap(this));\n                this.stringMap = (new java.util.InternalStringMap(this));\n                java.util.ConcurrentModificationDetector.structureChanged(this);\n            };\n            AbstractHashMap.prototype.containsKey = function (key) {\n                return (typeof key === 'string') ? this.hasStringValue(javaemul.internal.JsUtils.unsafeCastToString(key)) : this.hasHashValue(key);\n            };\n            AbstractHashMap.prototype.containsValue = function (value) {\n                return this._containsValue(value, this.stringMap) || this._containsValue(value, this.hashCodeMap);\n            };\n            AbstractHashMap.prototype._containsValue = function (value, entries) {\n                for (var index165 = entries.iterator(); index165.hasNext();) {\n                    var entry = index165.next();\n                    {\n                        if (this._equals(value, entry.getValue())) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            };\n            AbstractHashMap.prototype.entrySet = function () {\n                return new AbstractHashMap.EntrySet(this);\n            };\n            AbstractHashMap.prototype.get = function (key) {\n                return (typeof key === 'string') ? this.getStringValue(javaemul.internal.JsUtils.unsafeCastToString(key)) : this.getHashValue(key);\n            };\n            AbstractHashMap.prototype.put = function (key, value) {\n                return (typeof key === 'string') ? this.putStringValue(javaemul.internal.JsUtils.unsafeCastToString(key), value) : this.putHashValue(key, value);\n            };\n            AbstractHashMap.prototype.remove = function (key) {\n                return (typeof key === 'string') ? this.removeStringValue(javaemul.internal.JsUtils.unsafeCastToString(key)) : this.removeHashValue(key);\n            };\n            AbstractHashMap.prototype.size = function () {\n                return this.hashCodeMap.size() + this.stringMap.getSize();\n            };\n            /**\n             * Returns the Map.Entry whose key is Object equal to <code>key</code>,\n             * provided that <code>key</code>'s hash code is <code>hashCode</code>;\n             * or <code>null</code> if no such Map.Entry exists at the specified\n             * hashCode.\n             */\n            AbstractHashMap.prototype.getHashValue = function (key) {\n                return util.AbstractMap.getEntryValueOrNull(this.hashCodeMap.getEntry(key));\n            };\n            /**\n             * Returns the value for the given key in the stringMap. Returns\n             * <code>null</code> if the specified key does not exist.\n             */\n            AbstractHashMap.prototype.getStringValue = function (key) {\n                return key == null ? this.getHashValue(null) : this.stringMap.get(key);\n            };\n            /**\n             * Returns true if the a key exists in the hashCodeMap that is Object equal to\n             * <code>key</code>, provided that <code>key</code>'s hash code is\n             * <code>hashCode</code>.\n             */\n            AbstractHashMap.prototype.hasHashValue = function (key) {\n                return this.hashCodeMap.getEntry(key) != null;\n            };\n            /**\n             * Returns true if the given key exists in the stringMap.\n             */\n            AbstractHashMap.prototype.hasStringValue = function (key) {\n                return key == null ? this.hasHashValue(null) : this.stringMap.contains(key);\n            };\n            /**\n             * Sets the specified key to the specified value in the hashCodeMap. Returns\n             * the value previously at that key. Returns <code>null</code> if the\n             * specified key did not exist.\n             */\n            AbstractHashMap.prototype.putHashValue = function (key, value) {\n                return this.hashCodeMap.put(key, value);\n            };\n            /**\n             * Sets the specified key to the specified value in the stringMap. Returns the\n             * value previously at that key. Returns <code>null</code> if the specified\n             * key did not exist.\n             */\n            AbstractHashMap.prototype.putStringValue = function (key, value) {\n                return key == null ? this.putHashValue(null, value) : this.stringMap.put(key, value);\n            };\n            /**\n             * Removes the pair whose key is Object equal to <code>key</code> from\n             * <code>hashCodeMap</code>, provided that <code>key</code>'s hash code\n             * is <code>hashCode</code>. Returns the value that was associated with the\n             * removed key, or null if no such key existed.\n             */\n            AbstractHashMap.prototype.removeHashValue = function (key) {\n                return this.hashCodeMap.remove(key);\n            };\n            /**\n             * Removes the specified key from the stringMap and returns the value that was\n             * previously there. Returns <code>null</code> if the specified key does not\n             * exist.\n             */\n            AbstractHashMap.prototype.removeStringValue = function (key) {\n                return key == null ? this.removeHashValue(null) : this.stringMap.remove(key);\n            };\n            return AbstractHashMap;\n        }(java.util.AbstractMap));\n        util.AbstractHashMap = AbstractHashMap;\n        AbstractHashMap[\"__class\"] = \"java.util.AbstractHashMap\";\n        AbstractHashMap[\"__interfaces\"] = [\"java.util.Map\"];\n        var AbstractHashMap;\n        (function (AbstractHashMap) {\n            var EntrySet = (function (_super) {\n                __extends(EntrySet, _super);\n                function EntrySet(__parent) {\n                    _super.call(this);\n                    this.__parent = __parent;\n                }\n                EntrySet.prototype.clear = function () {\n                    this.__parent.clear();\n                };\n                EntrySet.prototype.contains = function (o) {\n                    if (o != null && (o[\"__interfaces\"] != null && o[\"__interfaces\"].indexOf(\"java.util.Map.Entry\") >= 0 || o.constructor != null && o.constructor[\"__interfaces\"] != null && o.constructor[\"__interfaces\"].indexOf(\"java.util.Map.Entry\") >= 0)) {\n                        return this.__parent.containsEntry(o);\n                    }\n                    return false;\n                };\n                EntrySet.prototype.iterator = function () {\n                    return new AbstractHashMap.EntrySetIterator(this.__parent);\n                };\n                EntrySet.prototype.remove = function (index) {\n                    if (((index != null) || index === null)) {\n                        return this.remove$java_lang_Object(index);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                EntrySet.prototype.remove$java_lang_Object = function (entry) {\n                    if (this.contains(entry)) {\n                        var key = entry.getKey();\n                        this.__parent.remove(key);\n                        return true;\n                    }\n                    return false;\n                };\n                EntrySet.prototype.size = function () {\n                    return this.__parent.size();\n                };\n                return EntrySet;\n            }(java.util.AbstractSet));\n            AbstractHashMap.EntrySet = EntrySet;\n            EntrySet[\"__class\"] = \"java.util.AbstractHashMap.EntrySet\";\n            EntrySet[\"__interfaces\"] = [\"java.util.Collection\", \"java.util.Set\", \"java.lang.Iterable\"];\n            /**\n             * Iterator for <code>EntrySet</code>.\n             */\n            var EntrySetIterator = (function () {\n                function EntrySetIterator(__parent) {\n                    this.__parent = __parent;\n                    this.__hasNext = false;\n                    this.stringMapEntries = this.__parent.stringMap.iterator();\n                    this.current = this.stringMapEntries;\n                    this.__hasNext = this.computeHasNext();\n                    java.util.ConcurrentModificationDetector.recordLastKnownStructure(this.__parent, this);\n                }\n                EntrySetIterator.prototype.forEachRemaining = function (consumer) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(consumer);\n                    while ((this.hasNext())) {\n                        consumer(this.next());\n                    }\n                    ;\n                };\n                EntrySetIterator.prototype.hasNext = function () {\n                    return this.__hasNext;\n                };\n                EntrySetIterator.prototype.computeHasNext = function () {\n                    if (this.current.hasNext()) {\n                        return true;\n                    }\n                    if (this.current !== this.stringMapEntries) {\n                        return false;\n                    }\n                    this.current = this.__parent.hashCodeMap.iterator();\n                    return this.current.hasNext();\n                };\n                EntrySetIterator.prototype.next = function () {\n                    java.util.ConcurrentModificationDetector.checkStructuralChange(this.__parent, this);\n                    javaemul.internal.InternalPreconditions.checkElement(this.hasNext());\n                    this.last = this.current;\n                    var rv = this.current.next();\n                    this.__hasNext = this.computeHasNext();\n                    return rv;\n                };\n                EntrySetIterator.prototype.remove = function () {\n                    javaemul.internal.InternalPreconditions.checkState(this.last != null);\n                    java.util.ConcurrentModificationDetector.checkStructuralChange(this.__parent, this);\n                    this.last.remove();\n                    this.last = null;\n                    this.__hasNext = this.computeHasNext();\n                    java.util.ConcurrentModificationDetector.recordLastKnownStructure(this.__parent, this);\n                };\n                return EntrySetIterator;\n            }());\n            AbstractHashMap.EntrySetIterator = EntrySetIterator;\n            EntrySetIterator[\"__class\"] = \"java.util.AbstractHashMap.EntrySetIterator\";\n            EntrySetIterator[\"__interfaces\"] = [\"java.util.Iterator\"];\n        })(AbstractHashMap = util.AbstractHashMap || (util.AbstractHashMap = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Skeletal implementation of a NavigableMap.\n         */\n        var AbstractNavigableMap = (function (_super) {\n            __extends(AbstractNavigableMap, _super);\n            function AbstractNavigableMap() {\n                _super.call(this);\n            }\n            AbstractNavigableMap.copyOf = function (entry) {\n                return entry == null ? null : new util.AbstractMap.SimpleImmutableEntry(entry);\n            };\n            AbstractNavigableMap.getKeyOrNSE = function (entry) {\n                if (entry == null) {\n                    throw new java.util.NoSuchElementException();\n                }\n                return entry.getKey();\n            };\n            AbstractNavigableMap.prototype.ceilingEntry = function (key) {\n                return AbstractNavigableMap.copyOf(this.getCeilingEntry(key));\n            };\n            AbstractNavigableMap.prototype.ceilingKey = function (key) {\n                return util.AbstractMap.getEntryKeyOrNull(this.getCeilingEntry(key));\n            };\n            AbstractNavigableMap.prototype.containsKey = function (k) {\n                var key = k;\n                return this.getEntry(key) != null;\n            };\n            AbstractNavigableMap.prototype.descendingKeySet = function () {\n                return this.descendingMap().navigableKeySet();\n            };\n            AbstractNavigableMap.prototype.descendingMap = function () {\n                return new AbstractNavigableMap.DescendingMap(this);\n            };\n            AbstractNavigableMap.prototype.entrySet = function () {\n                return new AbstractNavigableMap.EntrySet(this);\n            };\n            AbstractNavigableMap.prototype.firstEntry = function () {\n                return AbstractNavigableMap.copyOf(this.getFirstEntry());\n            };\n            AbstractNavigableMap.prototype.firstKey = function () {\n                return AbstractNavigableMap.getKeyOrNSE(this.getFirstEntry());\n            };\n            AbstractNavigableMap.prototype.floorEntry = function (key) {\n                return AbstractNavigableMap.copyOf(this.getFloorEntry(key));\n            };\n            AbstractNavigableMap.prototype.floorKey = function (key) {\n                return util.AbstractMap.getEntryKeyOrNull(this.getFloorEntry(key));\n            };\n            AbstractNavigableMap.prototype.get = function (k) {\n                var key = k;\n                return util.AbstractMap.getEntryValueOrNull(this.getEntry(key));\n            };\n            AbstractNavigableMap.prototype.headMap = function (toKey, inclusive) {\n                if (((toKey != null) || toKey === null) && inclusive === undefined) {\n                    return this.headMap$java_lang_Object(toKey);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractNavigableMap.prototype.headMap$java_lang_Object = function (toKey) {\n                return this.headMap(toKey, false);\n            };\n            AbstractNavigableMap.prototype.higherEntry = function (key) {\n                return AbstractNavigableMap.copyOf(this.getHigherEntry(key));\n            };\n            AbstractNavigableMap.prototype.higherKey = function (key) {\n                return util.AbstractMap.getEntryKeyOrNull(this.getHigherEntry(key));\n            };\n            AbstractNavigableMap.prototype.keySet = function () {\n                return this.navigableKeySet();\n            };\n            AbstractNavigableMap.prototype.lastEntry = function () {\n                return AbstractNavigableMap.copyOf(this.getLastEntry());\n            };\n            AbstractNavigableMap.prototype.lastKey = function () {\n                return AbstractNavigableMap.getKeyOrNSE(this.getLastEntry());\n            };\n            AbstractNavigableMap.prototype.lowerEntry = function (key) {\n                return AbstractNavigableMap.copyOf(this.getLowerEntry(key));\n            };\n            AbstractNavigableMap.prototype.lowerKey = function (key) {\n                return util.AbstractMap.getEntryKeyOrNull(this.getLowerEntry(key));\n            };\n            AbstractNavigableMap.prototype.navigableKeySet = function () {\n                return (new AbstractNavigableMap.NavigableKeySet(this));\n            };\n            AbstractNavigableMap.prototype.pollFirstEntry = function () {\n                return this.pollEntry(this.getFirstEntry());\n            };\n            AbstractNavigableMap.prototype.pollLastEntry = function () {\n                return this.pollEntry(this.getLastEntry());\n            };\n            AbstractNavigableMap.prototype.subMap = function (fromKey, fromInclusive, toKey, toInclusive) {\n                if (((fromKey != null) || fromKey === null) && ((fromInclusive != null) || fromInclusive === null) && toKey === undefined && toInclusive === undefined) {\n                    return this.subMap$java_lang_Object$java_lang_Object(fromKey, fromInclusive);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractNavigableMap.prototype.subMap$java_lang_Object$java_lang_Object = function (fromKey, toKey) {\n                return this.subMap(fromKey, true, toKey, false);\n            };\n            AbstractNavigableMap.prototype.tailMap = function (fromKey, inclusive) {\n                if (((fromKey != null) || fromKey === null) && inclusive === undefined) {\n                    return this.tailMap$java_lang_Object(fromKey);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            AbstractNavigableMap.prototype.tailMap$java_lang_Object = function (fromKey) {\n                return this.tailMap(fromKey, true);\n            };\n            AbstractNavigableMap.prototype.containsEntry = function (entry) {\n                var key = entry.getKey();\n                var lookupEntry = this.getEntry(key);\n                return lookupEntry != null && java.util.Objects.equals(lookupEntry.getValue(), entry.getValue());\n            };\n            AbstractNavigableMap.prototype.pollEntry = function (entry) {\n                if (entry != null) {\n                    this.removeEntry(entry);\n                }\n                return AbstractNavigableMap.copyOf(entry);\n            };\n            return AbstractNavigableMap;\n        }(java.util.AbstractMap));\n        util.AbstractNavigableMap = AbstractNavigableMap;\n        AbstractNavigableMap[\"__class\"] = \"java.util.AbstractNavigableMap\";\n        AbstractNavigableMap[\"__interfaces\"] = [\"java.util.Map\", \"java.util.NavigableMap\", \"java.util.SortedMap\"];\n        var AbstractNavigableMap;\n        (function (AbstractNavigableMap) {\n            var DescendingMap = (function (_super) {\n                __extends(DescendingMap, _super);\n                function DescendingMap(__parent) {\n                    _super.call(this);\n                    this.__parent = __parent;\n                }\n                DescendingMap.prototype.clear = function () {\n                    this.ascendingMap().clear();\n                };\n                DescendingMap.prototype.comparator = function () {\n                    return java.util.Collections.reverseOrder(this.ascendingMap().comparator());\n                };\n                DescendingMap.prototype.descendingMap = function () {\n                    return this.ascendingMap();\n                };\n                DescendingMap.prototype.headMap = function (toKey, inclusive) {\n                    var _this = this;\n                    if (((toKey != null) || toKey === null) && ((typeof inclusive === 'boolean') || inclusive === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            return _this.ascendingMap().tailMap(toKey, inclusive).descendingMap();\n                        })();\n                    }\n                    else if (((toKey != null) || toKey === null) && inclusive === undefined) {\n                        return this.headMap$java_lang_Object(toKey);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                DescendingMap.prototype.put = function (key, value) {\n                    return this.ascendingMap().put(key, value);\n                };\n                DescendingMap.prototype.remove = function (key) {\n                    return this.ascendingMap().remove(key);\n                };\n                DescendingMap.prototype.size = function () {\n                    return this.ascendingMap().size();\n                };\n                DescendingMap.prototype.subMap = function (fromKey, fromInclusive, toKey, toInclusive) {\n                    var _this = this;\n                    if (((fromKey != null) || fromKey === null) && ((typeof fromInclusive === 'boolean') || fromInclusive === null) && ((toKey != null) || toKey === null) && ((typeof toInclusive === 'boolean') || toInclusive === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            return _this.ascendingMap().subMap(toKey, toInclusive, fromKey, fromInclusive).descendingMap();\n                        })();\n                    }\n                    else if (((fromKey != null) || fromKey === null) && ((fromInclusive != null) || fromInclusive === null) && toKey === undefined && toInclusive === undefined) {\n                        return this.subMap$java_lang_Object$java_lang_Object(fromKey, fromInclusive);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                DescendingMap.prototype.tailMap = function (fromKey, inclusive) {\n                    var _this = this;\n                    if (((fromKey != null) || fromKey === null) && ((typeof inclusive === 'boolean') || inclusive === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            return _this.ascendingMap().headMap(fromKey, inclusive).descendingMap();\n                        })();\n                    }\n                    else if (((fromKey != null) || fromKey === null) && inclusive === undefined) {\n                        return this.tailMap$java_lang_Object(fromKey);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                DescendingMap.prototype.ascendingMap = function () {\n                    return this.__parent;\n                };\n                DescendingMap.prototype.descendingEntryIterator = function () {\n                    return this.ascendingMap().entryIterator();\n                };\n                DescendingMap.prototype.entryIterator = function () {\n                    return this.ascendingMap().descendingEntryIterator();\n                };\n                DescendingMap.prototype.getEntry = function (key) {\n                    return this.ascendingMap().getEntry(key);\n                };\n                DescendingMap.prototype.getFirstEntry = function () {\n                    return this.ascendingMap().getLastEntry();\n                };\n                DescendingMap.prototype.getLastEntry = function () {\n                    return this.ascendingMap().getFirstEntry();\n                };\n                DescendingMap.prototype.getCeilingEntry = function (key) {\n                    return this.ascendingMap().getFloorEntry(key);\n                };\n                DescendingMap.prototype.getFloorEntry = function (key) {\n                    return this.ascendingMap().getCeilingEntry(key);\n                };\n                DescendingMap.prototype.getHigherEntry = function (key) {\n                    return this.ascendingMap().getLowerEntry(key);\n                };\n                DescendingMap.prototype.getLowerEntry = function (key) {\n                    return this.ascendingMap().getHigherEntry(key);\n                };\n                DescendingMap.prototype.removeEntry = function (entry) {\n                    return this.ascendingMap().removeEntry(entry);\n                };\n                return DescendingMap;\n            }(java.util.AbstractNavigableMap));\n            AbstractNavigableMap.DescendingMap = DescendingMap;\n            DescendingMap[\"__class\"] = \"java.util.AbstractNavigableMap.DescendingMap\";\n            DescendingMap[\"__interfaces\"] = [\"java.util.Map\", \"java.util.NavigableMap\", \"java.util.SortedMap\"];\n            var EntrySet = (function (_super) {\n                __extends(EntrySet, _super);\n                function EntrySet(__parent) {\n                    _super.call(this);\n                    this.__parent = __parent;\n                }\n                EntrySet.prototype.contains = function (o) {\n                    return (o != null && (o[\"__interfaces\"] != null && o[\"__interfaces\"].indexOf(\"java.util.Map.Entry\") >= 0 || o.constructor != null && o.constructor[\"__interfaces\"] != null && o.constructor[\"__interfaces\"].indexOf(\"java.util.Map.Entry\") >= 0)) && this.__parent.containsEntry(o);\n                };\n                EntrySet.prototype.iterator = function () {\n                    return this.__parent.entryIterator();\n                };\n                EntrySet.prototype.remove = function (index) {\n                    if (((index != null) || index === null)) {\n                        return this.remove$java_lang_Object(index);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                EntrySet.prototype.remove$java_lang_Object = function (o) {\n                    if (o != null && (o[\"__interfaces\"] != null && o[\"__interfaces\"].indexOf(\"java.util.Map.Entry\") >= 0 || o.constructor != null && o.constructor[\"__interfaces\"] != null && o.constructor[\"__interfaces\"].indexOf(\"java.util.Map.Entry\") >= 0)) {\n                        var entry = o;\n                        return this.__parent.removeEntry(entry);\n                    }\n                    return false;\n                };\n                EntrySet.prototype.size = function () {\n                    return this.__parent.size();\n                };\n                return EntrySet;\n            }(java.util.AbstractSet));\n            AbstractNavigableMap.EntrySet = EntrySet;\n            EntrySet[\"__class\"] = \"java.util.AbstractNavigableMap.EntrySet\";\n            EntrySet[\"__interfaces\"] = [\"java.util.Collection\", \"java.util.Set\", \"java.lang.Iterable\"];\n            var NavigableKeySet = (function (_super) {\n                __extends(NavigableKeySet, _super);\n                function NavigableKeySet(map) {\n                    _super.call(this);\n                    this.map = map;\n                }\n                NavigableKeySet.prototype.forEach = function (action) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(action);\n                    for (var index166 = this.iterator(); index166.hasNext();) {\n                        var t = index166.next();\n                        {\n                            action(t);\n                        }\n                    }\n                };\n                NavigableKeySet.prototype.ceiling = function (k) {\n                    return this.map.ceilingKey(k);\n                };\n                NavigableKeySet.prototype.clear = function () {\n                    this.map.clear();\n                };\n                NavigableKeySet.prototype.comparator = function () {\n                    return this.map.comparator();\n                };\n                NavigableKeySet.prototype.contains = function (o) {\n                    return this.map.containsKey(o);\n                };\n                NavigableKeySet.prototype.descendingIterator = function () {\n                    return this.descendingSet().iterator();\n                };\n                NavigableKeySet.prototype.descendingSet = function () {\n                    return this.map.descendingMap().navigableKeySet();\n                };\n                NavigableKeySet.prototype.first = function () {\n                    return this.map.firstKey();\n                };\n                NavigableKeySet.prototype.floor = function (k) {\n                    return this.map.floorKey(k);\n                };\n                NavigableKeySet.prototype.headSet$java_lang_Object = function (toElement) {\n                    return this.headSet(toElement, false);\n                };\n                NavigableKeySet.prototype.headSet = function (toElement, inclusive) {\n                    var _this = this;\n                    if (((toElement != null) || toElement === null) && ((typeof inclusive === 'boolean') || inclusive === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            return _this.map.headMap(toElement, inclusive).navigableKeySet();\n                        })();\n                    }\n                    else if (((toElement != null) || toElement === null) && inclusive === undefined) {\n                        return this.headSet$java_lang_Object(toElement);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                NavigableKeySet.prototype.higher = function (k) {\n                    return this.map.higherKey(k);\n                };\n                NavigableKeySet.prototype.iterator = function () {\n                    var entryIterator = this.map.entrySet().iterator();\n                    return new NavigableKeySet.NavigableKeySet$0(this, entryIterator);\n                };\n                NavigableKeySet.prototype.last = function () {\n                    return this.map.lastKey();\n                };\n                NavigableKeySet.prototype.lower = function (k) {\n                    return this.map.lowerKey(k);\n                };\n                NavigableKeySet.prototype.pollFirst = function () {\n                    return util.AbstractMap.getEntryKeyOrNull(this.map.pollFirstEntry());\n                };\n                NavigableKeySet.prototype.pollLast = function () {\n                    return util.AbstractMap.getEntryKeyOrNull(this.map.pollLastEntry());\n                };\n                NavigableKeySet.prototype.remove = function (index) {\n                    if (((index != null) || index === null)) {\n                        return this.remove$java_lang_Object(index);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                NavigableKeySet.prototype.remove$java_lang_Object = function (o) {\n                    if (this.map.containsKey(o)) {\n                        this.map.remove(o);\n                        return true;\n                    }\n                    return false;\n                };\n                NavigableKeySet.prototype.size = function () {\n                    return this.map.size();\n                };\n                NavigableKeySet.prototype.subSet = function (fromElement, fromInclusive, toElement, toInclusive) {\n                    var _this = this;\n                    if (((fromElement != null) || fromElement === null) && ((typeof fromInclusive === 'boolean') || fromInclusive === null) && ((toElement != null) || toElement === null) && ((typeof toInclusive === 'boolean') || toInclusive === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            return _this.map.subMap(fromElement, fromInclusive, toElement, toInclusive).navigableKeySet();\n                        })();\n                    }\n                    else if (((fromElement != null) || fromElement === null) && ((fromInclusive != null) || fromInclusive === null) && toElement === undefined && toInclusive === undefined) {\n                        return this.subSet$java_lang_Object$java_lang_Object(fromElement, fromInclusive);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                NavigableKeySet.prototype.subSet$java_lang_Object$java_lang_Object = function (fromElement, toElement) {\n                    return this.subSet(fromElement, true, toElement, false);\n                };\n                NavigableKeySet.prototype.tailSet$java_lang_Object = function (fromElement) {\n                    return this.tailSet(fromElement, true);\n                };\n                NavigableKeySet.prototype.tailSet = function (fromElement, inclusive) {\n                    var _this = this;\n                    if (((fromElement != null) || fromElement === null) && ((typeof inclusive === 'boolean') || inclusive === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            return _this.map.tailMap(fromElement, inclusive).navigableKeySet();\n                        })();\n                    }\n                    else if (((fromElement != null) || fromElement === null) && inclusive === undefined) {\n                        return this.tailSet$java_lang_Object(fromElement);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                return NavigableKeySet;\n            }(java.util.AbstractSet));\n            AbstractNavigableMap.NavigableKeySet = NavigableKeySet;\n            NavigableKeySet[\"__class\"] = \"java.util.AbstractNavigableMap.NavigableKeySet\";\n            NavigableKeySet[\"__interfaces\"] = [\"java.util.SortedSet\", \"java.util.Collection\", \"java.util.Set\", \"java.util.NavigableSet\", \"java.lang.Iterable\"];\n            var NavigableKeySet;\n            (function (NavigableKeySet) {\n                var NavigableKeySet$0 = (function () {\n                    function NavigableKeySet$0(__parent, entryIterator) {\n                        this.entryIterator = entryIterator;\n                        this.__parent = __parent;\n                    }\n                    NavigableKeySet$0.prototype.forEachRemaining = function (consumer) {\n                        javaemul.internal.InternalPreconditions.checkNotNull(consumer);\n                        while ((this.hasNext())) {\n                            consumer(this.next());\n                        }\n                        ;\n                    };\n                    NavigableKeySet$0.prototype.hasNext = function () {\n                        return this.entryIterator.hasNext();\n                    };\n                    NavigableKeySet$0.prototype.next = function () {\n                        var entry = this.entryIterator.next();\n                        return entry.getKey();\n                    };\n                    NavigableKeySet$0.prototype.remove = function () {\n                        this.entryIterator.remove();\n                    };\n                    return NavigableKeySet$0;\n                }());\n                NavigableKeySet.NavigableKeySet$0 = NavigableKeySet$0;\n            })(NavigableKeySet = AbstractNavigableMap.NavigableKeySet || (AbstractNavigableMap.NavigableKeySet = {}));\n        })(AbstractNavigableMap = util.AbstractNavigableMap || (util.AbstractNavigableMap = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Utility methods that operate on collections. <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/Collections.html\">[Sun\n         * docs]</a>\n         */\n        var Collections = (function () {\n            function Collections() {\n            }\n            Collections.EMPTY_LIST_$LI$ = function () { if (Collections.EMPTY_LIST == null)\n                Collections.EMPTY_LIST = new Collections.EmptyList(); return Collections.EMPTY_LIST; };\n            ;\n            Collections.EMPTY_MAP_$LI$ = function () { if (Collections.EMPTY_MAP == null)\n                Collections.EMPTY_MAP = new Collections.EmptyMap(); return Collections.EMPTY_MAP; };\n            ;\n            Collections.EMPTY_SET_$LI$ = function () { if (Collections.EMPTY_SET == null)\n                Collections.EMPTY_SET = new Collections.EmptySet(); return Collections.EMPTY_SET; };\n            ;\n            Collections.addAll = function (c) {\n                var a = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    a[_i - 1] = arguments[_i];\n                }\n                var result = false;\n                for (var index167 = 0; index167 < a.length; index167++) {\n                    var e = a[index167];\n                    {\n                        result = result || c.add(e);\n                    }\n                }\n                return result;\n            };\n            Collections.asLifoQueue = function (deque) {\n                return (new Collections.LifoQueue(deque));\n            };\n            /**\n             * Perform a binary search on a sorted List, using a user-specified comparison\n             * function.\n             *\n             * <p>\n             * Note: The GWT implementation differs from the JDK implementation in that it\n             * does not do an iterator-based binary search for Lists that do not implement\n             * RandomAccess.\n             * </p>\n             *\n             * @param sortedList List to search\n             * @param key value to search for\n             * @param comparator comparision function, <code>null</code> indicates\n             * <i>natural ordering</i> should be used.\n             * @return the index of an element with a matching value, or a negative number\n             * which is the index of the next larger value (or just past the end\n             * of the array if the searched value is larger than all elements in\n             * the array) minus 1 (to ensure error returns are negative)\n             * @throws ClassCastException if <code>key</code> and\n             * <code>sortedList</code>'s elements cannot be compared by\n             * <code>comparator</code>.\n             */\n            Collections.binarySearch = function (sortedList, key, comparator) {\n                if (comparator === void 0) { comparator = null; }\n                if (comparator == null) {\n                    comparator = java.util.Comparators.natural();\n                }\n                var low = 0;\n                var high = sortedList.size() - 1;\n                while ((low <= high)) {\n                    var mid = low + ((high - low) >> 1);\n                    var midVal = sortedList.get(mid);\n                    var compareResult = comparator.compare(midVal, key);\n                    if (compareResult < 0) {\n                        low = mid + 1;\n                    }\n                    else if (compareResult > 0) {\n                        high = mid - 1;\n                    }\n                    else {\n                        return mid;\n                    }\n                }\n                ;\n                return -low - 1;\n            };\n            Collections.copy = function (dest, src) {\n                if (src.size() > dest.size()) {\n                    throw new java.lang.IndexOutOfBoundsException(\"src does not fit in dest\");\n                }\n                var destIt = dest.listIterator();\n                for (var index168 = src.iterator(); index168.hasNext();) {\n                    var e = index168.next();\n                    {\n                        destIt.next();\n                        destIt.set(e);\n                    }\n                }\n            };\n            Collections.disjoint = function (c1, c2) {\n                var iterating = c1;\n                var testing = c2;\n                if ((c1 != null && (c1[\"__interfaces\"] != null && c1[\"__interfaces\"].indexOf(\"java.util.Set\") >= 0 || c1.constructor != null && c1.constructor[\"__interfaces\"] != null && c1.constructor[\"__interfaces\"].indexOf(\"java.util.Set\") >= 0)) && !(c2 != null && (c2[\"__interfaces\"] != null && c2[\"__interfaces\"].indexOf(\"java.util.Set\") >= 0 || c2.constructor != null && c2.constructor[\"__interfaces\"] != null && c2.constructor[\"__interfaces\"].indexOf(\"java.util.Set\") >= 0))) {\n                    iterating = c2;\n                    testing = c1;\n                }\n                for (var index169 = iterating.iterator(); index169.hasNext();) {\n                    var o = index169.next();\n                    {\n                        if (testing.contains(o)) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            };\n            Collections.emptyIterator = function () {\n                return Collections.EmptyListIterator.INSTANCE_$LI$();\n            };\n            Collections.emptyList = function () {\n                return Collections.EMPTY_LIST_$LI$();\n            };\n            Collections.emptyListIterator = function () {\n                return Collections.EmptyListIterator.INSTANCE_$LI$();\n            };\n            Collections.emptyMap = function () {\n                return Collections.EMPTY_MAP_$LI$();\n            };\n            Collections.emptySet = function () {\n                return Collections.EMPTY_SET_$LI$();\n            };\n            Collections.enumeration = function (c) {\n                var it = c.iterator();\n                return new Collections.Collections$0(it);\n            };\n            Collections.fill = function (list, obj) {\n                for (var it = list.listIterator(); it.hasNext();) {\n                    it.next();\n                    it.set(obj);\n                }\n            };\n            Collections.frequency = function (c, o) {\n                var count = 0;\n                for (var index170 = c.iterator(); index170.hasNext();) {\n                    var e = index170.next();\n                    {\n                        if (java.util.Objects.equals(o, e)) {\n                            ++count;\n                        }\n                    }\n                }\n                return count;\n            };\n            Collections.list = function (e) {\n                var arrayList = (new java.util.ArrayList());\n                while ((e.hasMoreElements())) {\n                    arrayList.add(e.nextElement());\n                }\n                ;\n                return arrayList;\n            };\n            Collections.max = function (coll, comp) {\n                if (comp === void 0) { comp = null; }\n                if (comp == null) {\n                    comp = java.util.Comparators.natural();\n                }\n                var it = coll.iterator();\n                var max = it.next();\n                while ((it.hasNext())) {\n                    var t = it.next();\n                    if (comp.compare(t, max) > 0) {\n                        max = t;\n                    }\n                }\n                ;\n                return max;\n            };\n            Collections.min = function (coll, comp) {\n                if (comp === void 0) { comp = null; }\n                return Collections.max(coll, Collections.reverseOrder(comp));\n            };\n            Collections.newSetFromMap = function (map) {\n                javaemul.internal.InternalPreconditions.checkArgument(map.isEmpty(), \"map is not empty\");\n                return (new Collections.SetFromMap(map));\n            };\n            Collections.nCopies = function (n, o) {\n                var list = (new java.util.ArrayList());\n                for (var i = 0; i < n; ++i) {\n                    list.add(o);\n                }\n                return Collections.unmodifiableList(list);\n            };\n            Collections.replaceAll = function (list, oldVal, newVal) {\n                var modified = false;\n                for (var it = list.listIterator(); it.hasNext();) {\n                    var t = it.next();\n                    if (java.util.Objects.equals(t, oldVal)) {\n                        it.set(newVal);\n                        modified = true;\n                    }\n                }\n                return modified;\n            };\n            Collections.reverse = function (l) {\n                if (l != null && (l[\"__interfaces\"] != null && l[\"__interfaces\"].indexOf(\"java.util.RandomAccess\") >= 0 || l.constructor != null && l.constructor[\"__interfaces\"] != null && l.constructor[\"__interfaces\"].indexOf(\"java.util.RandomAccess\") >= 0)) {\n                    for (var iFront = 0, iBack = l.size() - 1; iFront < iBack; ++iFront, --iBack) {\n                        Collections.swap(l, iFront, iBack);\n                    }\n                }\n                else {\n                    var head = l.listIterator();\n                    var tail = l.listIterator(l.size());\n                    while ((head.nextIndex() < tail.previousIndex())) {\n                        var headElem = head.next();\n                        var tailElem = tail.previous();\n                        head.set(tailElem);\n                        tail.set(headElem);\n                    }\n                    ;\n                }\n            };\n            Collections.reverseOrder$ = function () {\n                return Collections.ReverseComparator.INSTANCE_$LI$();\n            };\n            Collections.reverseOrder = function (cmp) {\n                if (((cmp != null && (cmp[\"__interfaces\"] != null && cmp[\"__interfaces\"].indexOf(\"java.util.Comparator\") >= 0 || cmp.constructor != null && cmp.constructor[\"__interfaces\"] != null && cmp.constructor[\"__interfaces\"].indexOf(\"java.util.Comparator\") >= 0)) || cmp === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (cmp == null) {\n                            return Collections.reverseOrder();\n                        }\n                        return new Collections.Collections$1(cmp);\n                    })();\n                }\n                else if (cmp === undefined) {\n                    return java.util.Collections.reverseOrder$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Rotates the elements in {@code list} by the distance {@code dist}\n             * <p>\n             * e.g. for a given list with elements [1, 2, 3, 4, 5, 6, 7, 8, 9, 0], calling rotate(list, 3) or\n             * rotate(list, -7) would modify the list to look like this: [8, 9, 0, 1, 2, 3, 4, 5, 6, 7]\n             *\n             * @param lst the list whose elements are to be rotated.\n             * @param dist is the distance the list is rotated. This can be any valid integer. Negative values\n             * rotate the list backwards.\n             */\n            Collections.rotate = function (lst, dist) {\n                javaemul.internal.InternalPreconditions.checkNotNull(lst);\n                var size = lst.size();\n                if (size === 0) {\n                    return;\n                }\n                var normdist = dist % size;\n                if (normdist === 0) {\n                    return;\n                }\n                if (normdist < 0) {\n                    normdist += size;\n                }\n                if (lst != null && (lst[\"__interfaces\"] != null && lst[\"__interfaces\"].indexOf(\"java.util.RandomAccess\") >= 0 || lst.constructor != null && lst.constructor[\"__interfaces\"] != null && lst.constructor[\"__interfaces\"].indexOf(\"java.util.RandomAccess\") >= 0)) {\n                    var list = lst;\n                    var temp = list.get(0);\n                    var index = 0;\n                    var beginIndex = 0;\n                    for (var i = 0; i < size; i++) {\n                        index = (index + normdist) % size;\n                        temp = list.set(index, temp);\n                        if (index === beginIndex) {\n                            index = ++beginIndex;\n                            temp = list.get(beginIndex);\n                        }\n                    }\n                }\n                else {\n                    var divideIndex = size - normdist;\n                    var sublist1 = lst.subList(0, divideIndex);\n                    var sublist2 = lst.subList(divideIndex, size);\n                    Collections.reverse(sublist1);\n                    Collections.reverse(sublist2);\n                    Collections.reverse(lst);\n                }\n            };\n            Collections.shuffle = function (list, rnd) {\n                if (rnd === void 0) { rnd = Collections.RandomHolder.rnd_$LI$(); }\n                if (list != null && (list[\"__interfaces\"] != null && list[\"__interfaces\"].indexOf(\"java.util.RandomAccess\") >= 0 || list.constructor != null && list.constructor[\"__interfaces\"] != null && list.constructor[\"__interfaces\"].indexOf(\"java.util.RandomAccess\") >= 0)) {\n                    for (var i = list.size() - 1; i >= 1; i--) {\n                        Collections.swapImpl(list, i, rnd.nextInt(i + 1));\n                    }\n                }\n                else {\n                    var arr = list.toArray();\n                    for (var i = arr.length - 1; i >= 1; i--) {\n                        Collections.swapImpl(arr, i, rnd.nextInt(i + 1));\n                    }\n                    var it = list.listIterator();\n                    for (var index171 = 0; index171 < arr.length; index171++) {\n                        var e = arr[index171];\n                        {\n                            it.next();\n                            it.set(e);\n                        }\n                    }\n                }\n            };\n            Collections.singleton = function (o) {\n                var set = (new java.util.HashSet(1));\n                set.add(o);\n                return Collections.unmodifiableSet(set);\n            };\n            Collections.singletonList = function (o) {\n                return (new Collections.SingletonList(o));\n            };\n            Collections.singletonMap = function (key, value) {\n                var map = (new java.util.HashMap(1));\n                map.put(key, value);\n                return Collections.unmodifiableMap(map);\n            };\n            Collections.sort = function (target, c) {\n                if (c === void 0) { c = null; }\n                var x = target.toArray();\n                java.util.Arrays.sort(x, c);\n                Collections.replaceContents(target, x);\n            };\n            Collections.swap = function (list, i, j) {\n                Collections.swapImpl(list, i, j);\n            };\n            Collections.unmodifiableCollection = function (coll) {\n                return (new Collections.UnmodifiableCollection(coll));\n            };\n            Collections.unmodifiableList = function (list) {\n                return (list != null && (list[\"__interfaces\"] != null && list[\"__interfaces\"].indexOf(\"java.util.RandomAccess\") >= 0 || list.constructor != null && list.constructor[\"__interfaces\"] != null && list.constructor[\"__interfaces\"].indexOf(\"java.util.RandomAccess\") >= 0)) ? new Collections.UnmodifiableRandomAccessList(list) : new Collections.UnmodifiableList(list);\n            };\n            Collections.unmodifiableMap = function (map) {\n                return (new Collections.UnmodifiableMap(map));\n            };\n            Collections.unmodifiableSet = function (set) {\n                return (new Collections.UnmodifiableSet(set));\n            };\n            Collections.unmodifiableSortedMap = function (map) {\n                return (new Collections.UnmodifiableSortedMap(map));\n            };\n            Collections.unmodifiableSortedSet = function (set) {\n                return (new Collections.UnmodifiableSortedSet(set));\n            };\n            /**\n             * Computes hash code without preserving elements order (e.g. HashSet).\n             */\n            Collections.hashCode$java_lang_Iterable = function (collection) {\n                var hashCode = 0;\n                for (var index172 = collection.iterator(); index172.hasNext();) {\n                    var e = index172.next();\n                    {\n                        hashCode = hashCode + java.util.Objects.hashCode(e);\n                        hashCode = javaemul.internal.Coercions.ensureInt(hashCode);\n                    }\n                }\n                return hashCode;\n            };\n            /**\n             * Computes hash code preserving collection order (e.g. ArrayList).\n             */\n            Collections.hashCode = function (list) {\n                if (((list != null && (list[\"__interfaces\"] != null && list[\"__interfaces\"].indexOf(\"java.util.List\") >= 0 || list.constructor != null && list.constructor[\"__interfaces\"] != null && list.constructor[\"__interfaces\"].indexOf(\"java.util.List\") >= 0)) || list === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var hashCode = 1;\n                        for (var index173 = list.iterator(); index173.hasNext();) {\n                            var e = index173.next();\n                            {\n                                hashCode = 31 * hashCode + java.util.Objects.hashCode(e);\n                                hashCode = javaemul.internal.Coercions.ensureInt(hashCode);\n                            }\n                        }\n                        return hashCode;\n                    })();\n                }\n                else if (((list != null && (list[\"__interfaces\"] != null && list[\"__interfaces\"].indexOf(\"java.lang.Iterable\") >= 0 || list.constructor != null && list.constructor[\"__interfaces\"] != null && list.constructor[\"__interfaces\"].indexOf(\"java.lang.Iterable\") >= 0)) || list === null)) {\n                    return java.util.Collections.hashCode$java_lang_Iterable(list);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Replace contents of a list from an array.\n             *\n             * @param <T> element type\n             * @param target list to replace contents from an array\n             * @param x an Object array which can contain only T instances\n             */\n            Collections.replaceContents = function (target, x) {\n                var size = target.size();\n                for (var i = 0; i < size; i++) {\n                    target.set(i, x[i]);\n                }\n            };\n            Collections.swapImpl = function (list, i, j) {\n                if (((list != null && (list[\"__interfaces\"] != null && list[\"__interfaces\"].indexOf(\"java.util.List\") >= 0 || list.constructor != null && list.constructor[\"__interfaces\"] != null && list.constructor[\"__interfaces\"].indexOf(\"java.util.List\") >= 0)) || list === null) && ((typeof i === 'number') || i === null) && ((typeof j === 'number') || j === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        var t = list.get(i);\n                        list.set(i, list.get(j));\n                        list.set(j, t);\n                    })();\n                }\n                else if (((list != null && list instanceof Array) || list === null) && ((typeof i === 'number') || i === null) && ((typeof j === 'number') || j === null)) {\n                    return java.util.Collections.swapImpl$java_lang_Object_A$int$int(list, i, j);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            Collections.swapImpl$java_lang_Object_A$int$int = function (a, i, j) {\n                var obj = a[i];\n                a[i] = a[j];\n                a[j] = obj;\n            };\n            return Collections;\n        }());\n        util.Collections = Collections;\n        Collections[\"__class\"] = \"java.util.Collections\";\n        var Collections;\n        (function (Collections) {\n            var LifoQueue = (function (_super) {\n                __extends(LifoQueue, _super);\n                function LifoQueue(deque) {\n                    _super.call(this);\n                    this.deque = deque;\n                }\n                LifoQueue.prototype.iterator = function () {\n                    return this.deque.iterator();\n                };\n                LifoQueue.prototype.offer = function (e) {\n                    return this.deque.offerFirst(e);\n                };\n                LifoQueue.prototype.peek = function () {\n                    return this.deque.peekFirst();\n                };\n                LifoQueue.prototype.poll = function () {\n                    return this.deque.pollFirst();\n                };\n                LifoQueue.prototype.size = function () {\n                    return this.deque.size();\n                };\n                return LifoQueue;\n            }(java.util.AbstractQueue));\n            Collections.LifoQueue = LifoQueue;\n            LifoQueue[\"__class\"] = \"java.util.Collections.LifoQueue\";\n            LifoQueue[\"__interfaces\"] = [\"java.util.Collection\", \"java.util.Queue\", \"java.lang.Iterable\", \"java.io.Serializable\"];\n            var EmptyList = (function (_super) {\n                __extends(EmptyList, _super);\n                function EmptyList() {\n                    _super.call(this);\n                }\n                EmptyList.prototype.contains = function (object) {\n                    return false;\n                };\n                EmptyList.prototype.get = function (location) {\n                    javaemul.internal.InternalPreconditions.checkElementIndex(location, 0);\n                    return null;\n                };\n                EmptyList.prototype.iterator = function () {\n                    return Collections.emptyIterator();\n                };\n                EmptyList.prototype.listIterator$ = function () {\n                    return Collections.emptyListIterator();\n                };\n                EmptyList.prototype.size = function () {\n                    return 0;\n                };\n                return EmptyList;\n            }(java.util.AbstractList));\n            Collections.EmptyList = EmptyList;\n            EmptyList[\"__class\"] = \"java.util.Collections.EmptyList\";\n            EmptyList[\"__interfaces\"] = [\"java.util.RandomAccess\", \"java.util.List\", \"java.util.Collection\", \"java.lang.Iterable\", \"java.io.Serializable\"];\n            var EmptyListIterator = (function () {\n                function EmptyListIterator() {\n                }\n                EmptyListIterator.prototype.forEachRemaining = function (consumer) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(consumer);\n                    while ((this.hasNext())) {\n                        consumer(this.next());\n                    }\n                    ;\n                };\n                EmptyListIterator.INSTANCE_$LI$ = function () { if (EmptyListIterator.INSTANCE == null)\n                    EmptyListIterator.INSTANCE = new Collections.EmptyListIterator(); return EmptyListIterator.INSTANCE; };\n                ;\n                EmptyListIterator.prototype.add = function (o) {\n                    throw new java.lang.UnsupportedOperationException();\n                };\n                EmptyListIterator.prototype.hasNext = function () {\n                    return false;\n                };\n                EmptyListIterator.prototype.hasPrevious = function () {\n                    return false;\n                };\n                EmptyListIterator.prototype.next = function () {\n                    throw new java.util.NoSuchElementException();\n                };\n                EmptyListIterator.prototype.nextIndex = function () {\n                    return 0;\n                };\n                EmptyListIterator.prototype.previous = function () {\n                    throw new java.util.NoSuchElementException();\n                };\n                EmptyListIterator.prototype.previousIndex = function () {\n                    return -1;\n                };\n                EmptyListIterator.prototype.remove = function () {\n                    throw new java.lang.IllegalStateException();\n                };\n                EmptyListIterator.prototype.set = function (o) {\n                    throw new java.lang.IllegalStateException();\n                };\n                return EmptyListIterator;\n            }());\n            Collections.EmptyListIterator = EmptyListIterator;\n            EmptyListIterator[\"__class\"] = \"java.util.Collections.EmptyListIterator\";\n            EmptyListIterator[\"__interfaces\"] = [\"java.util.Iterator\", \"java.util.ListIterator\"];\n            var EmptySet = (function (_super) {\n                __extends(EmptySet, _super);\n                function EmptySet() {\n                    _super.call(this);\n                }\n                EmptySet.prototype.contains = function (object) {\n                    return false;\n                };\n                EmptySet.prototype.iterator = function () {\n                    return Collections.emptyIterator();\n                };\n                EmptySet.prototype.size = function () {\n                    return 0;\n                };\n                return EmptySet;\n            }(java.util.AbstractSet));\n            Collections.EmptySet = EmptySet;\n            EmptySet[\"__class\"] = \"java.util.Collections.EmptySet\";\n            EmptySet[\"__interfaces\"] = [\"java.util.Collection\", \"java.util.Set\", \"java.lang.Iterable\", \"java.io.Serializable\"];\n            var EmptyMap = (function (_super) {\n                __extends(EmptyMap, _super);\n                function EmptyMap() {\n                    _super.call(this);\n                }\n                EmptyMap.prototype.containsKey = function (key) {\n                    return false;\n                };\n                EmptyMap.prototype.containsValue = function (value) {\n                    return false;\n                };\n                EmptyMap.prototype.entrySet = function () {\n                    return java.util.Collections.EMPTY_SET_$LI$();\n                };\n                EmptyMap.prototype.get = function (key) {\n                    return null;\n                };\n                EmptyMap.prototype.keySet = function () {\n                    return java.util.Collections.EMPTY_SET_$LI$();\n                };\n                EmptyMap.prototype.size = function () {\n                    return 0;\n                };\n                EmptyMap.prototype.values = function () {\n                    return java.util.Collections.EMPTY_LIST_$LI$();\n                };\n                return EmptyMap;\n            }(java.util.AbstractMap));\n            Collections.EmptyMap = EmptyMap;\n            EmptyMap[\"__class\"] = \"java.util.Collections.EmptyMap\";\n            EmptyMap[\"__interfaces\"] = [\"java.util.Map\", \"java.io.Serializable\"];\n            var ReverseComparator = (function () {\n                function ReverseComparator() {\n                }\n                ReverseComparator.INSTANCE_$LI$ = function () { if (ReverseComparator.INSTANCE == null)\n                    ReverseComparator.INSTANCE = new Collections.ReverseComparator(); return ReverseComparator.INSTANCE; };\n                ;\n                ReverseComparator.prototype.compare = function (o1, o2) {\n                    if (((o1 != null && (o1[\"__interfaces\"] != null && o1[\"__interfaces\"].indexOf(\"java.lang.Comparable\") >= 0 || o1.constructor != null && o1.constructor[\"__interfaces\"] != null && o1.constructor[\"__interfaces\"].indexOf(\"java.lang.Comparable\") >= 0)) || o1 === null) && ((o2 != null && (o2[\"__interfaces\"] != null && o2[\"__interfaces\"].indexOf(\"java.lang.Comparable\") >= 0 || o2.constructor != null && o2.constructor[\"__interfaces\"] != null && o2.constructor[\"__interfaces\"].indexOf(\"java.lang.Comparable\") >= 0)) || o2 === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            return o2.compareTo(o1);\n                        })();\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                return ReverseComparator;\n            }());\n            Collections.ReverseComparator = ReverseComparator;\n            ReverseComparator[\"__class\"] = \"java.util.Collections.ReverseComparator\";\n            ReverseComparator[\"__interfaces\"] = [\"java.util.Comparator\"];\n            var SetFromMap = (function (_super) {\n                __extends(SetFromMap, _super);\n                function SetFromMap(map) {\n                    _super.call(this);\n                    this.backingMap = map;\n                }\n                SetFromMap.prototype.add = function (index, element) {\n                    if (((index != null) || index === null) && element === undefined) {\n                        return this.add$java_lang_Object(index);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                SetFromMap.prototype.add$java_lang_Object = function (e) {\n                    return this.backingMap.put(e, javaemul.internal.BooleanHelper.TRUE) == null;\n                };\n                SetFromMap.prototype.clear = function () {\n                    this.backingMap.clear();\n                };\n                SetFromMap.prototype.contains = function (o) {\n                    return this.backingMap.containsKey(o);\n                };\n                SetFromMap.prototype.equals = function (o) {\n                    return o === this || this.keySet().equals(o);\n                };\n                SetFromMap.prototype.hashCode = function () {\n                    return this.keySet().hashCode();\n                };\n                SetFromMap.prototype.iterator = function () {\n                    return this.keySet().iterator();\n                };\n                SetFromMap.prototype.remove = function (index) {\n                    if (((index != null) || index === null)) {\n                        return this.remove$java_lang_Object(index);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                SetFromMap.prototype.remove$java_lang_Object = function (o) {\n                    return this.backingMap.remove(o) != null;\n                };\n                SetFromMap.prototype.size = function () {\n                    return this.keySet().size();\n                };\n                SetFromMap.prototype.toString = function () {\n                    return this.keySet().toString();\n                };\n                /**\n                 * Lazy initialize keySet to avoid NPE after deserialization.\n                 */\n                SetFromMap.prototype.keySet = function () {\n                    if (this.__keySet == null) {\n                        this.__keySet = this.backingMap.keySet();\n                    }\n                    return this.__keySet;\n                };\n                return SetFromMap;\n            }(java.util.AbstractSet));\n            Collections.SetFromMap = SetFromMap;\n            SetFromMap[\"__class\"] = \"java.util.Collections.SetFromMap\";\n            SetFromMap[\"__interfaces\"] = [\"java.util.Collection\", \"java.util.Set\", \"java.lang.Iterable\", \"java.io.Serializable\"];\n            var SingletonList = (function (_super) {\n                __extends(SingletonList, _super);\n                function SingletonList(element) {\n                    _super.call(this);\n                    this.element = element;\n                }\n                SingletonList.prototype.contains = function (item) {\n                    return java.util.Objects.equals(this.element, item);\n                };\n                SingletonList.prototype.get = function (index) {\n                    javaemul.internal.InternalPreconditions.checkElementIndex(index, 1);\n                    return this.element;\n                };\n                SingletonList.prototype.size = function () {\n                    return 1;\n                };\n                return SingletonList;\n            }(java.util.AbstractList));\n            Collections.SingletonList = SingletonList;\n            SingletonList[\"__class\"] = \"java.util.Collections.SingletonList\";\n            SingletonList[\"__interfaces\"] = [\"java.util.List\", \"java.util.Collection\", \"java.lang.Iterable\", \"java.io.Serializable\"];\n            var UnmodifiableCollection = (function () {\n                function UnmodifiableCollection(coll) {\n                    this.coll = coll;\n                }\n                UnmodifiableCollection.prototype.forEach = function (action) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(action);\n                    for (var index174 = this.iterator(); index174.hasNext();) {\n                        var t = index174.next();\n                        {\n                            action(t);\n                        }\n                    }\n                };\n                UnmodifiableCollection.prototype.add = function (index, element) {\n                    if (((index != null) || index === null) && element === undefined) {\n                        return this.add$java_lang_Object(index);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                UnmodifiableCollection.prototype.add$java_lang_Object = function (o) {\n                    throw new java.lang.UnsupportedOperationException();\n                };\n                UnmodifiableCollection.prototype.addAll = function (index, c) {\n                    if (((index != null && (index[\"__interfaces\"] != null && index[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || index.constructor != null && index.constructor[\"__interfaces\"] != null && index.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || index === null) && c === undefined) {\n                        return this.addAll$java_util_Collection(index);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                UnmodifiableCollection.prototype.addAll$java_util_Collection = function (c) {\n                    throw new java.lang.UnsupportedOperationException();\n                };\n                UnmodifiableCollection.prototype.clear = function () {\n                    throw new java.lang.UnsupportedOperationException();\n                };\n                UnmodifiableCollection.prototype.contains = function (o) {\n                    return this.coll.contains(o);\n                };\n                UnmodifiableCollection.prototype.containsAll = function (c) {\n                    return this.coll.containsAll(c);\n                };\n                UnmodifiableCollection.prototype.isEmpty = function () {\n                    return this.coll.isEmpty();\n                };\n                UnmodifiableCollection.prototype.iterator = function () {\n                    return (new Collections.UnmodifiableCollectionIterator(this.coll.iterator()));\n                };\n                UnmodifiableCollection.prototype.remove = function (index) {\n                    if (((index != null) || index === null)) {\n                        return this.remove$java_lang_Object(index);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                UnmodifiableCollection.prototype.remove$java_lang_Object = function (o) {\n                    throw new java.lang.UnsupportedOperationException();\n                };\n                UnmodifiableCollection.prototype.removeAll = function (c) {\n                    throw new java.lang.UnsupportedOperationException();\n                };\n                UnmodifiableCollection.prototype.retainAll = function (c) {\n                    throw new java.lang.UnsupportedOperationException();\n                };\n                UnmodifiableCollection.prototype.size = function () {\n                    return this.coll.size();\n                };\n                UnmodifiableCollection.prototype.toArray$ = function () {\n                    return this.coll.toArray();\n                };\n                UnmodifiableCollection.prototype.toArray = function (a) {\n                    var _this = this;\n                    if (((a != null && a instanceof Array) || a === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            return _this.coll.toArray(a);\n                        })();\n                    }\n                    else if (a === undefined) {\n                        return this.toArray$();\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                UnmodifiableCollection.prototype.toString = function () {\n                    return this.coll.toString();\n                };\n                return UnmodifiableCollection;\n            }());\n            Collections.UnmodifiableCollection = UnmodifiableCollection;\n            UnmodifiableCollection[\"__class\"] = \"java.util.Collections.UnmodifiableCollection\";\n            UnmodifiableCollection[\"__interfaces\"] = [\"java.util.Collection\", \"java.lang.Iterable\"];\n            var UnmodifiableList = (function (_super) {\n                __extends(UnmodifiableList, _super);\n                function UnmodifiableList(list) {\n                    _super.call(this, list);\n                    this.list = list;\n                }\n                UnmodifiableList.prototype.forEach = function (action) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(action);\n                    for (var index175 = this.iterator(); index175.hasNext();) {\n                        var t = index175.next();\n                        {\n                            action(t);\n                        }\n                    }\n                };\n                UnmodifiableList.prototype.add = function (index, element) {\n                    if (((typeof index === 'number') || index === null) && ((element != null) || element === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            throw new java.lang.UnsupportedOperationException();\n                        })();\n                    }\n                    else if (((index != null) || index === null) && element === undefined) {\n                        return this.add$java_lang_Object(index);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                UnmodifiableList.prototype.addAll = function (index, c) {\n                    if (((typeof index === 'number') || index === null) && ((c != null && (c[\"__interfaces\"] != null && c[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || c.constructor != null && c.constructor[\"__interfaces\"] != null && c.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || c === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            throw new java.lang.UnsupportedOperationException();\n                        })();\n                    }\n                    else if (((index != null && (index[\"__interfaces\"] != null && index[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || index.constructor != null && index.constructor[\"__interfaces\"] != null && index.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || index === null) && c === undefined) {\n                        return this.addAll$java_util_Collection(index);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                UnmodifiableList.prototype.equals = function (o) {\n                    return this.list.equals(o);\n                };\n                UnmodifiableList.prototype.get = function (index) {\n                    return this.list.get(index);\n                };\n                UnmodifiableList.prototype.hashCode = function () {\n                    return this.list.hashCode();\n                };\n                UnmodifiableList.prototype.indexOf = function (o, index) {\n                    if (((o != null) || o === null) && index === undefined) {\n                        return this.indexOf$java_lang_Object(o);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                UnmodifiableList.prototype.indexOf$java_lang_Object = function (o) {\n                    return this.list.indexOf(o);\n                };\n                UnmodifiableList.prototype.isEmpty = function () {\n                    return this.list.isEmpty();\n                };\n                UnmodifiableList.prototype.lastIndexOf = function (o, index) {\n                    if (((o != null) || o === null) && index === undefined) {\n                        return this.lastIndexOf$java_lang_Object(o);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                UnmodifiableList.prototype.lastIndexOf$java_lang_Object = function (o) {\n                    return this.list.lastIndexOf(o);\n                };\n                UnmodifiableList.prototype.listIterator$ = function () {\n                    return this.listIterator(0);\n                };\n                UnmodifiableList.prototype.listIterator = function (from) {\n                    var _this = this;\n                    if (((typeof from === 'number') || from === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            return (new Collections.UnmodifiableListIterator(_this.list.listIterator(from)));\n                        })();\n                    }\n                    else if (from === undefined) {\n                        return this.listIterator$();\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                UnmodifiableList.prototype.remove = function (index) {\n                    if (((typeof index === 'number') || index === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            throw new java.lang.UnsupportedOperationException();\n                        })();\n                    }\n                    else if (((index != null) || index === null)) {\n                        return this.remove$java_lang_Object(index);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                UnmodifiableList.prototype.set = function (index, element) {\n                    throw new java.lang.UnsupportedOperationException();\n                };\n                UnmodifiableList.prototype.subList = function (fromIndex, toIndex) {\n                    return (new Collections.UnmodifiableList(this.list.subList(fromIndex, toIndex)));\n                };\n                return UnmodifiableList;\n            }(Collections.UnmodifiableCollection));\n            Collections.UnmodifiableList = UnmodifiableList;\n            UnmodifiableList[\"__class\"] = \"java.util.Collections.UnmodifiableList\";\n            UnmodifiableList[\"__interfaces\"] = [\"java.util.List\", \"java.util.Collection\", \"java.lang.Iterable\"];\n            var UnmodifiableRandomAccessList = (function (_super) {\n                __extends(UnmodifiableRandomAccessList, _super);\n                function UnmodifiableRandomAccessList(list) {\n                    _super.call(this, list);\n                }\n                return UnmodifiableRandomAccessList;\n            }(Collections.UnmodifiableList));\n            Collections.UnmodifiableRandomAccessList = UnmodifiableRandomAccessList;\n            UnmodifiableRandomAccessList[\"__class\"] = \"java.util.Collections.UnmodifiableRandomAccessList\";\n            UnmodifiableRandomAccessList[\"__interfaces\"] = [\"java.util.RandomAccess\", \"java.util.List\", \"java.util.Collection\", \"java.lang.Iterable\"];\n            var UnmodifiableSet = (function (_super) {\n                __extends(UnmodifiableSet, _super);\n                function UnmodifiableSet(set) {\n                    _super.call(this, set);\n                }\n                UnmodifiableSet.prototype.forEach = function (action) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(action);\n                    for (var index176 = this.iterator(); index176.hasNext();) {\n                        var t = index176.next();\n                        {\n                            action(t);\n                        }\n                    }\n                };\n                UnmodifiableSet.prototype.equals = function (o) {\n                    return this.coll.equals(o);\n                };\n                UnmodifiableSet.prototype.hashCode = function () {\n                    return this.coll.hashCode();\n                };\n                return UnmodifiableSet;\n            }(Collections.UnmodifiableCollection));\n            Collections.UnmodifiableSet = UnmodifiableSet;\n            UnmodifiableSet[\"__class\"] = \"java.util.Collections.UnmodifiableSet\";\n            UnmodifiableSet[\"__interfaces\"] = [\"java.util.Collection\", \"java.util.Set\", \"java.lang.Iterable\"];\n            var UnmodifiableMap = (function () {\n                function UnmodifiableMap(map) {\n                    this.map = map;\n                }\n                UnmodifiableMap.prototype.clear = function () {\n                    throw new java.lang.UnsupportedOperationException();\n                };\n                UnmodifiableMap.prototype.containsKey = function (key) {\n                    return this.map.containsKey(key);\n                };\n                UnmodifiableMap.prototype.containsValue = function (val) {\n                    return this.map.containsValue(val);\n                };\n                UnmodifiableMap.prototype.entrySet = function () {\n                    if (this.__entrySet == null) {\n                        this.__entrySet = (new UnmodifiableMap.UnmodifiableEntrySet(this.map.entrySet()));\n                    }\n                    return this.__entrySet;\n                };\n                UnmodifiableMap.prototype.equals = function (o) {\n                    return this.map.equals(o);\n                };\n                UnmodifiableMap.prototype.get = function (key) {\n                    return this.map.get(key);\n                };\n                UnmodifiableMap.prototype.hashCode = function () {\n                    return this.map.hashCode();\n                };\n                UnmodifiableMap.prototype.isEmpty = function () {\n                    return this.map.isEmpty();\n                };\n                UnmodifiableMap.prototype.keySet = function () {\n                    if (this.__keySet == null) {\n                        this.__keySet = (new Collections.UnmodifiableSet(this.map.keySet()));\n                    }\n                    return this.__keySet;\n                };\n                UnmodifiableMap.prototype.put = function (key, value) {\n                    throw new java.lang.UnsupportedOperationException();\n                };\n                UnmodifiableMap.prototype.putAll = function (t) {\n                    throw new java.lang.UnsupportedOperationException();\n                };\n                UnmodifiableMap.prototype.remove = function (key) {\n                    throw new java.lang.UnsupportedOperationException();\n                };\n                UnmodifiableMap.prototype.size = function () {\n                    return this.map.size();\n                };\n                UnmodifiableMap.prototype.toString = function () {\n                    return this.map.toString();\n                };\n                UnmodifiableMap.prototype.values = function () {\n                    if (this.__values == null) {\n                        this.__values = (new Collections.UnmodifiableCollection(this.map.values()));\n                    }\n                    return this.__values;\n                };\n                return UnmodifiableMap;\n            }());\n            Collections.UnmodifiableMap = UnmodifiableMap;\n            UnmodifiableMap[\"__class\"] = \"java.util.Collections.UnmodifiableMap\";\n            UnmodifiableMap[\"__interfaces\"] = [\"java.util.Map\"];\n            var UnmodifiableMap;\n            (function (UnmodifiableMap) {\n                var UnmodifiableEntrySet = (function (_super) {\n                    __extends(UnmodifiableEntrySet, _super);\n                    function UnmodifiableEntrySet(s) {\n                        _super.call(this, s);\n                    }\n                    UnmodifiableEntrySet.prototype.contains = function (o) {\n                        return this.coll.contains(o);\n                    };\n                    UnmodifiableEntrySet.prototype.containsAll = function (o) {\n                        return this.coll.containsAll(o);\n                    };\n                    UnmodifiableEntrySet.prototype.iterator = function () {\n                        var it = this.coll.iterator();\n                        return new UnmodifiableEntrySet.UnmodifiableEntrySet$0(this, it);\n                    };\n                    UnmodifiableEntrySet.prototype.toArray$ = function () {\n                        var array = _super.prototype.toArray.call(this);\n                        this.wrap(array, array.length);\n                        return array;\n                    };\n                    UnmodifiableEntrySet.prototype.toArray = function (a) {\n                        var _this = this;\n                        if (((a != null && a instanceof Array) || a === null)) {\n                            var __args = Array.prototype.slice.call(arguments);\n                            return (function () {\n                                var result = _super.prototype.toArray.call(_this, a);\n                                _this.wrap(result, _this.coll.size());\n                                return result;\n                            })();\n                        }\n                        else if (a === undefined) {\n                            return this.toArray$();\n                        }\n                        else\n                            throw new Error('invalid overload');\n                    };\n                    /**\n                     * Wrap an array of Map.Entries as UnmodifiableEntries.\n                     *\n                     * @param array array to wrap\n                     * @param size number of entries to wrap\n                     */\n                    UnmodifiableEntrySet.prototype.wrap = function (array, size) {\n                        for (var i = 0; i < size; ++i) {\n                            array[i] = (new UnmodifiableEntrySet.UnmodifiableEntry(array[i]));\n                        }\n                    };\n                    return UnmodifiableEntrySet;\n                }(Collections.UnmodifiableSet));\n                UnmodifiableMap.UnmodifiableEntrySet = UnmodifiableEntrySet;\n                UnmodifiableEntrySet[\"__class\"] = \"java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet\";\n                UnmodifiableEntrySet[\"__interfaces\"] = [\"java.util.Collection\", \"java.util.Set\", \"java.lang.Iterable\"];\n                var UnmodifiableEntrySet;\n                (function (UnmodifiableEntrySet) {\n                    var UnmodifiableEntry = (function () {\n                        function UnmodifiableEntry(entry) {\n                            this.entry = entry;\n                        }\n                        UnmodifiableEntry.prototype.equals = function (o) {\n                            return this.entry.equals(o);\n                        };\n                        UnmodifiableEntry.prototype.getKey = function () {\n                            return this.entry.getKey();\n                        };\n                        UnmodifiableEntry.prototype.getValue = function () {\n                            return this.entry.getValue();\n                        };\n                        UnmodifiableEntry.prototype.hashCode = function () {\n                            return this.entry.hashCode();\n                        };\n                        UnmodifiableEntry.prototype.setValue = function (value) {\n                            throw new java.lang.UnsupportedOperationException();\n                        };\n                        UnmodifiableEntry.prototype.toString = function () {\n                            return this.entry.toString();\n                        };\n                        return UnmodifiableEntry;\n                    }());\n                    UnmodifiableEntrySet.UnmodifiableEntry = UnmodifiableEntry;\n                    UnmodifiableEntry[\"__class\"] = \"java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry\";\n                    UnmodifiableEntry[\"__interfaces\"] = [\"java.util.Map.Entry\"];\n                    var UnmodifiableEntrySet$0 = (function () {\n                        function UnmodifiableEntrySet$0(__parent, it) {\n                            this.it = it;\n                            this.__parent = __parent;\n                        }\n                        UnmodifiableEntrySet$0.prototype.forEachRemaining = function (consumer) {\n                            javaemul.internal.InternalPreconditions.checkNotNull(consumer);\n                            while ((this.hasNext())) {\n                                consumer(this.next());\n                            }\n                            ;\n                        };\n                        UnmodifiableEntrySet$0.prototype.hasNext = function () {\n                            return this.it.hasNext();\n                        };\n                        UnmodifiableEntrySet$0.prototype.next = function () {\n                            return (new UnmodifiableEntrySet.UnmodifiableEntry(this.it.next()));\n                        };\n                        UnmodifiableEntrySet$0.prototype.remove = function () {\n                            throw new java.lang.UnsupportedOperationException();\n                        };\n                        return UnmodifiableEntrySet$0;\n                    }());\n                    UnmodifiableEntrySet.UnmodifiableEntrySet$0 = UnmodifiableEntrySet$0;\n                })(UnmodifiableEntrySet = UnmodifiableMap.UnmodifiableEntrySet || (UnmodifiableMap.UnmodifiableEntrySet = {}));\n            })(UnmodifiableMap = Collections.UnmodifiableMap || (Collections.UnmodifiableMap = {}));\n            var UnmodifiableSortedMap = (function (_super) {\n                __extends(UnmodifiableSortedMap, _super);\n                function UnmodifiableSortedMap(sortedMap) {\n                    _super.call(this, sortedMap);\n                    this.sortedMap = sortedMap;\n                }\n                UnmodifiableSortedMap.prototype.comparator = function () {\n                    return this.sortedMap.comparator();\n                };\n                UnmodifiableSortedMap.prototype.equals = function (o) {\n                    return this.sortedMap.equals(o);\n                };\n                UnmodifiableSortedMap.prototype.firstKey = function () {\n                    return this.sortedMap.firstKey();\n                };\n                UnmodifiableSortedMap.prototype.hashCode = function () {\n                    return this.sortedMap.hashCode();\n                };\n                UnmodifiableSortedMap.prototype.headMap = function (toKey, inclusive) {\n                    if (((toKey != null) || toKey === null) && inclusive === undefined) {\n                        return this.headMap$java_lang_Object(toKey);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                UnmodifiableSortedMap.prototype.headMap$java_lang_Object = function (toKey) {\n                    return (new Collections.UnmodifiableSortedMap(this.sortedMap.headMap(toKey)));\n                };\n                UnmodifiableSortedMap.prototype.lastKey = function () {\n                    return this.sortedMap.lastKey();\n                };\n                UnmodifiableSortedMap.prototype.subMap = function (fromKey, fromInclusive, toKey, toInclusive) {\n                    if (((fromKey != null) || fromKey === null) && ((fromInclusive != null) || fromInclusive === null) && toKey === undefined && toInclusive === undefined) {\n                        return this.subMap$java_lang_Object$java_lang_Object(fromKey, fromInclusive);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                UnmodifiableSortedMap.prototype.subMap$java_lang_Object$java_lang_Object = function (fromKey, toKey) {\n                    return (new Collections.UnmodifiableSortedMap(this.sortedMap.subMap(fromKey, toKey)));\n                };\n                UnmodifiableSortedMap.prototype.tailMap = function (fromKey, inclusive) {\n                    if (((fromKey != null) || fromKey === null) && inclusive === undefined) {\n                        return this.tailMap$java_lang_Object(fromKey);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                UnmodifiableSortedMap.prototype.tailMap$java_lang_Object = function (fromKey) {\n                    return (new Collections.UnmodifiableSortedMap(this.sortedMap.tailMap(fromKey)));\n                };\n                return UnmodifiableSortedMap;\n            }(Collections.UnmodifiableMap));\n            Collections.UnmodifiableSortedMap = UnmodifiableSortedMap;\n            UnmodifiableSortedMap[\"__class\"] = \"java.util.Collections.UnmodifiableSortedMap\";\n            UnmodifiableSortedMap[\"__interfaces\"] = [\"java.util.Map\", \"java.util.SortedMap\"];\n            var UnmodifiableSortedSet = (function (_super) {\n                __extends(UnmodifiableSortedSet, _super);\n                function UnmodifiableSortedSet(sortedSet) {\n                    _super.call(this, sortedSet);\n                    this.sortedSet = sortedSet;\n                }\n                UnmodifiableSortedSet.prototype.forEach = function (action) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(action);\n                    for (var index177 = this.iterator(); index177.hasNext();) {\n                        var t = index177.next();\n                        {\n                            action(t);\n                        }\n                    }\n                };\n                UnmodifiableSortedSet.prototype.comparator = function () {\n                    return this.sortedSet.comparator();\n                };\n                UnmodifiableSortedSet.prototype.equals = function (o) {\n                    return this.sortedSet.equals(o);\n                };\n                UnmodifiableSortedSet.prototype.first = function () {\n                    return this.sortedSet.first();\n                };\n                UnmodifiableSortedSet.prototype.hashCode = function () {\n                    return this.sortedSet.hashCode();\n                };\n                UnmodifiableSortedSet.prototype.headSet = function (toElement, inclusive) {\n                    if (((toElement != null) || toElement === null) && inclusive === undefined) {\n                        return this.headSet$java_lang_Object(toElement);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                UnmodifiableSortedSet.prototype.headSet$java_lang_Object = function (toElement) {\n                    return (new Collections.UnmodifiableSortedSet(this.sortedSet.headSet(toElement)));\n                };\n                UnmodifiableSortedSet.prototype.last = function () {\n                    return this.sortedSet.last();\n                };\n                UnmodifiableSortedSet.prototype.subSet = function (fromElement, fromInclusive, toElement, toInclusive) {\n                    if (((fromElement != null) || fromElement === null) && ((fromInclusive != null) || fromInclusive === null) && toElement === undefined && toInclusive === undefined) {\n                        return this.subSet$java_lang_Object$java_lang_Object(fromElement, fromInclusive);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                UnmodifiableSortedSet.prototype.subSet$java_lang_Object$java_lang_Object = function (fromElement, toElement) {\n                    return (new Collections.UnmodifiableSortedSet(this.sortedSet.subSet(fromElement, toElement)));\n                };\n                UnmodifiableSortedSet.prototype.tailSet = function (fromElement, inclusive) {\n                    if (((fromElement != null) || fromElement === null) && inclusive === undefined) {\n                        return this.tailSet$java_lang_Object(fromElement);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                UnmodifiableSortedSet.prototype.tailSet$java_lang_Object = function (fromElement) {\n                    return (new Collections.UnmodifiableSortedSet(this.sortedSet.tailSet(fromElement)));\n                };\n                return UnmodifiableSortedSet;\n            }(Collections.UnmodifiableSet));\n            Collections.UnmodifiableSortedSet = UnmodifiableSortedSet;\n            UnmodifiableSortedSet[\"__class\"] = \"java.util.Collections.UnmodifiableSortedSet\";\n            UnmodifiableSortedSet[\"__interfaces\"] = [\"java.util.SortedSet\", \"java.util.Collection\", \"java.util.Set\", \"java.lang.Iterable\"];\n            var UnmodifiableCollectionIterator = (function () {\n                function UnmodifiableCollectionIterator(it) {\n                    this.it = it;\n                }\n                UnmodifiableCollectionIterator.prototype.forEachRemaining = function (consumer) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(consumer);\n                    while ((this.hasNext())) {\n                        consumer(this.next());\n                    }\n                    ;\n                };\n                UnmodifiableCollectionIterator.prototype.hasNext = function () {\n                    return this.it.hasNext();\n                };\n                UnmodifiableCollectionIterator.prototype.next = function () {\n                    return this.it.next();\n                };\n                UnmodifiableCollectionIterator.prototype.remove = function () {\n                    throw new java.lang.UnsupportedOperationException();\n                };\n                return UnmodifiableCollectionIterator;\n            }());\n            Collections.UnmodifiableCollectionIterator = UnmodifiableCollectionIterator;\n            UnmodifiableCollectionIterator[\"__class\"] = \"java.util.Collections.UnmodifiableCollectionIterator\";\n            UnmodifiableCollectionIterator[\"__interfaces\"] = [\"java.util.Iterator\"];\n            var UnmodifiableListIterator = (function (_super) {\n                __extends(UnmodifiableListIterator, _super);\n                function UnmodifiableListIterator(lit) {\n                    _super.call(this, lit);\n                    this.lit = lit;\n                }\n                UnmodifiableListIterator.prototype.forEachRemaining = function (consumer) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(consumer);\n                    while ((this.hasNext())) {\n                        consumer(this.next());\n                    }\n                    ;\n                };\n                UnmodifiableListIterator.prototype.add = function (o) {\n                    throw new java.lang.UnsupportedOperationException();\n                };\n                UnmodifiableListIterator.prototype.hasPrevious = function () {\n                    return this.lit.hasPrevious();\n                };\n                UnmodifiableListIterator.prototype.nextIndex = function () {\n                    return this.lit.nextIndex();\n                };\n                UnmodifiableListIterator.prototype.previous = function () {\n                    return this.lit.previous();\n                };\n                UnmodifiableListIterator.prototype.previousIndex = function () {\n                    return this.lit.previousIndex();\n                };\n                UnmodifiableListIterator.prototype.set = function (o) {\n                    throw new java.lang.UnsupportedOperationException();\n                };\n                return UnmodifiableListIterator;\n            }(Collections.UnmodifiableCollectionIterator));\n            Collections.UnmodifiableListIterator = UnmodifiableListIterator;\n            UnmodifiableListIterator[\"__class\"] = \"java.util.Collections.UnmodifiableListIterator\";\n            UnmodifiableListIterator[\"__interfaces\"] = [\"java.util.Iterator\", \"java.util.ListIterator\"];\n            var RandomHolder = (function () {\n                function RandomHolder() {\n                }\n                RandomHolder.rnd_$LI$ = function () { if (RandomHolder.rnd == null)\n                    RandomHolder.rnd = new java.util.Random(); return RandomHolder.rnd; };\n                ;\n                return RandomHolder;\n            }());\n            Collections.RandomHolder = RandomHolder;\n            RandomHolder[\"__class\"] = \"java.util.Collections.RandomHolder\";\n            var Collections$0 = (function () {\n                function Collections$0(it) {\n                    this.it = it;\n                }\n                Collections$0.prototype.hasMoreElements = function () {\n                    return this.it.hasNext();\n                };\n                Collections$0.prototype.nextElement = function () {\n                    return this.it.next();\n                };\n                return Collections$0;\n            }());\n            Collections.Collections$0 = Collections$0;\n            var Collections$1 = (function () {\n                function Collections$1(cmp) {\n                    this.cmp = cmp;\n                }\n                Collections$1.prototype.compare = function (t1, t2) {\n                    return this.cmp.compare(t2, t1);\n                };\n                return Collections$1;\n            }());\n            Collections.Collections$1 = Collections$1;\n        })(Collections = util.Collections || (util.Collections = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * A {@link java.util.Map} of {@link Enum}s. <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/EnumMap.html\">[Sun\n         * docs]</a>\n         *\n         * @param <K> key type\n         * @param <V> value type\n         */\n        var EnumMap = (function (_super) {\n            __extends(EnumMap, _super);\n            function EnumMap(type) {\n                var _this = this;\n                if (((type != null && type instanceof java.lang.Class) || type === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    (function () {\n                        _this.init(type);\n                    })();\n                }\n                else if (((type != null && type instanceof java.util.EnumMap) || type === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var m_1 = __args[0];\n                    _super.call(this);\n                    (function () {\n                        _this.init(m_1);\n                    })();\n                }\n                else if (((type != null && (type[\"__interfaces\"] != null && type[\"__interfaces\"].indexOf(\"java.util.Map\") >= 0 || type.constructor != null && type.constructor[\"__interfaces\"] != null && type.constructor[\"__interfaces\"].indexOf(\"java.util.Map\") >= 0)) || type === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var m_2 = __args[0];\n                    _super.call(this);\n                    (function () {\n                        if (m_2 != null && m_2 instanceof java.util.EnumMap) {\n                            _this.init(m_2);\n                        }\n                        else {\n                            javaemul.internal.InternalPreconditions.checkArgument(!m_2.isEmpty(), \"Specified map is empty\");\n                            _this.init(m_2.keySet().iterator().next().getDeclaringClass());\n                            _this.putAll(m_2);\n                        }\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            EnumMap.prototype.clear = function () {\n                this.__keySet.clear();\n                this.__values = new Array(this.__values.length);\n            };\n            EnumMap.prototype.clone = function () {\n                return (new EnumMap(this));\n            };\n            EnumMap.prototype.containsKey = function (key) {\n                return this.__keySet.contains(key);\n            };\n            EnumMap.prototype.containsValue = function (value) {\n                for (var index178 = this.__keySet.iterator(); index178.hasNext();) {\n                    var key = index178.next();\n                    {\n                        if (java.util.Objects.equals(value, this.__values[key.ordinal()])) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            };\n            EnumMap.prototype.entrySet = function () {\n                return new EnumMap.EntrySet(this);\n            };\n            EnumMap.prototype.get = function (k) {\n                return this.__keySet.contains(k) ? this.__values[this.asOrdinal(k)] : null;\n            };\n            EnumMap.prototype.put = function (key, value) {\n                var _this = this;\n                if (((key != null) || key === null) && ((value != null) || value === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        _this.__keySet.add(key);\n                        return _this.set(key.ordinal(), value);\n                    })();\n                }\n                else if (((key != null) || key === null) && ((value != null) || value === null)) {\n                    return this.put$java_lang_Object$java_lang_Object(key, value);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            EnumMap.prototype.remove = function (key) {\n                return this.__keySet.remove(key) ? this.set(this.asOrdinal(key), null) : null;\n            };\n            EnumMap.prototype.size = function () {\n                return this.__keySet.size();\n            };\n            /**\n             * Returns <code>key</code> as <code>K</code>. Only runtime checks that\n             * key is an Enum, not that it's the particular Enum K. Should only be called\n             * when you are sure <code>key</code> is of type <code>K</code>.\n             */\n            EnumMap.prototype.asKey = function (key) {\n                return key;\n            };\n            EnumMap.prototype.asOrdinal = function (key) {\n                return this.asKey(key).ordinal();\n            };\n            EnumMap.prototype.init = function (type) {\n                var _this = this;\n                if (((type != null && type instanceof java.lang.Class) || type === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        _this.__keySet = java.util.EnumSet.noneOf(type);\n                        _this.__values = new Array(_this.__keySet.capacity());\n                    })();\n                }\n                else if (((type != null && type instanceof java.util.EnumMap) || type === null)) {\n                    return this.init$java_util_EnumMap(type);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            EnumMap.prototype.init$java_util_EnumMap = function (m) {\n                this.__keySet = m.__keySet.clone();\n                this.__values = javaemul.internal.ArrayHelper.clone(m.__values, 0, m.__values.length);\n            };\n            EnumMap.prototype.set = function (ordinal, value) {\n                var was = this.__values[ordinal];\n                this.__values[ordinal] = value;\n                return was;\n            };\n            return EnumMap;\n        }(java.util.AbstractMap));\n        util.EnumMap = EnumMap;\n        EnumMap[\"__class\"] = \"java.util.EnumMap\";\n        EnumMap[\"__interfaces\"] = [\"java.util.Map\"];\n        var EnumMap;\n        (function (EnumMap) {\n            var EntrySet = (function (_super) {\n                __extends(EntrySet, _super);\n                function EntrySet(__parent) {\n                    _super.call(this);\n                    this.__parent = __parent;\n                }\n                EntrySet.prototype.clear = function () {\n                    this.__parent.clear();\n                };\n                EntrySet.prototype.contains = function (o) {\n                    if (o != null && (o[\"__interfaces\"] != null && o[\"__interfaces\"].indexOf(\"java.util.Map.Entry\") >= 0 || o.constructor != null && o.constructor[\"__interfaces\"] != null && o.constructor[\"__interfaces\"].indexOf(\"java.util.Map.Entry\") >= 0)) {\n                        return this.__parent.containsEntry(o);\n                    }\n                    return false;\n                };\n                EntrySet.prototype.iterator = function () {\n                    return new EnumMap.EntrySetIterator(this.__parent);\n                };\n                EntrySet.prototype.remove = function (index) {\n                    if (((index != null) || index === null)) {\n                        return this.remove$java_lang_Object(index);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                EntrySet.prototype.remove$java_lang_Object = function (entry) {\n                    if (this.contains(entry)) {\n                        var key = entry.getKey();\n                        this.__parent.remove(key);\n                        return true;\n                    }\n                    return false;\n                };\n                EntrySet.prototype.size = function () {\n                    return this.__parent.size();\n                };\n                return EntrySet;\n            }(java.util.AbstractSet));\n            EnumMap.EntrySet = EntrySet;\n            EntrySet[\"__class\"] = \"java.util.EnumMap.EntrySet\";\n            EntrySet[\"__interfaces\"] = [\"java.util.Collection\", \"java.util.Set\", \"java.lang.Iterable\"];\n            var EntrySetIterator = (function () {\n                function EntrySetIterator(__parent) {\n                    this.__parent = __parent;\n                    this.it = this.__parent.__keySet.iterator();\n                }\n                EntrySetIterator.prototype.forEachRemaining = function (consumer) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(consumer);\n                    while ((this.hasNext())) {\n                        consumer(this.next());\n                    }\n                    ;\n                };\n                EntrySetIterator.prototype.hasNext = function () {\n                    return this.it.hasNext();\n                };\n                EntrySetIterator.prototype.next = function () {\n                    this.key = this.it.next();\n                    return new EnumMap.MapEntry(this.__parent, this.key);\n                };\n                EntrySetIterator.prototype.remove = function () {\n                    javaemul.internal.InternalPreconditions.checkState(this.key != null);\n                    this.__parent.remove(this.key);\n                    this.key = null;\n                };\n                return EntrySetIterator;\n            }());\n            EnumMap.EntrySetIterator = EntrySetIterator;\n            EntrySetIterator[\"__class\"] = \"java.util.EnumMap.EntrySetIterator\";\n            EntrySetIterator[\"__interfaces\"] = [\"java.util.Iterator\"];\n            var MapEntry = (function (_super) {\n                __extends(MapEntry, _super);\n                function MapEntry(__parent, key) {\n                    _super.call(this);\n                    this.__parent = __parent;\n                    this.key = key;\n                }\n                MapEntry.prototype.getKey = function () {\n                    return this.key;\n                };\n                MapEntry.prototype.getValue = function () {\n                    return this.__parent.__values[this.key.ordinal()];\n                };\n                MapEntry.prototype.setValue = function (value) {\n                    return this.__parent.set(this.key.ordinal(), value);\n                };\n                return MapEntry;\n            }(java.util.AbstractMapEntry));\n            EnumMap.MapEntry = MapEntry;\n            MapEntry[\"__class\"] = \"java.util.EnumMap.MapEntry\";\n            MapEntry[\"__interfaces\"] = [\"java.util.Map.Entry\"];\n        })(EnumMap = util.EnumMap || (util.EnumMap = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Hash table and linked-list implementation of the Set interface with\n         * predictable iteration order. <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/LinkedHashSet.html\">[Sun\n         * docs]</a>\n         *\n         * @param <E> element type.\n         */\n        var LinkedHashSet = (function (_super) {\n            __extends(LinkedHashSet, _super);\n            function LinkedHashSet(ignored, alsoIgnored) {\n                var _this = this;\n                if (((typeof ignored === 'number') || ignored === null) && ((typeof alsoIgnored === 'number') || alsoIgnored === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, (new java.util.LinkedHashMap(ignored, alsoIgnored)));\n                }\n                else if (((ignored != null && (ignored[\"__interfaces\"] != null && ignored[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0 || ignored.constructor != null && ignored.constructor[\"__interfaces\"] != null && ignored.constructor[\"__interfaces\"].indexOf(\"java.util.Collection\") >= 0)) || ignored === null) && alsoIgnored === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var c_7 = __args[0];\n                    _super.call(this, (new java.util.LinkedHashMap()));\n                    (function () {\n                        _this.addAll(c_7);\n                    })();\n                }\n                else if (((typeof ignored === 'number') || ignored === null) && alsoIgnored === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, (new java.util.LinkedHashMap(ignored)));\n                }\n                else if (ignored === undefined && alsoIgnored === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, (new java.util.LinkedHashMap()));\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            LinkedHashSet.prototype.forEach = function (action) {\n                javaemul.internal.InternalPreconditions.checkNotNull(action);\n                for (var index179 = this.iterator(); index179.hasNext();) {\n                    var t = index179.next();\n                    {\n                        action(t);\n                    }\n                }\n            };\n            LinkedHashSet.prototype.clone = function () {\n                return (new LinkedHashSet(this));\n            };\n            return LinkedHashSet;\n        }(java.util.HashSet));\n        util.LinkedHashSet = LinkedHashSet;\n        LinkedHashSet[\"__class\"] = \"java.util.LinkedHashSet\";\n        LinkedHashSet[\"__interfaces\"] = [\"java.lang.Cloneable\", \"java.util.Collection\", \"java.util.Set\", \"java.lang.Iterable\", \"java.io.Serializable\"];\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * A helper to detect concurrent modifications to collections. This is implemented as a helper\n         * utility so that we could remove the checks easily by a flag.\n         */\n        var ConcurrentModificationDetector = (function () {\n            function ConcurrentModificationDetector() {\n            }\n            ConcurrentModificationDetector.API_CHECK_$LI$ = function () { if (ConcurrentModificationDetector.API_CHECK == null)\n                ConcurrentModificationDetector.API_CHECK = (java.lang.System.getProperty(\"jre.checks.api\", \"ENABLED\") === \"ENABLED\"); return ConcurrentModificationDetector.API_CHECK; };\n            ;\n            ConcurrentModificationDetector.structureChanged = function (map) {\n                if (!ConcurrentModificationDetector.API_CHECK_$LI$()) {\n                    return;\n                }\n                var modCount = javaemul.internal.JsUtils.getIntProperty(map, ConcurrentModificationDetector.MOD_COUNT_PROPERTY) | 0;\n                javaemul.internal.JsUtils.setIntProperty(map, ConcurrentModificationDetector.MOD_COUNT_PROPERTY, modCount + 1);\n            };\n            ConcurrentModificationDetector.recordLastKnownStructure = function (host, iterator) {\n                if (!ConcurrentModificationDetector.API_CHECK_$LI$()) {\n                    return;\n                }\n                var modCount = javaemul.internal.JsUtils.getIntProperty(host, ConcurrentModificationDetector.MOD_COUNT_PROPERTY);\n                javaemul.internal.JsUtils.setIntProperty(iterator, ConcurrentModificationDetector.MOD_COUNT_PROPERTY, modCount);\n            };\n            ConcurrentModificationDetector.checkStructuralChange = function (host, iterator) {\n                if (!ConcurrentModificationDetector.API_CHECK_$LI$()) {\n                    return;\n                }\n                if (javaemul.internal.JsUtils.getIntProperty(iterator, ConcurrentModificationDetector.MOD_COUNT_PROPERTY) !== javaemul.internal.JsUtils.getIntProperty(host, ConcurrentModificationDetector.MOD_COUNT_PROPERTY)) {\n                    throw new java.util.ConcurrentModificationException();\n                }\n            };\n            ConcurrentModificationDetector.MOD_COUNT_PROPERTY = \"_gwt_modCount\";\n            return ConcurrentModificationDetector;\n        }());\n        util.ConcurrentModificationDetector = ConcurrentModificationDetector;\n        ConcurrentModificationDetector[\"__class\"] = \"java.util.ConcurrentModificationDetector\";\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        var logging;\n        (function (logging) {\n            /**\n             * An emulation of the java.util.logging.Logger class. See\n             * <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/util/logging/Logger.html\">\n             * The Java API doc for details</a>\n             */\n            var Logger = (function () {\n                function Logger(name, resourceName) {\n                    this.level = null;\n                    this.useParentHandlers = false;\n                    if (Logger.LOGGING_FALSE_$LI$()) {\n                        return;\n                    }\n                    this.name = name;\n                    this.useParentHandlers = true;\n                    this.handlers = (new java.util.ArrayList());\n                }\n                Logger.__static_initialize = function () { if (!Logger.__static_initialized) {\n                    Logger.__static_initialized = true;\n                    Logger.__static_initializer_0();\n                } };\n                Logger.LOGGING_ENABLED_$LI$ = function () { Logger.__static_initialize(); if (Logger.LOGGING_ENABLED == null)\n                    Logger.LOGGING_ENABLED = java.lang.System.getProperty(\"gwt.logging.enabled\", \"TRUE\"); return Logger.LOGGING_ENABLED; };\n                ;\n                Logger.LOGGING_WARNING_$LI$ = function () { Logger.__static_initialize(); if (Logger.LOGGING_WARNING == null)\n                    Logger.LOGGING_WARNING = (Logger.LOGGING_ENABLED_$LI$() === \"WARNING\"); return Logger.LOGGING_WARNING; };\n                ;\n                Logger.LOGGING_SEVERE_$LI$ = function () { Logger.__static_initialize(); if (Logger.LOGGING_SEVERE == null)\n                    Logger.LOGGING_SEVERE = (Logger.LOGGING_ENABLED_$LI$() === \"SEVERE\"); return Logger.LOGGING_SEVERE; };\n                ;\n                Logger.LOGGING_FALSE_$LI$ = function () { Logger.__static_initialize(); if (Logger.LOGGING_FALSE == null)\n                    Logger.LOGGING_FALSE = (Logger.LOGGING_ENABLED_$LI$() === \"FALSE\"); return Logger.LOGGING_FALSE; };\n                ;\n                Logger.__static_initializer_0 = function () {\n                    Logger.assertLoggingValues();\n                };\n                Logger.getGlobal = function () {\n                    return Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\n                };\n                Logger.getLogger = function (name) {\n                    if (Logger.LOGGING_FALSE_$LI$()) {\n                        return new Logger(name, null);\n                    }\n                    return java.util.logging.LogManager.getLogManager().ensureLogger(name);\n                };\n                Logger.assertLoggingValues = function () {\n                    if ((Logger.LOGGING_ENABLED_$LI$() === \"FALSE\") || (Logger.LOGGING_ENABLED_$LI$() === \"TRUE\") || (Logger.LOGGING_ENABLED_$LI$() === \"SEVERE\") || (Logger.LOGGING_ENABLED_$LI$() === \"WARNING\")) {\n                        return;\n                    }\n                    throw new Error(\"Undefined value for gwt.logging.enabled: \\'\" + Logger.LOGGING_ENABLED_$LI$() + \"\\'. Allowed values are TRUE, FALSE, SEVERE, WARNING\");\n                };\n                Logger.prototype.addHandler = function (handler) {\n                    if (Logger.LOGGING_FALSE_$LI$()) {\n                        return;\n                    }\n                    this.handlers.add(handler);\n                };\n                Logger.prototype.config = function (msg) {\n                    if (Logger.LOGGING_FALSE_$LI$() || Logger.LOGGING_SEVERE_$LI$() || Logger.LOGGING_WARNING_$LI$()) {\n                        return;\n                    }\n                    this.log(java.util.logging.Level.CONFIG_$LI$(), msg);\n                };\n                Logger.prototype.fine = function (msg) {\n                    if (Logger.LOGGING_FALSE_$LI$() || Logger.LOGGING_SEVERE_$LI$() || Logger.LOGGING_WARNING_$LI$()) {\n                        return;\n                    }\n                    this.log(java.util.logging.Level.FINE_$LI$(), msg);\n                };\n                Logger.prototype.finer = function (msg) {\n                    if (Logger.LOGGING_FALSE_$LI$() || Logger.LOGGING_SEVERE_$LI$() || Logger.LOGGING_WARNING_$LI$()) {\n                        return;\n                    }\n                    this.log(java.util.logging.Level.FINER_$LI$(), msg);\n                };\n                Logger.prototype.finest = function (msg) {\n                    if (Logger.LOGGING_FALSE_$LI$() || Logger.LOGGING_SEVERE_$LI$() || Logger.LOGGING_WARNING_$LI$()) {\n                        return;\n                    }\n                    this.log(java.util.logging.Level.FINEST_$LI$(), msg);\n                };\n                Logger.prototype.info = function (msg) {\n                    if (Logger.LOGGING_FALSE_$LI$() || Logger.LOGGING_SEVERE_$LI$() || Logger.LOGGING_WARNING_$LI$()) {\n                        return;\n                    }\n                    this.log(java.util.logging.Level.INFO_$LI$(), msg);\n                };\n                Logger.prototype.warning = function (msg) {\n                    if (Logger.LOGGING_FALSE_$LI$() || Logger.LOGGING_SEVERE_$LI$()) {\n                        return;\n                    }\n                    this.log(java.util.logging.Level.WARNING_$LI$(), msg);\n                };\n                Logger.prototype.severe = function (msg) {\n                    if (Logger.LOGGING_FALSE_$LI$()) {\n                        return;\n                    }\n                    this.log(java.util.logging.Level.SEVERE_$LI$(), msg);\n                };\n                Logger.prototype.getHandlers = function () {\n                    if (Logger.LOGGING_FALSE_$LI$()) {\n                        return new Array(0);\n                    }\n                    return this.handlers.toArray(new Array(this.handlers.size()));\n                };\n                Logger.prototype.getLevel = function () {\n                    return Logger.LOGGING_FALSE_$LI$() ? null : this.level;\n                };\n                Logger.prototype.getName = function () {\n                    return Logger.LOGGING_FALSE_$LI$() ? null : this.name;\n                };\n                Logger.prototype.getParent = function () {\n                    return Logger.LOGGING_FALSE_$LI$() ? null : this.parent;\n                };\n                Logger.prototype.getUseParentHandlers = function () {\n                    return Logger.LOGGING_FALSE_$LI$() ? false : this.useParentHandlers;\n                };\n                Logger.prototype.isLoggable = function (messageLevel) {\n                    return Logger.LOGGING_FALSE_$LI$() ? false : this.getEffectiveLevel().intValue() <= messageLevel.intValue();\n                };\n                Logger.prototype.log$java_util_logging_Level$java_lang_String = function (level, msg) {\n                    this.log(level, msg, null);\n                };\n                Logger.prototype.log = function (level, msg, thrown) {\n                    var _this = this;\n                    if (((level != null && level instanceof java.util.logging.Level) || level === null) && ((typeof msg === 'string') || msg === null) && ((thrown != null && thrown instanceof Error) || thrown === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            if (Logger.LOGGING_FALSE_$LI$()) {\n                                return;\n                            }\n                            if (Logger.LOGGING_SEVERE_$LI$()) {\n                                if (level.intValue() >= 1000) {\n                                    _this.actuallyLog(level, msg, thrown);\n                                }\n                            }\n                            else if (Logger.LOGGING_WARNING_$LI$()) {\n                                if (level.intValue() >= java.util.logging.Level.WARNING_$LI$().intValue()) {\n                                    _this.actuallyLog(level, msg, thrown);\n                                }\n                            }\n                            else {\n                                _this.actuallyLog(level, msg, thrown);\n                            }\n                        })();\n                    }\n                    else if (((level != null && level instanceof java.util.logging.Level) || level === null) && ((typeof msg === 'string') || msg === null) && thrown === undefined) {\n                        return this.log$java_util_logging_Level$java_lang_String(level, msg);\n                    }\n                    else if (((level != null && level instanceof java.util.logging.LogRecord) || level === null) && msg === undefined && thrown === undefined) {\n                        return this.log$java_util_logging_LogRecord(level);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                Logger.prototype.log$java_util_logging_LogRecord = function (record) {\n                    if (Logger.LOGGING_FALSE_$LI$()) {\n                        return;\n                    }\n                    if (Logger.LOGGING_SEVERE_$LI$()) {\n                        if (record.getLevel().intValue() >= 1000) {\n                            this.actuallyLog(record);\n                        }\n                    }\n                    else if (Logger.LOGGING_WARNING_$LI$()) {\n                        if (record.getLevel().intValue() >= java.util.logging.Level.WARNING_$LI$().intValue()) {\n                            this.actuallyLog(record);\n                        }\n                    }\n                    else {\n                        this.actuallyLog(record);\n                    }\n                };\n                Logger.prototype.removeHandler = function (handler) {\n                    if (Logger.LOGGING_FALSE_$LI$()) {\n                        return;\n                    }\n                    this.handlers.remove(handler);\n                };\n                Logger.prototype.setLevel = function (newLevel) {\n                    if (Logger.LOGGING_FALSE_$LI$()) {\n                        return;\n                    }\n                    this.level = newLevel;\n                };\n                Logger.prototype.setParent = function (newParent) {\n                    if (Logger.LOGGING_FALSE_$LI$()) {\n                        return;\n                    }\n                    if (newParent != null) {\n                        this.parent = newParent;\n                    }\n                };\n                Logger.prototype.setUseParentHandlers = function (newUseParentHandlers) {\n                    if (Logger.LOGGING_FALSE_$LI$()) {\n                        return;\n                    }\n                    this.useParentHandlers = newUseParentHandlers;\n                };\n                Logger.prototype.getEffectiveLevel = function () {\n                    if (this.level != null) {\n                        return this.level;\n                    }\n                    var logger = this.getParent();\n                    while ((logger != null)) {\n                        var effectiveLevel = logger.getLevel();\n                        if (effectiveLevel != null) {\n                            return effectiveLevel;\n                        }\n                        logger = logger.getParent();\n                    }\n                    ;\n                    return java.util.logging.Level.INFO_$LI$();\n                };\n                Logger.prototype.actuallyLog = function (level, msg, thrown) {\n                    var _this = this;\n                    if (((level != null && level instanceof java.util.logging.Level) || level === null) && ((typeof msg === 'string') || msg === null) && ((thrown != null && thrown instanceof Error) || thrown === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            if (_this.isLoggable(level)) {\n                                var record = new java.util.logging.LogRecord(level, msg);\n                                record.setThrown(thrown);\n                                record.setLoggerName(_this.getName());\n                                _this.actuallyLog(record);\n                            }\n                        })();\n                    }\n                    else if (((level != null && level instanceof java.util.logging.LogRecord) || level === null) && msg === undefined && thrown === undefined) {\n                        return this.actuallyLog$java_util_logging_LogRecord(level);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                Logger.prototype.actuallyLog$java_util_logging_LogRecord = function (record) {\n                    if (this.isLoggable(record.getLevel())) {\n                        {\n                            var array181 = this.getHandlers();\n                            for (var index180 = 0; index180 < array181.length; index180++) {\n                                var handler = array181[index180];\n                                {\n                                    handler.publish(record);\n                                }\n                            }\n                        }\n                        var logger = this.getUseParentHandlers() ? this.getParent() : null;\n                        while ((logger != null)) {\n                            {\n                                var array183 = logger.getHandlers();\n                                for (var index182 = 0; index182 < array183.length; index182++) {\n                                    var handler = array183[index182];\n                                    {\n                                        handler.publish(record);\n                                    }\n                                }\n                            }\n                            logger = logger.getUseParentHandlers() ? logger.getParent() : null;\n                        }\n                        ;\n                    }\n                };\n                Logger.__static_initialized = false;\n                Logger.GLOBAL_LOGGER_NAME = \"global\";\n                return Logger;\n            }());\n            logging.Logger = Logger;\n            Logger[\"__class\"] = \"java.util.logging.Logger\";\n        })(logging = util.logging || (util.logging = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar javaemul;\n(function (javaemul) {\n    var internal;\n    (function (internal) {\n        /**\n         * A utility class that provides utility functions to do precondition checks inside GWT-SDK.\n         */\n        var InternalPreconditions = (function () {\n            function InternalPreconditions() {\n            }\n            InternalPreconditions.CHECKED_MODE_$LI$ = function () { if (InternalPreconditions.CHECKED_MODE == null)\n                InternalPreconditions.CHECKED_MODE = (java.lang.System.getProperty(\"jre.checkedMode\", \"ENABLED\") === \"ENABLED\"); return InternalPreconditions.CHECKED_MODE; };\n            ;\n            InternalPreconditions.TYPE_CHECK_$LI$ = function () { if (InternalPreconditions.TYPE_CHECK == null)\n                InternalPreconditions.TYPE_CHECK = (java.lang.System.getProperty(\"jre.checks.type\", \"ENABLED\") === \"ENABLED\"); return InternalPreconditions.TYPE_CHECK; };\n            ;\n            InternalPreconditions.API_CHECK_$LI$ = function () { if (InternalPreconditions.API_CHECK == null)\n                InternalPreconditions.API_CHECK = (java.lang.System.getProperty(\"jre.checks.api\", \"ENABLED\") === \"ENABLED\"); return InternalPreconditions.API_CHECK; };\n            ;\n            InternalPreconditions.BOUND_CHECK_$LI$ = function () { if (InternalPreconditions.BOUND_CHECK == null)\n                InternalPreconditions.BOUND_CHECK = (java.lang.System.getProperty(\"jre.checks.bounds\", \"ENABLED\") === \"ENABLED\"); return InternalPreconditions.BOUND_CHECK; };\n            ;\n            InternalPreconditions.checkType = function (expression) {\n                if (InternalPreconditions.TYPE_CHECK_$LI$()) {\n                    InternalPreconditions.checkCriticalType(expression);\n                }\n                else if (InternalPreconditions.CHECKED_MODE_$LI$()) {\n                    try {\n                        InternalPreconditions.checkCriticalType(expression);\n                    }\n                    catch (e) {\n                        throw new java.lang.AssertionError(e);\n                    }\n                    ;\n                }\n            };\n            InternalPreconditions.checkCriticalType = function (expression) {\n                if (!expression) {\n                    throw new java.lang.ClassCastException();\n                }\n            };\n            /**\n             * Ensures the truth of an expression that verifies array type.\n             */\n            InternalPreconditions.checkArrayType$boolean = function (expression) {\n                if (InternalPreconditions.TYPE_CHECK_$LI$()) {\n                    InternalPreconditions.checkCriticalArrayType(expression);\n                }\n                else if (InternalPreconditions.CHECKED_MODE_$LI$()) {\n                    try {\n                        InternalPreconditions.checkCriticalArrayType(expression);\n                    }\n                    catch (e) {\n                        throw new java.lang.AssertionError(e);\n                    }\n                    ;\n                }\n            };\n            InternalPreconditions.checkCriticalArrayType$boolean = function (expression) {\n                if (!expression) {\n                    throw new java.lang.ArrayStoreException();\n                }\n            };\n            /**\n             * Ensures the truth of an expression that verifies array type.\n             */\n            InternalPreconditions.checkArrayType = function (expression, errorMessage) {\n                if (((typeof expression === 'boolean') || expression === null) && ((errorMessage != null) || errorMessage === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (InternalPreconditions.TYPE_CHECK_$LI$()) {\n                            InternalPreconditions.checkCriticalArrayType(expression, errorMessage);\n                        }\n                        else if (InternalPreconditions.CHECKED_MODE_$LI$()) {\n                            try {\n                                InternalPreconditions.checkCriticalArrayType(expression, errorMessage);\n                            }\n                            catch (e) {\n                                throw new java.lang.AssertionError(e);\n                            }\n                            ;\n                        }\n                    })();\n                }\n                else if (((typeof expression === 'boolean') || expression === null) && errorMessage === undefined) {\n                    return javaemul.internal.InternalPreconditions.checkArrayType$boolean(expression);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            InternalPreconditions.checkCriticalArrayType = function (expression, errorMessage) {\n                if (((typeof expression === 'boolean') || expression === null) && ((errorMessage != null) || errorMessage === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (!expression) {\n                            throw new java.lang.ArrayStoreException(/* valueOf */ new String(errorMessage).toString());\n                        }\n                    })();\n                }\n                else if (((typeof expression === 'boolean') || expression === null) && errorMessage === undefined) {\n                    return javaemul.internal.InternalPreconditions.checkCriticalArrayType$boolean(expression);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Ensures the truth of an expression involving existence of an element.\n             */\n            InternalPreconditions.checkElement$boolean = function (expression) {\n                if (InternalPreconditions.API_CHECK_$LI$()) {\n                    InternalPreconditions.checkCriticalElement(expression);\n                }\n                else if (InternalPreconditions.CHECKED_MODE_$LI$()) {\n                    try {\n                        InternalPreconditions.checkCriticalElement(expression);\n                    }\n                    catch (e) {\n                        throw new java.lang.AssertionError(e);\n                    }\n                    ;\n                }\n            };\n            /**\n             * Ensures the truth of an expression involving existence of an element.\n             * <p>\n             * For cases where failing fast is pretty important and not failing early could cause bugs that\n             * are much harder to debug.\n             */\n            InternalPreconditions.checkCriticalElement$boolean = function (expression) {\n                if (!expression) {\n                    throw new java.util.NoSuchElementException();\n                }\n            };\n            /**\n             * Ensures the truth of an expression involving existence of an element.\n             */\n            InternalPreconditions.checkElement = function (expression, errorMessage) {\n                if (((typeof expression === 'boolean') || expression === null) && ((errorMessage != null) || errorMessage === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (InternalPreconditions.API_CHECK_$LI$()) {\n                            InternalPreconditions.checkCriticalElement(expression, errorMessage);\n                        }\n                        else if (InternalPreconditions.CHECKED_MODE_$LI$()) {\n                            try {\n                                InternalPreconditions.checkCriticalElement(expression, errorMessage);\n                            }\n                            catch (e) {\n                                throw new java.lang.AssertionError(e);\n                            }\n                            ;\n                        }\n                    })();\n                }\n                else if (((typeof expression === 'boolean') || expression === null) && errorMessage === undefined) {\n                    return javaemul.internal.InternalPreconditions.checkElement$boolean(expression);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Ensures the truth of an expression involving existence of an element.\n             * <p>\n             * For cases where failing fast is pretty important and not failing early could cause bugs that\n             * are much harder to debug.\n             */\n            InternalPreconditions.checkCriticalElement = function (expression, errorMessage) {\n                if (((typeof expression === 'boolean') || expression === null) && ((errorMessage != null) || errorMessage === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (!expression) {\n                            throw new java.util.NoSuchElementException(/* valueOf */ new String(errorMessage).toString());\n                        }\n                    })();\n                }\n                else if (((typeof expression === 'boolean') || expression === null) && errorMessage === undefined) {\n                    return javaemul.internal.InternalPreconditions.checkCriticalElement$boolean(expression);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Ensures the truth of an expression involving one or more parameters to the calling method.\n             */\n            InternalPreconditions.checkArgument$boolean = function (expression) {\n                if (InternalPreconditions.API_CHECK_$LI$()) {\n                    InternalPreconditions.checkCriticalArgument(expression);\n                }\n                else if (InternalPreconditions.CHECKED_MODE_$LI$()) {\n                    try {\n                        InternalPreconditions.checkCriticalArgument(expression);\n                    }\n                    catch (e) {\n                        throw new java.lang.AssertionError(e);\n                    }\n                    ;\n                }\n            };\n            /**\n             * Ensures the truth of an expression involving one or more parameters to the calling method.\n             * <p>\n             * For cases where failing fast is pretty important and not failing early could cause bugs that\n             * are much harder to debug.\n             */\n            InternalPreconditions.checkCriticalArgument$boolean = function (expression) {\n                if (!expression) {\n                    throw new java.lang.IllegalArgumentException();\n                }\n            };\n            /**\n             * Ensures the truth of an expression involving one or more parameters to the calling method.\n             */\n            InternalPreconditions.checkArgument$boolean$java_lang_Object = function (expression, errorMessage) {\n                if (InternalPreconditions.API_CHECK_$LI$()) {\n                    InternalPreconditions.checkCriticalArgument(expression, errorMessage);\n                }\n                else if (InternalPreconditions.CHECKED_MODE_$LI$()) {\n                    try {\n                        InternalPreconditions.checkCriticalArgument(expression, errorMessage);\n                    }\n                    catch (e) {\n                        throw new java.lang.AssertionError(e);\n                    }\n                    ;\n                }\n            };\n            /**\n             * Ensures the truth of an expression involving one or more parameters to the calling method.\n             * <p>\n             * For cases where failing fast is pretty important and not failing early could cause bugs that\n             * are much harder to debug.\n             */\n            InternalPreconditions.checkCriticalArgument$boolean$java_lang_Object = function (expression, errorMessage) {\n                if (!expression) {\n                    throw new java.lang.IllegalArgumentException(/* valueOf */ new String(errorMessage).toString());\n                }\n            };\n            /**\n             * Ensures the truth of an expression involving one or more parameters to the calling method.\n             */\n            InternalPreconditions.checkArgument = function (expression, errorMessageTemplate) {\n                var _this = this;\n                var errorMessageArgs = [];\n                for (var _i = 2; _i < arguments.length; _i++) {\n                    errorMessageArgs[_i - 2] = arguments[_i];\n                }\n                if (((typeof expression === 'boolean') || expression === null) && ((typeof errorMessageTemplate === 'string') || errorMessageTemplate === null) && ((errorMessageArgs != null && errorMessageArgs instanceof Array) || errorMessageArgs === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (InternalPreconditions.API_CHECK_$LI$()) {\n                            InternalPreconditions.checkCriticalArgument.apply(_this, [expression, errorMessageTemplate].concat(errorMessageArgs));\n                        }\n                        else if (InternalPreconditions.CHECKED_MODE_$LI$()) {\n                            try {\n                                InternalPreconditions.checkCriticalArgument.apply(_this, [expression, errorMessageTemplate].concat(errorMessageArgs));\n                            }\n                            catch (e) {\n                                throw new java.lang.AssertionError(e);\n                            }\n                            ;\n                        }\n                    })();\n                }\n                else if (((typeof expression === 'boolean') || expression === null) && ((errorMessageTemplate != null) || errorMessageTemplate === null) && errorMessageArgs === undefined) {\n                    return javaemul.internal.InternalPreconditions.checkArgument$boolean$java_lang_Object(expression, errorMessageTemplate);\n                }\n                else if (((typeof expression === 'boolean') || expression === null) && errorMessageTemplate === undefined && errorMessageArgs === undefined) {\n                    return javaemul.internal.InternalPreconditions.checkArgument$boolean(expression);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Ensures the truth of an expression involving one or more parameters to the calling method.\n             * <p>\n             * For cases where failing fast is pretty important and not failing early could cause bugs that\n             * are much harder to debug.\n             */\n            InternalPreconditions.checkCriticalArgument = function (expression, errorMessageTemplate) {\n                var _this = this;\n                var errorMessageArgs = [];\n                for (var _i = 2; _i < arguments.length; _i++) {\n                    errorMessageArgs[_i - 2] = arguments[_i];\n                }\n                if (((typeof expression === 'boolean') || expression === null) && ((typeof errorMessageTemplate === 'string') || errorMessageTemplate === null) && ((errorMessageArgs != null && errorMessageArgs instanceof Array) || errorMessageArgs === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (!expression) {\n                            throw new java.lang.IllegalArgumentException(InternalPreconditions.format.apply(_this, [errorMessageTemplate].concat(errorMessageArgs)));\n                        }\n                    })();\n                }\n                else if (((typeof expression === 'boolean') || expression === null) && ((errorMessageTemplate != null) || errorMessageTemplate === null) && errorMessageArgs === undefined) {\n                    return javaemul.internal.InternalPreconditions.checkCriticalArgument$boolean$java_lang_Object(expression, errorMessageTemplate);\n                }\n                else if (((typeof expression === 'boolean') || expression === null) && errorMessageTemplate === undefined && errorMessageArgs === undefined) {\n                    return javaemul.internal.InternalPreconditions.checkCriticalArgument$boolean(expression);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Ensures the truth of an expression involving the state of the calling instance, but not\n             * involving any parameters to the calling method.\n             *\n             * @param expression a boolean expression\n             * @throws IllegalStateException if {@code expression} is false\n             */\n            InternalPreconditions.checkState$boolean = function (expression) {\n                if (InternalPreconditions.API_CHECK_$LI$()) {\n                    InternalPreconditions.checkCritcalState(expression);\n                }\n                else if (InternalPreconditions.CHECKED_MODE_$LI$()) {\n                    try {\n                        InternalPreconditions.checkCritcalState(expression);\n                    }\n                    catch (e) {\n                        throw new java.lang.AssertionError(e);\n                    }\n                    ;\n                }\n            };\n            /**\n             * Ensures the truth of an expression involving the state of the calling instance, but not\n             * involving any parameters to the calling method.\n             * <p>\n             * For cases where failing fast is pretty important and not failing early could cause bugs that\n             * are much harder to debug.\n             */\n            InternalPreconditions.checkCritcalState = function (expression) {\n                if (!expression) {\n                    throw new java.lang.IllegalStateException();\n                }\n            };\n            /**\n             * Ensures the truth of an expression involving the state of the calling instance, but not\n             * involving any parameters to the calling method.\n             */\n            InternalPreconditions.checkState = function (expression, errorMessage) {\n                if (((typeof expression === 'boolean') || expression === null) && ((errorMessage != null) || errorMessage === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (InternalPreconditions.API_CHECK_$LI$()) {\n                            InternalPreconditions.checkCriticalState(expression, errorMessage);\n                        }\n                        else if (InternalPreconditions.CHECKED_MODE_$LI$()) {\n                            try {\n                                InternalPreconditions.checkCriticalState(expression, errorMessage);\n                            }\n                            catch (e) {\n                                throw new java.lang.AssertionError(e);\n                            }\n                            ;\n                        }\n                    })();\n                }\n                else if (((typeof expression === 'boolean') || expression === null) && errorMessage === undefined) {\n                    return javaemul.internal.InternalPreconditions.checkState$boolean(expression);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Ensures the truth of an expression involving the state of the calling instance, but not\n             * involving any parameters to the calling method.\n             */\n            InternalPreconditions.checkCriticalState = function (expression, errorMessage) {\n                if (!expression) {\n                    throw new java.lang.IllegalStateException(/* valueOf */ new String(errorMessage).toString());\n                }\n            };\n            /**\n             * Ensures that an object reference passed as a parameter to the calling method is not null.\n             */\n            InternalPreconditions.checkNotNull$java_lang_Object = function (reference) {\n                if (InternalPreconditions.API_CHECK_$LI$()) {\n                    InternalPreconditions.checkCriticalNotNull(reference);\n                }\n                else if (InternalPreconditions.CHECKED_MODE_$LI$()) {\n                    try {\n                        InternalPreconditions.checkCriticalNotNull(reference);\n                    }\n                    catch (e) {\n                        throw new java.lang.AssertionError(e);\n                    }\n                    ;\n                }\n                return reference;\n            };\n            InternalPreconditions.checkCriticalNotNull$java_lang_Object = function (reference) {\n                if (reference == null) {\n                    throw new java.lang.NullPointerException();\n                }\n                return reference;\n            };\n            /**\n             * Ensures that an object reference passed as a parameter to the calling method is not null.\n             */\n            InternalPreconditions.checkNotNull = function (reference, errorMessage) {\n                if (((reference != null) || reference === null) && ((errorMessage != null) || errorMessage === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (InternalPreconditions.API_CHECK_$LI$()) {\n                            InternalPreconditions.checkCriticalNotNull(reference, errorMessage);\n                        }\n                        else if (InternalPreconditions.CHECKED_MODE_$LI$()) {\n                            try {\n                                InternalPreconditions.checkCriticalNotNull(reference, errorMessage);\n                            }\n                            catch (e) {\n                                throw new java.lang.AssertionError(e);\n                            }\n                            ;\n                        }\n                    })();\n                }\n                else if (((reference != null) || reference === null) && errorMessage === undefined) {\n                    return javaemul.internal.InternalPreconditions.checkNotNull$java_lang_Object(reference);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            InternalPreconditions.checkCriticalNotNull = function (reference, errorMessage) {\n                if (((reference != null) || reference === null) && ((errorMessage != null) || errorMessage === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (reference == null) {\n                            throw new java.lang.NullPointerException(/* valueOf */ new String(errorMessage).toString());\n                        }\n                    })();\n                }\n                else if (((reference != null) || reference === null) && errorMessage === undefined) {\n                    return javaemul.internal.InternalPreconditions.checkCriticalNotNull$java_lang_Object(reference);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Ensures that {@code size} specifies a valid array size (i.e. non-negative).\n             */\n            InternalPreconditions.checkArraySize = function (size) {\n                if (InternalPreconditions.API_CHECK_$LI$()) {\n                    InternalPreconditions.checkCriticalArraySize(size);\n                }\n                else if (InternalPreconditions.CHECKED_MODE_$LI$()) {\n                    try {\n                        InternalPreconditions.checkCriticalArraySize(size);\n                    }\n                    catch (e) {\n                        throw new java.lang.AssertionError(e);\n                    }\n                    ;\n                }\n            };\n            InternalPreconditions.checkCriticalArraySize = function (size) {\n                if (size < 0) {\n                    throw new java.lang.NegativeArraySizeException(\"Negative array size: \" + size);\n                }\n            };\n            /**\n             * Ensures that {@code index} specifies a valid <i>element</i> in an array, list or string of size\n             * {@code size}. An element index may range from zero, inclusive, to {@code size}, exclusive.\n             */\n            InternalPreconditions.checkElementIndex = function (index, size) {\n                if (InternalPreconditions.BOUND_CHECK_$LI$()) {\n                    InternalPreconditions.checkCriticalElementIndex(index, size);\n                }\n                else if (InternalPreconditions.CHECKED_MODE_$LI$()) {\n                    try {\n                        InternalPreconditions.checkCriticalElementIndex(index, size);\n                    }\n                    catch (e) {\n                        throw new java.lang.AssertionError(e);\n                    }\n                    ;\n                }\n            };\n            InternalPreconditions.checkCriticalElementIndex = function (index, size) {\n                if (index < 0 || index >= size) {\n                    throw new java.lang.IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + size);\n                }\n            };\n            /**\n             * Ensures that {@code index} specifies a valid <i>position</i> in an array, list or string of\n             * size {@code size}. A position index may range from zero to {@code size}, inclusive.\n             */\n            InternalPreconditions.checkPositionIndex = function (index, size) {\n                if (InternalPreconditions.BOUND_CHECK_$LI$()) {\n                    InternalPreconditions.checkCriticalPositionIndex(index, size);\n                }\n                else if (InternalPreconditions.CHECKED_MODE_$LI$()) {\n                    try {\n                        InternalPreconditions.checkCriticalPositionIndex(index, size);\n                    }\n                    catch (e) {\n                        throw new java.lang.AssertionError(e);\n                    }\n                    ;\n                }\n            };\n            InternalPreconditions.checkCriticalPositionIndex = function (index, size) {\n                if (index < 0 || index > size) {\n                    throw new java.lang.IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + size);\n                }\n            };\n            /**\n             * Ensures that {@code start} and {@code end} specify a valid <i>positions</i> in an array, list\n             * or string of size {@code size}, and are in order. A position index may range from zero to\n             * {@code size}, inclusive.\n             */\n            InternalPreconditions.checkPositionIndexes = function (start, end, size) {\n                if (InternalPreconditions.BOUND_CHECK_$LI$()) {\n                    InternalPreconditions.checkCriticalPositionIndexes(start, end, size);\n                }\n                else if (InternalPreconditions.CHECKED_MODE_$LI$()) {\n                    try {\n                        InternalPreconditions.checkCriticalPositionIndexes(start, end, size);\n                    }\n                    catch (e) {\n                        throw new java.lang.AssertionError(e);\n                    }\n                    ;\n                }\n            };\n            /**\n             * Ensures that {@code start} and {@code end} specify a valid <i>positions</i> in an array, list\n             * or string of size {@code size}, and are in order. A position index may range from zero to\n             * {@code size}, inclusive.\n             */\n            InternalPreconditions.checkCriticalPositionIndexes = function (start, end, size) {\n                if (start < 0) {\n                    throw new java.lang.IndexOutOfBoundsException(\"fromIndex: \" + start + \" < 0\");\n                }\n                if (end > size) {\n                    throw new java.lang.IndexOutOfBoundsException(\"toIndex: \" + end + \" > size \" + size);\n                }\n                if (start > end) {\n                    throw new java.lang.IllegalArgumentException(\"fromIndex: \" + start + \" > toIndex: \" + end);\n                }\n            };\n            /**\n             * Checks that bounds are correct.\n             *\n             * @throw StringIndexOutOfBoundsException if the range is not legal\n             */\n            InternalPreconditions.checkStringBounds = function (start, end, size) {\n                if (start < 0) {\n                    throw new java.lang.StringIndexOutOfBoundsException(\"fromIndex: \" + start + \" < 0\");\n                }\n                if (end > size) {\n                    throw new java.lang.StringIndexOutOfBoundsException(\"toIndex: \" + end + \" > size \" + size);\n                }\n                if (end < start) {\n                    throw new java.lang.StringIndexOutOfBoundsException(\"fromIndex: \" + start + \" > toIndex: \" + end);\n                }\n            };\n            /**\n             * Substitutes each {@code %s} in {@code template} with an argument. These are matched by\n             * position: the first {@code %s} gets {@code args[0]}, etc.  If there are more arguments than\n             * placeholders, the unmatched arguments will be appended to the end of the formatted message in\n             * square braces.\n             */\n            InternalPreconditions.format = function (template) {\n                var args = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    args[_i - 1] = arguments[_i];\n                }\n                template = new String(template).toString();\n                var builder = new java.lang.StringBuilder(template.length + 16 * args.length);\n                var templateStart = 0;\n                var i = 0;\n                while ((i < args.length)) {\n                    var placeholderStart = template.indexOf(\"%s\", templateStart);\n                    if (placeholderStart === -1) {\n                        break;\n                    }\n                    builder.append(template.substring(templateStart, placeholderStart));\n                    builder.append(args[i++]);\n                    templateStart = placeholderStart + 2;\n                }\n                ;\n                builder.append(template.substring(templateStart));\n                if (i < args.length) {\n                    builder.append(\" [\");\n                    builder.append(args[i++]);\n                    while ((i < args.length)) {\n                        builder.append(\", \");\n                        builder.append(args[i++]);\n                    }\n                    ;\n                    builder.append(']');\n                }\n                return builder.toString();\n            };\n            return InternalPreconditions;\n        }());\n        internal.InternalPreconditions = InternalPreconditions;\n        InternalPreconditions[\"__class\"] = \"javaemul.internal.InternalPreconditions\";\n    })(internal = javaemul.internal || (javaemul.internal = {}));\n})(javaemul || (javaemul = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Implementation of Map interface based on a hash table. <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/HashMap.html\">[Sun\n         * docs]</a>\n         *\n         * @param <K> key type\n         * @param <V> value type\n         */\n        var HashMap = (function (_super) {\n            __extends(HashMap, _super);\n            function HashMap(ignored, alsoIgnored) {\n                if (((typeof ignored === 'number') || ignored === null) && ((typeof alsoIgnored === 'number') || alsoIgnored === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, ignored, alsoIgnored);\n                }\n                else if (((ignored != null && (ignored[\"__interfaces\"] != null && ignored[\"__interfaces\"].indexOf(\"java.util.Map\") >= 0 || ignored.constructor != null && ignored.constructor[\"__interfaces\"] != null && ignored.constructor[\"__interfaces\"].indexOf(\"java.util.Map\") >= 0)) || ignored === null) && alsoIgnored === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var toBeCopied = __args[0];\n                    _super.call(this, toBeCopied);\n                }\n                else if (((typeof ignored === 'number') || ignored === null) && alsoIgnored === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, ignored);\n                }\n                else if (ignored === undefined && alsoIgnored === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            HashMap.prototype.clone = function () {\n                return (new HashMap(this));\n            };\n            HashMap.prototype._equals = function (value1, value2) {\n                return java.util.Objects.equals(value1, value2);\n            };\n            HashMap.prototype.getHashCode = function (key) {\n                var hashCode = key.toString();\n                return javaemul.internal.Coercions.ensureInt(hashCode);\n            };\n            return HashMap;\n        }(java.util.AbstractHashMap));\n        util.HashMap = HashMap;\n        HashMap[\"__class\"] = \"java.util.HashMap\";\n        HashMap[\"__interfaces\"] = [\"java.lang.Cloneable\", \"java.util.Map\", \"java.io.Serializable\"];\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Map using reference equality on keys. <a\n         * href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/IdentityHashMap.html\">[Sun\n         * docs]</a>\n         *\n         * @param <K> key type\n         * @param <V> value type\n         */\n        var IdentityHashMap = (function (_super) {\n            __extends(IdentityHashMap, _super);\n            function IdentityHashMap(toBeCopied) {\n                if (((toBeCopied != null && (toBeCopied[\"__interfaces\"] != null && toBeCopied[\"__interfaces\"].indexOf(\"java.util.Map\") >= 0 || toBeCopied.constructor != null && toBeCopied.constructor[\"__interfaces\"] != null && toBeCopied.constructor[\"__interfaces\"].indexOf(\"java.util.Map\") >= 0)) || toBeCopied === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, toBeCopied);\n                }\n                else if (((typeof toBeCopied === 'number') || toBeCopied === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var ignored = __args[0];\n                    _super.call(this, ignored);\n                }\n                else if (toBeCopied === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            IdentityHashMap.prototype.clone = function () {\n                return (new IdentityHashMap(this));\n            };\n            IdentityHashMap.prototype.equals = function (obj) {\n                if (obj === this) {\n                    return true;\n                }\n                if (!(obj != null && (obj[\"__interfaces\"] != null && obj[\"__interfaces\"].indexOf(\"java.util.Map\") >= 0 || obj.constructor != null && obj.constructor[\"__interfaces\"] != null && obj.constructor[\"__interfaces\"].indexOf(\"java.util.Map\") >= 0))) {\n                    return false;\n                }\n                var otherMap = obj;\n                if (this.size() !== otherMap.size()) {\n                    return false;\n                }\n                for (var index184 = otherMap.entrySet().iterator(); index184.hasNext();) {\n                    var entry = index184.next();\n                    {\n                        var otherKey = entry.getKey();\n                        var otherValue = entry.getValue();\n                        if (!this.containsKey(otherKey)) {\n                            return false;\n                        }\n                        if (otherValue !== this.get(otherKey)) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            };\n            IdentityHashMap.prototype.hashCode = function () {\n                var hashCode = 0;\n                for (var index185 = this.entrySet().iterator(); index185.hasNext();) {\n                    var entry = index185.next();\n                    {\n                        hashCode += java.lang.System.identityHashCode(entry.getKey());\n                        hashCode += java.lang.System.identityHashCode(entry.getValue());\n                    }\n                }\n                return hashCode;\n            };\n            IdentityHashMap.prototype._equals = function (value1, value2) {\n                return value1 === value2;\n            };\n            IdentityHashMap.prototype.getHashCode = function (key) {\n                return javaemul.internal.HashCodes.getObjectIdentityHashCode(key);\n            };\n            return IdentityHashMap;\n        }(java.util.AbstractHashMap));\n        util.IdentityHashMap = IdentityHashMap;\n        IdentityHashMap[\"__class\"] = \"java.util.IdentityHashMap\";\n        IdentityHashMap[\"__interfaces\"] = [\"java.lang.Cloneable\", \"java.util.Map\", \"java.io.Serializable\"];\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Implements a TreeMap using a red-black tree. This guarantees O(log n)\n         * performance on lookups, inserts, and deletes while maintaining linear\n         * in-order traversal time. Null keys and values are fully supported if the\n         * comparator supports them (the default comparator does not).\n         *\n         * @param <K> key type\n         * @param <V> value type\n         */\n        var TreeMap = (function (_super) {\n            __extends(TreeMap, _super);\n            function TreeMap(c) {\n                var _this = this;\n                if (((c != null && (c[\"__interfaces\"] != null && c[\"__interfaces\"].indexOf(\"java.util.Comparator\") >= 0 || c.constructor != null && c.constructor[\"__interfaces\"] != null && c.constructor[\"__interfaces\"].indexOf(\"java.util.Comparator\") >= 0)) || c === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    this.__size = 0;\n                    (function () {\n                        _this.root = null;\n                        if (c == null) {\n                            c = java.util.Comparators.natural();\n                        }\n                        _this.cmp = c;\n                    })();\n                }\n                else if (((c != null && (c[\"__interfaces\"] != null && c[\"__interfaces\"].indexOf(\"java.util.SortedMap\") >= 0 || c.constructor != null && c.constructor[\"__interfaces\"] != null && c.constructor[\"__interfaces\"].indexOf(\"java.util.SortedMap\") >= 0)) || c === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var map_3 = __args[0];\n                    {\n                        var __args_22 = Array.prototype.slice.call(arguments);\n                        var c_8 = javaemul.internal.InternalPreconditions.checkNotNull(map_3).comparator();\n                        _super.call(this);\n                        this.__size = 0;\n                        (function () {\n                            _this.root = null;\n                            if (c_8 == null) {\n                                c_8 = java.util.Comparators.natural();\n                            }\n                            _this.cmp = c_8;\n                        })();\n                    }\n                    (function () {\n                        _this.putAll(map_3);\n                    })();\n                }\n                else if (((c != null && (c[\"__interfaces\"] != null && c[\"__interfaces\"].indexOf(\"java.util.Map\") >= 0 || c.constructor != null && c.constructor[\"__interfaces\"] != null && c.constructor[\"__interfaces\"].indexOf(\"java.util.Map\") >= 0)) || c === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var map_4 = __args[0];\n                    {\n                        var __args_23 = Array.prototype.slice.call(arguments);\n                        {\n                            var __args_24 = Array.prototype.slice.call(arguments);\n                            var c_9 = null;\n                            _super.call(this);\n                            this.__size = 0;\n                            (function () {\n                                _this.root = null;\n                                if (c_9 == null) {\n                                    c_9 = java.util.Comparators.natural();\n                                }\n                                _this.cmp = c_9;\n                            })();\n                        }\n                    }\n                    (function () {\n                        _this.putAll(map_4);\n                    })();\n                }\n                else if (c === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    {\n                        var __args_25 = Array.prototype.slice.call(arguments);\n                        var c_10 = null;\n                        _super.call(this);\n                        this.__size = 0;\n                        (function () {\n                            _this.root = null;\n                            if (c_10 == null) {\n                                c_10 = java.util.Comparators.natural();\n                            }\n                            _this.cmp = c_10;\n                        })();\n                    }\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            TreeMap.SubMapType_All_$LI$ = function () { if (TreeMap.SubMapType_All == null)\n                TreeMap.SubMapType_All = new TreeMap.SubMapType(); return TreeMap.SubMapType_All; };\n            ;\n            TreeMap.SubMapType_Head_$LI$ = function () { if (TreeMap.SubMapType_Head == null)\n                TreeMap.SubMapType_Head = new TreeMap.SubMapTypeHead(); return TreeMap.SubMapType_Head; };\n            ;\n            TreeMap.SubMapType_Range_$LI$ = function () { if (TreeMap.SubMapType_Range == null)\n                TreeMap.SubMapType_Range = new TreeMap.SubMapTypeRange(); return TreeMap.SubMapType_Range; };\n            ;\n            TreeMap.SubMapType_Tail_$LI$ = function () { if (TreeMap.SubMapType_Tail == null)\n                TreeMap.SubMapType_Tail = new TreeMap.SubMapTypeTail(); return TreeMap.SubMapType_Tail; };\n            ;\n            TreeMap.otherChild = function (child) {\n                return 1 - child;\n            };\n            TreeMap.prototype.clear = function () {\n                this.root = null;\n                this.__size = 0;\n            };\n            TreeMap.prototype.comparator = function () {\n                if (this.cmp === java.util.Comparators.natural()) {\n                    return null;\n                }\n                return this.cmp;\n            };\n            TreeMap.prototype.entrySet = function () {\n                return new TreeMap.EntrySet(this);\n            };\n            TreeMap.prototype.headMap = function (toKey, inclusive) {\n                var _this = this;\n                if (((toKey != null) || toKey === null) && ((typeof inclusive === 'boolean') || inclusive === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return new TreeMap.SubMap(_this, TreeMap.SubMapType_Head_$LI$(), null, false, toKey, inclusive);\n                    })();\n                }\n                else if (((toKey != null) || toKey === null) && inclusive === undefined) {\n                    return this.headMap$java_lang_Object(toKey);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            TreeMap.prototype.put = function (key, value) {\n                if (((key != null) || key === null) && ((value != null) || value === null)) {\n                    return this.put$java_lang_Object$java_lang_Object(key, value);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            TreeMap.prototype.put$java_lang_Object$java_lang_Object = function (key, value) {\n                var node = (new TreeMap.Node(key, value));\n                var state = (new TreeMap.State());\n                this.root = this.insert(this.root, node, state);\n                if (!state.found) {\n                    ++this.__size;\n                }\n                this.root.isRed = false;\n                return state.value;\n            };\n            TreeMap.prototype.remove = function (k) {\n                var key = k;\n                var state = (new TreeMap.State());\n                this.removeWithState(key, state);\n                return state.value;\n            };\n            TreeMap.prototype.size = function () {\n                return this.__size;\n            };\n            TreeMap.prototype.subMap = function (fromKey, fromInclusive, toKey, toInclusive) {\n                var _this = this;\n                if (((fromKey != null) || fromKey === null) && ((typeof fromInclusive === 'boolean') || fromInclusive === null) && ((toKey != null) || toKey === null) && ((typeof toInclusive === 'boolean') || toInclusive === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return new TreeMap.SubMap(_this, TreeMap.SubMapType_Range_$LI$(), fromKey, fromInclusive, toKey, toInclusive);\n                    })();\n                }\n                else if (((fromKey != null) || fromKey === null) && ((fromInclusive != null) || fromInclusive === null) && toKey === undefined && toInclusive === undefined) {\n                    return this.subMap$java_lang_Object$java_lang_Object(fromKey, fromInclusive);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            TreeMap.prototype.tailMap = function (fromKey, inclusive) {\n                var _this = this;\n                if (((fromKey != null) || fromKey === null) && ((typeof inclusive === 'boolean') || inclusive === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        return new TreeMap.SubMap(_this, TreeMap.SubMapType_Tail_$LI$(), fromKey, inclusive, null, false);\n                    })();\n                }\n                else if (((fromKey != null) || fromKey === null) && inclusive === undefined) {\n                    return this.tailMap$java_lang_Object(fromKey);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Returns the first node which compares greater than the given key.\n             *\n             * @param key the key to search for\n             * @return the next node, or null if there is none\n             */\n            TreeMap.prototype.getNodeAfter = function (key, inclusive) {\n                var foundNode = null;\n                var node = this.root;\n                while ((node != null)) {\n                    var c = this.cmp.compare(key, node.getKey());\n                    if (inclusive && c === 0) {\n                        return node;\n                    }\n                    if (c >= 0) {\n                        node = node.child[TreeMap.RIGHT];\n                    }\n                    else {\n                        foundNode = node;\n                        node = node.child[TreeMap.LEFT];\n                    }\n                }\n                ;\n                return foundNode;\n            };\n            /**\n             * Returns the last node which is strictly less than the given key.\n             *\n             * @param key the key to search for\n             * @return the previous node, or null if there is none\n             */\n            TreeMap.prototype.getNodeBefore = function (key, inclusive) {\n                var foundNode = null;\n                var node = this.root;\n                while ((node != null)) {\n                    var c = this.cmp.compare(key, node.getKey());\n                    if (inclusive && c === 0) {\n                        return node;\n                    }\n                    if (c <= 0) {\n                        node = node.child[TreeMap.LEFT];\n                    }\n                    else {\n                        foundNode = node;\n                        node = node.child[TreeMap.RIGHT];\n                    }\n                }\n                ;\n                return foundNode;\n            };\n            /**\n             * Used for testing. Validate that the tree meets all red-black correctness\n             * requirements. These include:\n             *\n             * <pre>\n             * - root is black\n             * - no children of a red node may be red\n             * - the black height of every path through the three to a leaf is exactly the same\n             * </pre>\n             *\n             * @throws RuntimeException if any correctness errors are detected.\n             */\n            TreeMap.prototype.assertCorrectness$ = function () {\n                this.assertCorrectness(this.root, true);\n            };\n            TreeMap.prototype.descendingEntryIterator = function () {\n                return new TreeMap.DescendingEntryIterator(this);\n            };\n            TreeMap.prototype.entryIterator = function () {\n                return new TreeMap.EntryIterator(this);\n            };\n            /**\n             * Internal helper function for public {@link #assertCorrectness()}.\n             *\n             * @param tree the subtree to validate.\n             * @param isRed true if the parent of this node is red.\n             * @return the black height of this subtree.\n             * @throws RuntimeException if this RB-tree is not valid.\n             */\n            TreeMap.prototype.assertCorrectness = function (tree, isRed) {\n                var _this = this;\n                if (((tree != null && tree instanceof java.util.TreeMap.Node) || tree === null) && ((typeof isRed === 'boolean') || isRed === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    return (function () {\n                        if (tree == null) {\n                            return 0;\n                        }\n                        if (isRed && tree.isRed) {\n                            throw new Error(\"Two red nodes adjacent\");\n                        }\n                        var leftNode = tree.child[TreeMap.LEFT];\n                        if (leftNode != null && _this.cmp.compare(leftNode.getKey(), tree.getKey()) > 0) {\n                            throw new Error(\"Left child \" + leftNode + \" larger than \" + tree);\n                        }\n                        var rightNode = tree.child[TreeMap.RIGHT];\n                        if (rightNode != null && _this.cmp.compare(rightNode.getKey(), tree.getKey()) < 0) {\n                            throw new Error(\"Right child \" + rightNode + \" smaller than \" + tree);\n                        }\n                        var leftHeight = _this.assertCorrectness(leftNode, tree.isRed);\n                        var rightHeight = _this.assertCorrectness(rightNode, tree.isRed);\n                        if (leftHeight !== 0 && rightHeight !== 0 && leftHeight !== rightHeight) {\n                            throw new Error(\"Black heights don\\'t match\");\n                        }\n                        return tree.isRed ? leftHeight : leftHeight + 1;\n                    })();\n                }\n                else if (tree === undefined && isRed === undefined) {\n                    return this.assertCorrectness$();\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            /**\n             * Finds an entry given a key and returns the node.\n             *\n             * @param key the search key\n             * @return the node matching the key or null\n             */\n            TreeMap.prototype.getEntry = function (key) {\n                var tree = this.root;\n                while ((tree != null)) {\n                    var c = this.cmp.compare(key, tree.getKey());\n                    if (c === 0) {\n                        return tree;\n                    }\n                    var childNum = c < 0 ? TreeMap.LEFT : TreeMap.RIGHT;\n                    tree = tree.child[childNum];\n                }\n                ;\n                return null;\n            };\n            /**\n             * Returns the left-most node of the tree, or null if empty.\n             */\n            TreeMap.prototype.getFirstEntry = function () {\n                if (this.root == null) {\n                    return null;\n                }\n                var node = this.root;\n                var nextNode;\n                while (((nextNode = node.child[TreeMap.LEFT]) != null)) {\n                    node = nextNode;\n                }\n                ;\n                return node;\n            };\n            /**\n             * Returns the right-most node of the tree, or null if empty.\n             */\n            TreeMap.prototype.getLastEntry = function () {\n                if (this.root == null) {\n                    return null;\n                }\n                var node = this.root;\n                var nextNode;\n                while (((nextNode = node.child[TreeMap.RIGHT]) != null)) {\n                    node = nextNode;\n                }\n                ;\n                return node;\n            };\n            TreeMap.prototype.getCeilingEntry = function (key) {\n                return this.getNodeAfter(key, true);\n            };\n            TreeMap.prototype.getFloorEntry = function (key) {\n                return this.getNodeBefore(key, true);\n            };\n            TreeMap.prototype.getHigherEntry = function (key) {\n                return this.getNodeAfter(key, false);\n            };\n            TreeMap.prototype.getLowerEntry = function (key) {\n                return this.getNodeBefore(key, false);\n            };\n            TreeMap.prototype.removeEntry = function (entry) {\n                var state = (new TreeMap.State());\n                state.matchValue = true;\n                state.value = entry.getValue();\n                return this.removeWithState(entry.getKey(), state);\n            };\n            TreeMap.prototype.inOrderAdd = function (list, type, current, fromKey, fromInclusive, toKey, toInclusive) {\n                if (current == null) {\n                    return;\n                }\n                var leftNode = current.child[TreeMap.LEFT];\n                if (leftNode != null) {\n                    this.inOrderAdd(list, type, leftNode, fromKey, fromInclusive, toKey, toInclusive);\n                }\n                if (this.inRange(type, current.getKey(), fromKey, fromInclusive, toKey, toInclusive)) {\n                    list.add(current);\n                }\n                var rightNode = current.child[TreeMap.RIGHT];\n                if (rightNode != null) {\n                    this.inOrderAdd(list, type, rightNode, fromKey, fromInclusive, toKey, toInclusive);\n                }\n            };\n            TreeMap.prototype.inRange = function (type, key, fromKey, fromInclusive, toKey, toInclusive) {\n                if (type.fromKeyValid() && this.smaller(key, fromKey, !fromInclusive)) {\n                    return false;\n                }\n                if (type.toKeyValid() && this.larger(key, toKey, !toInclusive)) {\n                    return false;\n                }\n                return true;\n            };\n            /**\n             * Insert a node into a subtree, collecting state about the insertion.\n             *\n             * If the same key already exists, the value of the node is overwritten with\n             * the value from the new node instead.\n             *\n             * @param tree subtree to insert into\n             * @param newNode new node to insert\n             * @param state result of the insertion: state.found true if the key already\n             * existed in the tree state.value the old value if the key existed\n             * @return the new subtree root\n             */\n            TreeMap.prototype.insert = function (tree, newNode, state) {\n                if (tree == null) {\n                    return newNode;\n                }\n                else {\n                    var c = this.cmp.compare(newNode.getKey(), tree.getKey());\n                    if (c === 0) {\n                        state.value = tree.setValue(newNode.getValue());\n                        state.found = true;\n                        return tree;\n                    }\n                    var childNum = c < 0 ? TreeMap.LEFT : TreeMap.RIGHT;\n                    tree.child[childNum] = this.insert(tree.child[childNum], newNode, state);\n                    if (this.isRed(tree.child[childNum])) {\n                        if (this.isRed(tree.child[TreeMap.otherChild(childNum)])) {\n                            tree.isRed = true;\n                            tree.child[TreeMap.LEFT].isRed = false;\n                            tree.child[TreeMap.RIGHT].isRed = false;\n                        }\n                        else {\n                            if (this.isRed(tree.child[childNum].child[childNum])) {\n                                tree = this.rotateSingle(tree, TreeMap.otherChild(childNum));\n                            }\n                            else if (this.isRed(tree.child[childNum].child[TreeMap.otherChild(childNum)])) {\n                                tree = this.rotateDouble(tree, TreeMap.otherChild(childNum));\n                            }\n                        }\n                    }\n                }\n                return tree;\n            };\n            /**\n             * Returns true if <code>node</code> is red. Note that null pointers are\n             * considered black.\n             */\n            TreeMap.prototype.isRed = function (node) {\n                return node != null && node.isRed;\n            };\n            /**\n             * Returns true if <code>a</code> is greater than or equal to <code>b</code>.\n             */\n            TreeMap.prototype.larger = function (a, b, orEqual) {\n                var compare = this.cmp.compare(a, b);\n                return compare > 0 || (orEqual && compare === 0);\n            };\n            /**\n             * Returns true if <code>a</code> is less than or equal to <code>b</code>.\n             */\n            TreeMap.prototype.smaller = function (a, b, orEqual) {\n                var compare = this.cmp.compare(a, b);\n                return compare < 0 || (orEqual && compare === 0);\n            };\n            /**\n             * Remove a key from the tree, returning whether it was found and its value.\n             *\n             * @param key key to remove\n             * @param state return state, not null\n             * @return true if the value was found\n             */\n            TreeMap.prototype.removeWithState = function (key, state) {\n                if (this.root == null) {\n                    return false;\n                }\n                var found = null;\n                var parent = null;\n                var head = (new TreeMap.Node(null, null));\n                var dir = TreeMap.RIGHT;\n                head.child[TreeMap.RIGHT] = this.root;\n                var node = head;\n                while ((node.child[dir] != null)) {\n                    var last = dir;\n                    var grandparent = parent;\n                    parent = node;\n                    node = node.child[dir];\n                    var c = this.cmp.compare(key, node.getKey());\n                    dir = c < 0 ? TreeMap.LEFT : TreeMap.RIGHT;\n                    if (c === 0 && (!state.matchValue || java.util.Objects.equals(node.getValue(), state.value))) {\n                        found = node;\n                    }\n                    if (!this.isRed(node) && !this.isRed(node.child[dir])) {\n                        if (this.isRed(node.child[TreeMap.otherChild(dir)])) {\n                            parent = parent.child[last] = this.rotateSingle(node, dir);\n                        }\n                        else if (!this.isRed(node.child[TreeMap.otherChild(dir)])) {\n                            var sibling = parent.child[TreeMap.otherChild(last)];\n                            if (sibling != null) {\n                                if (!this.isRed(sibling.child[TreeMap.otherChild(last)]) && !this.isRed(sibling.child[last])) {\n                                    parent.isRed = false;\n                                    sibling.isRed = true;\n                                    node.isRed = true;\n                                }\n                                else {\n                                    var dir2 = grandparent.child[TreeMap.RIGHT] === parent ? TreeMap.RIGHT : TreeMap.LEFT;\n                                    if (this.isRed(sibling.child[last])) {\n                                        grandparent.child[dir2] = this.rotateDouble(parent, last);\n                                    }\n                                    else if (this.isRed(sibling.child[TreeMap.otherChild(last)])) {\n                                        grandparent.child[dir2] = this.rotateSingle(parent, last);\n                                    }\n                                    node.isRed = grandparent.child[dir2].isRed = true;\n                                    grandparent.child[dir2].child[TreeMap.LEFT].isRed = false;\n                                    grandparent.child[dir2].child[TreeMap.RIGHT].isRed = false;\n                                }\n                            }\n                        }\n                    }\n                }\n                ;\n                if (found != null) {\n                    state.found = true;\n                    state.value = found.getValue();\n                    if (node !== found) {\n                        var newNode = (new TreeMap.Node(node.getKey(), node.getValue()));\n                        this.replaceNode(head, found, newNode);\n                        if (parent === found) {\n                            parent = newNode;\n                        }\n                    }\n                    parent.child[parent.child[TreeMap.RIGHT] === node ? TreeMap.RIGHT : TreeMap.LEFT] = node.child[node.child[TreeMap.LEFT] == null ? TreeMap.RIGHT : TreeMap.LEFT];\n                    this.__size--;\n                }\n                this.root = head.child[TreeMap.RIGHT];\n                if (this.root != null) {\n                    this.root.isRed = false;\n                }\n                return state.found;\n            };\n            /**\n             * replace 'node' with 'newNode' in the tree rooted at 'head'. Could have\n             * avoided this traversal if each node maintained a parent pointer.\n             */\n            TreeMap.prototype.replaceNode = function (head, node, newNode) {\n                var parent = head;\n                var direction = (parent.getKey() == null || this.cmp.compare(node.getKey(), parent.getKey()) > 0) ? TreeMap.RIGHT : TreeMap.LEFT;\n                while ((parent.child[direction] !== node)) {\n                    parent = parent.child[direction];\n                    direction = this.cmp.compare(node.getKey(), parent.getKey()) > 0 ? TreeMap.RIGHT : TreeMap.LEFT;\n                }\n                ;\n                parent.child[direction] = newNode;\n                newNode.isRed = node.isRed;\n                newNode.child[TreeMap.LEFT] = node.child[TreeMap.LEFT];\n                newNode.child[TreeMap.RIGHT] = node.child[TreeMap.RIGHT];\n                node.child[TreeMap.LEFT] = null;\n                node.child[TreeMap.RIGHT] = null;\n            };\n            /**\n             * Perform a double rotation, first rotating the child which will become the\n             * root in the opposite direction, then rotating the root in the specified\n             * direction.\n             *\n             * <pre>\n             * A                                               F\n             * B   C    becomes (with rotateDirection=0)       A   C\n             * D E F G                                         B E   G\n             * D\n             * </pre>\n             *\n             * @param tree root of the subtree to rotate\n             * @param rotateDirection the direction to rotate: 0=left, 1=right\n             * @return the new root of the rotated subtree\n             */\n            TreeMap.prototype.rotateDouble = function (tree, rotateDirection) {\n                var otherChildDir = TreeMap.otherChild(rotateDirection);\n                tree.child[otherChildDir] = this.rotateSingle(tree.child[otherChildDir], otherChildDir);\n                return this.rotateSingle(tree, rotateDirection);\n            };\n            /**\n             * Perform a single rotation, pushing the root of the subtree to the specified\n             * direction.\n             *\n             * <pre>\n             * A                                              B\n             * B   C     becomes (with rotateDirection=1)     D   A\n             * D E                                              E   C\n             * </pre>\n             *\n             * @param tree the root of the subtree to rotate\n             * @param rotateDirection the direction to rotate: 0=left rotation, 1=right\n             * @return the new root of the rotated subtree\n             */\n            TreeMap.prototype.rotateSingle = function (tree, rotateDirection) {\n                var otherChildDir = TreeMap.otherChild(rotateDirection);\n                var save = tree.child[otherChildDir];\n                tree.child[otherChildDir] = save.child[rotateDirection];\n                save.child[rotateDirection] = tree;\n                tree.isRed = true;\n                save.isRed = false;\n                return save;\n            };\n            TreeMap.LEFT = 0;\n            TreeMap.RIGHT = 1;\n            return TreeMap;\n        }(java.util.AbstractNavigableMap));\n        util.TreeMap = TreeMap;\n        TreeMap[\"__class\"] = \"java.util.TreeMap\";\n        TreeMap[\"__interfaces\"] = [\"java.util.Map\", \"java.util.NavigableMap\", \"java.util.SortedMap\", \"java.io.Serializable\"];\n        var TreeMap;\n        (function (TreeMap) {\n            /**\n             * Iterator for <code>descendingMap().entrySet()</code>.\n             */\n            var DescendingEntryIterator = (function () {\n                /**\n                 * Create an iterator which may return only a restricted range.\n                 *\n                 * @param fromKey the first key to return in the iterator.\n                 * @param toKey the upper bound of keys to return.\n                 */\n                function DescendingEntryIterator(__parent, type, fromKey, fromInclusive, toKey, toInclusive) {\n                    if (type === void 0) { type = java.util.TreeMap.SubMapType_All_$LI$(); }\n                    if (fromKey === void 0) { fromKey = null; }\n                    if (fromInclusive === void 0) { fromInclusive = false; }\n                    if (toKey === void 0) { toKey = null; }\n                    if (toInclusive === void 0) { toInclusive = false; }\n                    this.__parent = __parent;\n                    var list = (new java.util.ArrayList());\n                    this.__parent.inOrderAdd(list, type, this.__parent.root, fromKey, fromInclusive, toKey, toInclusive);\n                    this.iter = list.listIterator(list.size());\n                }\n                DescendingEntryIterator.prototype.forEachRemaining = function (consumer) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(consumer);\n                    while ((this.hasNext())) {\n                        consumer(this.next());\n                    }\n                    ;\n                };\n                DescendingEntryIterator.prototype.hasNext = function () {\n                    return this.iter.hasPrevious();\n                };\n                DescendingEntryIterator.prototype.next = function () {\n                    return this.last = this.iter.previous();\n                };\n                DescendingEntryIterator.prototype.remove = function () {\n                    this.iter.remove();\n                    this.__parent.removeEntry(this.last);\n                    this.last = null;\n                };\n                return DescendingEntryIterator;\n            }());\n            TreeMap.DescendingEntryIterator = DescendingEntryIterator;\n            DescendingEntryIterator[\"__class\"] = \"java.util.TreeMap.DescendingEntryIterator\";\n            DescendingEntryIterator[\"__interfaces\"] = [\"java.util.Iterator\"];\n            /**\n             * Iterator for <code>EntrySet</code>.\n             */\n            var EntryIterator = (function () {\n                /**\n                 * Create an iterator which may return only a restricted range.\n                 *\n                 * @param fromKey the first key to return in the iterator.\n                 * @param toKey the upper bound of keys to return.\n                 */\n                function EntryIterator(__parent, type, fromKey, fromInclusive, toKey, toInclusive) {\n                    if (type === void 0) { type = java.util.TreeMap.SubMapType_All_$LI$(); }\n                    if (fromKey === void 0) { fromKey = null; }\n                    if (fromInclusive === void 0) { fromInclusive = false; }\n                    if (toKey === void 0) { toKey = null; }\n                    if (toInclusive === void 0) { toInclusive = false; }\n                    this.__parent = __parent;\n                    var list = (new java.util.ArrayList());\n                    this.__parent.inOrderAdd(list, type, this.__parent.root, fromKey, fromInclusive, toKey, toInclusive);\n                    this.iter = list.listIterator();\n                }\n                EntryIterator.prototype.forEachRemaining = function (consumer) {\n                    javaemul.internal.InternalPreconditions.checkNotNull(consumer);\n                    while ((this.hasNext())) {\n                        consumer(this.next());\n                    }\n                    ;\n                };\n                EntryIterator.prototype.hasNext = function () {\n                    return this.iter.hasNext();\n                };\n                EntryIterator.prototype.next = function () {\n                    return this.last = this.iter.next();\n                };\n                EntryIterator.prototype.remove = function () {\n                    this.iter.remove();\n                    this.__parent.removeEntry(this.last);\n                    this.last = null;\n                };\n                return EntryIterator;\n            }());\n            TreeMap.EntryIterator = EntryIterator;\n            EntryIterator[\"__class\"] = \"java.util.TreeMap.EntryIterator\";\n            EntryIterator[\"__interfaces\"] = [\"java.util.Iterator\"];\n            var EntrySet = (function (_super) {\n                __extends(EntrySet, _super);\n                function EntrySet(__parent) {\n                    _super.call(this, __parent);\n                    this.__parent = __parent;\n                }\n                EntrySet.prototype.clear = function () {\n                    this.__parent.clear();\n                };\n                return EntrySet;\n            }(java.util.AbstractNavigableMap.EntrySet));\n            TreeMap.EntrySet = EntrySet;\n            EntrySet[\"__class\"] = \"java.util.TreeMap.EntrySet\";\n            EntrySet[\"__interfaces\"] = [\"java.util.Collection\", \"java.util.Set\", \"java.lang.Iterable\"];\n            /**\n             * Tree node.\n             *\n             * @param <K> key type\n             * @param <V> value type\n             */\n            var Node = (function (_super) {\n                __extends(Node, _super);\n                /**\n                 * Create a node of the specified color.\n                 *\n                 * @param key\n                 * @param value\n                 * @param isRed true if this should be a red node, false for black\n                 */\n                function Node(key, value, isRed) {\n                    if (isRed === void 0) { isRed = true; }\n                    _super.call(this, key, value);\n                    this.child = new Array(2);\n                    this.isRed = false;\n                    this.isRed = isRed;\n                }\n                return Node;\n            }(util.AbstractMap.SimpleEntry));\n            TreeMap.Node = Node;\n            Node[\"__class\"] = \"java.util.TreeMap.Node\";\n            Node[\"__interfaces\"] = [\"java.util.Map.Entry\"];\n            /**\n             * A state object which is passed down the tree for both insert and remove.\n             * All uses make use of the done flag to indicate when no further rebalancing\n             * of the tree is required. Remove methods use the found flag to indicate when\n             * the desired key has been found. value is used both to return the value of a\n             * removed node as well as to pass in a value which must match (used for\n             * entrySet().remove(entry)), and the matchValue flag is used to request this\n             * behavior.\n             *\n             * @param <V> value type\n             */\n            var State = (function () {\n                function State() {\n                    this.done = false;\n                    this.found = false;\n                    this.matchValue = false;\n                }\n                State.prototype.toString = function () {\n                    return \"State: mv=\" + this.matchValue + \" value=\" + this.value + \" done=\" + this.done + \" found=\" + this.found;\n                };\n                return State;\n            }());\n            TreeMap.State = State;\n            State[\"__class\"] = \"java.util.TreeMap.State\";\n            var SubMap = (function (_super) {\n                __extends(SubMap, _super);\n                function SubMap(__parent, type, fromKey, fromInclusive, toKey, toInclusive) {\n                    _super.call(this);\n                    this.__parent = __parent;\n                    this.fromInclusive = false;\n                    this.toInclusive = false;\n                    if (type === java.util.TreeMap.SubMapType_Range_$LI$()) {\n                        if (this.__parent.cmp.compare(toKey, fromKey) < 0) {\n                            throw new java.lang.IllegalArgumentException(\"subMap: \" + toKey + \" less than \" + fromKey);\n                        }\n                    }\n                    if (type === java.util.TreeMap.SubMapType_Head_$LI$()) {\n                        this.__parent.cmp.compare(toKey, toKey);\n                    }\n                    if (type === java.util.TreeMap.SubMapType_Tail_$LI$()) {\n                        this.__parent.cmp.compare(fromKey, fromKey);\n                    }\n                    if (type === java.util.TreeMap.SubMapType_All_$LI$()) {\n                    }\n                    this.type = type;\n                    this.fromKey = fromKey;\n                    this.fromInclusive = fromInclusive;\n                    this.toKey = toKey;\n                    this.toInclusive = toInclusive;\n                }\n                SubMap.prototype.comparator = function () {\n                    return this.__parent.comparator();\n                };\n                SubMap.prototype.entrySet = function () {\n                    return new SubMap.SubMap$0(this);\n                };\n                SubMap.prototype.headMap = function (toKey, toInclusive) {\n                    var _this = this;\n                    if (((toKey != null) || toKey === null) && ((typeof toInclusive === 'boolean') || toInclusive === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            if (_this.type.toKeyValid() && _this.__parent.cmp.compare(toKey, _this.toKey) > 0) {\n                                throw new java.lang.IllegalArgumentException(\"subMap: \" + toKey + \" greater than \" + _this.toKey);\n                            }\n                            if (_this.type.fromKeyValid()) {\n                                return _this.__parent.subMap(_this.fromKey, _this.fromInclusive, toKey, toInclusive);\n                            }\n                            else {\n                                return _this.__parent.headMap(toKey, toInclusive);\n                            }\n                        })();\n                    }\n                    else if (((toKey != null) || toKey === null) && toInclusive === undefined) {\n                        return this.headMap$java_lang_Object(toKey);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                SubMap.prototype.isEmpty = function () {\n                    return this.getFirstEntry() == null;\n                };\n                SubMap.prototype.put = function (key, value) {\n                    if (((key != null) || key === null) && ((value != null) || value === null)) {\n                        return this.put$java_lang_Object$java_lang_Object(key, value);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                SubMap.prototype.put$java_lang_Object$java_lang_Object = function (key, value) {\n                    if (!this.inRange(key)) {\n                        throw new java.lang.IllegalArgumentException(key + \" outside the range \" + this.fromKey + \" to \" + this.toKey);\n                    }\n                    return this.__parent.put(key, value);\n                };\n                SubMap.prototype.remove = function (k) {\n                    var key = k;\n                    if (!this.inRange(key)) {\n                        return null;\n                    }\n                    return this.__parent.remove(key);\n                };\n                SubMap.prototype.size = function () {\n                    var count = 0;\n                    for (var it = this.entryIterator(); it.hasNext(); it.next()) {\n                        count++;\n                    }\n                    return count;\n                };\n                SubMap.prototype.subMap = function (newFromKey, newFromInclusive, newToKey, newToInclusive) {\n                    var _this = this;\n                    if (((newFromKey != null) || newFromKey === null) && ((typeof newFromInclusive === 'boolean') || newFromInclusive === null) && ((newToKey != null) || newToKey === null) && ((typeof newToInclusive === 'boolean') || newToInclusive === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            if (_this.type.fromKeyValid() && _this.__parent.cmp.compare(newFromKey, _this.fromKey) < 0) {\n                                throw new java.lang.IllegalArgumentException(\"subMap: \" + newFromKey + \" less than \" + _this.fromKey);\n                            }\n                            if (_this.type.toKeyValid() && _this.__parent.cmp.compare(newToKey, _this.toKey) > 0) {\n                                throw new java.lang.IllegalArgumentException(\"subMap: \" + newToKey + \" greater than \" + _this.toKey);\n                            }\n                            return _this.__parent.subMap(newFromKey, newFromInclusive, newToKey, newToInclusive);\n                        })();\n                    }\n                    else if (((newFromKey != null) || newFromKey === null) && ((newFromInclusive != null) || newFromInclusive === null) && newToKey === undefined && newToInclusive === undefined) {\n                        return this.subMap$java_lang_Object$java_lang_Object(newFromKey, newFromInclusive);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                SubMap.prototype.tailMap = function (fromKey, fromInclusive) {\n                    var _this = this;\n                    if (((fromKey != null) || fromKey === null) && ((typeof fromInclusive === 'boolean') || fromInclusive === null)) {\n                        var __args = Array.prototype.slice.call(arguments);\n                        return (function () {\n                            if (_this.type.fromKeyValid() && _this.__parent.cmp.compare(fromKey, _this.fromKey) < 0) {\n                                throw new java.lang.IllegalArgumentException(\"subMap: \" + fromKey + \" less than \" + _this.fromKey);\n                            }\n                            if (_this.type.toKeyValid()) {\n                                return _this.__parent.subMap(fromKey, fromInclusive, _this.toKey, _this.toInclusive);\n                            }\n                            else {\n                                return _this.__parent.tailMap(fromKey, fromInclusive);\n                            }\n                        })();\n                    }\n                    else if (((fromKey != null) || fromKey === null) && fromInclusive === undefined) {\n                        return this.tailMap$java_lang_Object(fromKey);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                SubMap.prototype.descendingEntryIterator = function () {\n                    return new TreeMap.DescendingEntryIterator(this.__parent, this.type, this.fromKey, this.fromInclusive, this.toKey, this.toInclusive);\n                };\n                SubMap.prototype.entryIterator = function () {\n                    return new TreeMap.EntryIterator(this.__parent, this.type, this.fromKey, this.fromInclusive, this.toKey, this.toInclusive);\n                };\n                SubMap.prototype.getEntry = function (key) {\n                    return this.guardInRange(this.__parent.getEntry(key));\n                };\n                SubMap.prototype.getFirstEntry = function () {\n                    var entry;\n                    if (this.type.fromKeyValid()) {\n                        if (this.fromInclusive) {\n                            entry = this.__parent.getCeilingEntry(this.fromKey);\n                        }\n                        else {\n                            entry = this.__parent.getHigherEntry(this.fromKey);\n                        }\n                    }\n                    else {\n                        entry = this.__parent.getFirstEntry();\n                    }\n                    return this.guardInRange(entry);\n                };\n                SubMap.prototype.getLastEntry = function () {\n                    var entry;\n                    if (this.type.toKeyValid()) {\n                        if (this.toInclusive) {\n                            entry = this.__parent.getFloorEntry(this.toKey);\n                        }\n                        else {\n                            entry = this.__parent.getLowerEntry(this.toKey);\n                        }\n                    }\n                    else {\n                        entry = this.__parent.getLastEntry();\n                    }\n                    return this.guardInRange(entry);\n                };\n                SubMap.prototype.getCeilingEntry = function (key) {\n                    return this.guardInRange(this.__parent.getCeilingEntry(key));\n                };\n                SubMap.prototype.getFloorEntry = function (key) {\n                    return this.guardInRange(this.__parent.getFloorEntry(key));\n                };\n                SubMap.prototype.getHigherEntry = function (key) {\n                    return this.guardInRange(this.__parent.getHigherEntry(key));\n                };\n                SubMap.prototype.getLowerEntry = function (key) {\n                    return this.guardInRange(this.__parent.getLowerEntry(key));\n                };\n                SubMap.prototype.removeEntry = function (entry) {\n                    return this.inRange(entry.getKey()) && this.__parent.removeEntry(entry);\n                };\n                SubMap.prototype.guardInRange = function (entry) {\n                    return entry != null && this.inRange(entry.getKey()) ? entry : null;\n                };\n                SubMap.prototype.inRange = function (key) {\n                    return this.__parent.inRange(this.type, key, this.fromKey, this.fromInclusive, this.toKey, this.toInclusive);\n                };\n                return SubMap;\n            }(java.util.AbstractNavigableMap));\n            TreeMap.SubMap = SubMap;\n            SubMap[\"__class\"] = \"java.util.TreeMap.SubMap\";\n            SubMap[\"__interfaces\"] = [\"java.util.Map\", \"java.util.NavigableMap\", \"java.util.SortedMap\"];\n            var SubMap;\n            (function (SubMap) {\n                var SubMap$0 = (function (_super) {\n                    __extends(SubMap$0, _super);\n                    function SubMap$0(__parent) {\n                        _super.call(this, __parent);\n                        this.__parent = __parent;\n                    }\n                    SubMap$0.prototype.isEmpty = function () {\n                        return this.__parent.isEmpty();\n                    };\n                    return SubMap$0;\n                }(TreeMap.SubMap.EntrySet));\n                SubMap.SubMap$0 = SubMap$0;\n            })(SubMap = TreeMap.SubMap || (TreeMap.SubMap = {}));\n            var SubMapType = (function () {\n                function SubMapType() {\n                }\n                /**\n                 * Returns true if this submap type uses a from-key.\n                 */\n                SubMapType.prototype.fromKeyValid = function () {\n                    return false;\n                };\n                /**\n                 * Returns true if this submap type uses a to-key.\n                 */\n                SubMapType.prototype.toKeyValid = function () {\n                    return false;\n                };\n                return SubMapType;\n            }());\n            TreeMap.SubMapType = SubMapType;\n            SubMapType[\"__class\"] = \"java.util.TreeMap.SubMapType\";\n            var SubMapTypeHead = (function (_super) {\n                __extends(SubMapTypeHead, _super);\n                function SubMapTypeHead() {\n                    _super.apply(this, arguments);\n                }\n                SubMapTypeHead.prototype.toKeyValid = function () {\n                    return true;\n                };\n                return SubMapTypeHead;\n            }(TreeMap.SubMapType));\n            TreeMap.SubMapTypeHead = SubMapTypeHead;\n            SubMapTypeHead[\"__class\"] = \"java.util.TreeMap.SubMapTypeHead\";\n            var SubMapTypeRange = (function (_super) {\n                __extends(SubMapTypeRange, _super);\n                function SubMapTypeRange() {\n                    _super.apply(this, arguments);\n                }\n                SubMapTypeRange.prototype.fromKeyValid = function () {\n                    return true;\n                };\n                SubMapTypeRange.prototype.toKeyValid = function () {\n                    return true;\n                };\n                return SubMapTypeRange;\n            }(TreeMap.SubMapType));\n            TreeMap.SubMapTypeRange = SubMapTypeRange;\n            SubMapTypeRange[\"__class\"] = \"java.util.TreeMap.SubMapTypeRange\";\n            var SubMapTypeTail = (function (_super) {\n                __extends(SubMapTypeTail, _super);\n                function SubMapTypeTail() {\n                    _super.apply(this, arguments);\n                }\n                SubMapTypeTail.prototype.fromKeyValid = function () {\n                    return true;\n                };\n                return SubMapTypeTail;\n            }(TreeMap.SubMapType));\n            TreeMap.SubMapTypeTail = SubMapTypeTail;\n            SubMapTypeTail[\"__class\"] = \"java.util.TreeMap.SubMapTypeTail\";\n        })(TreeMap = util.TreeMap || (util.TreeMap = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        var Hashtable = (function (_super) {\n            __extends(Hashtable, _super);\n            function Hashtable(ignored, alsoIgnored) {\n                if (((typeof ignored === 'number') || ignored === null) && ((typeof alsoIgnored === 'number') || alsoIgnored === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, ignored, alsoIgnored);\n                }\n                else if (((ignored != null && (ignored[\"__interfaces\"] != null && ignored[\"__interfaces\"].indexOf(\"java.util.Map\") >= 0 || ignored.constructor != null && ignored.constructor[\"__interfaces\"] != null && ignored.constructor[\"__interfaces\"].indexOf(\"java.util.Map\") >= 0)) || ignored === null) && alsoIgnored === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var toBeCopied = __args[0];\n                    _super.call(this, toBeCopied);\n                }\n                else if (((typeof ignored === 'number') || ignored === null) && alsoIgnored === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, ignored);\n                }\n                else if (ignored === undefined && alsoIgnored === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            Hashtable.prototype.keys = function () {\n                var it = this.keySet().iterator();\n                return new Hashtable.Hashtable$0(this, it);\n            };\n            Hashtable.prototype.elements = function () {\n                var it = this.values().iterator();\n                return new Hashtable.Hashtable$1(this, it);\n            };\n            Hashtable.serialVersionUID = 1;\n            return Hashtable;\n        }(java.util.HashMap));\n        util.Hashtable = Hashtable;\n        Hashtable[\"__class\"] = \"java.util.Hashtable\";\n        Hashtable[\"__interfaces\"] = [\"java.lang.Cloneable\", \"java.util.Map\", \"java.util.Dictionary\", \"java.io.Serializable\"];\n        var Hashtable;\n        (function (Hashtable) {\n            var Hashtable$0 = (function () {\n                function Hashtable$0(__parent, it) {\n                    this.it = it;\n                    this.__parent = __parent;\n                }\n                Hashtable$0.prototype.hasMoreElements = function () {\n                    return this.it.hasNext();\n                };\n                Hashtable$0.prototype.nextElement = function () {\n                    return this.it.next();\n                };\n                return Hashtable$0;\n            }());\n            Hashtable.Hashtable$0 = Hashtable$0;\n            var Hashtable$1 = (function () {\n                function Hashtable$1(__parent, it) {\n                    this.it = it;\n                    this.__parent = __parent;\n                }\n                Hashtable$1.prototype.hasMoreElements = function () {\n                    return this.it.hasNext();\n                };\n                Hashtable$1.prototype.nextElement = function () {\n                    return this.it.next();\n                };\n                return Hashtable$1;\n            }());\n            Hashtable.Hashtable$1 = Hashtable$1;\n        })(Hashtable = util.Hashtable || (util.Hashtable = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\n/* Generated from Java with JSweet 1.2.0-SNAPSHOT - http://www.jsweet.org */\nvar java;\n(function (java) {\n    var util;\n    (function (util) {\n        /**\n         * Hash table implementation of the Map interface with predictable iteration\n         * order. <a href=\n         * \"http://java.sun.com/j2se/1.5.0/docs/api/java/util/LinkedHashMap.html\">[Sun\n         * docs]</a>\n         *\n         * @param <K>\n         * key type.\n         * @param <V>\n         * value type.\n         */\n        var LinkedHashMap = (function (_super) {\n            __extends(LinkedHashMap, _super);\n            function LinkedHashMap(ignored, alsoIgnored, accessOrder) {\n                var _this = this;\n                if (((typeof ignored === 'number') || ignored === null) && ((typeof alsoIgnored === 'number') || alsoIgnored === null) && ((typeof accessOrder === 'boolean') || accessOrder === null)) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, ignored, alsoIgnored);\n                    this.accessOrder = false;\n                    (function () {\n                        _this.head = new LinkedHashMap.ChainEntry(_this);\n                        _this.map = (new java.util.HashMap());\n                        _this.accessOrder = accessOrder;\n                        _this.resetChainEntries();\n                    })();\n                }\n                else if (((typeof ignored === 'number') || ignored === null) && ((typeof alsoIgnored === 'number') || alsoIgnored === null) && accessOrder === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this, ignored, alsoIgnored);\n                    this.accessOrder = false;\n                    (function () {\n                        _this.head = new LinkedHashMap.ChainEntry(_this);\n                        _this.map = (new java.util.HashMap());\n                        _this.resetChainEntries();\n                    })();\n                }\n                else if (((ignored != null && (ignored[\"__interfaces\"] != null && ignored[\"__interfaces\"].indexOf(\"java.util.Map\") >= 0 || ignored.constructor != null && ignored.constructor[\"__interfaces\"] != null && ignored.constructor[\"__interfaces\"].indexOf(\"java.util.Map\") >= 0)) || ignored === null) && alsoIgnored === undefined && accessOrder === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    var toBeCopied_2 = __args[0];\n                    _super.call(this);\n                    this.accessOrder = false;\n                    (function () {\n                        _this.head = new LinkedHashMap.ChainEntry(_this);\n                        _this.map = (new java.util.HashMap());\n                        _this.resetChainEntries();\n                        _this.putAll(toBeCopied_2);\n                    })();\n                }\n                else if (((typeof ignored === 'number') || ignored === null) && alsoIgnored === undefined && accessOrder === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    {\n                        var __args_26 = Array.prototype.slice.call(arguments);\n                        var alsoIgnored_2 = 0;\n                        _super.call(this, ignored, alsoIgnored_2);\n                        this.accessOrder = false;\n                        (function () {\n                            _this.head = new LinkedHashMap.ChainEntry(_this);\n                            _this.map = (new java.util.HashMap());\n                            _this.resetChainEntries();\n                        })();\n                    }\n                }\n                else if (ignored === undefined && alsoIgnored === undefined && accessOrder === undefined) {\n                    var __args = Array.prototype.slice.call(arguments);\n                    _super.call(this);\n                    this.accessOrder = false;\n                    (function () {\n                        _this.head = new LinkedHashMap.ChainEntry(_this);\n                        _this.map = (new java.util.HashMap());\n                        _this.resetChainEntries();\n                    })();\n                }\n                else\n                    throw new Error('invalid overload');\n            }\n            LinkedHashMap.prototype.clear = function () {\n                this.map.clear();\n                this.resetChainEntries();\n            };\n            LinkedHashMap.prototype.resetChainEntries = function () {\n                this.head.prev = this.head;\n                this.head.next = this.head;\n            };\n            LinkedHashMap.prototype.clone = function () {\n                return (new LinkedHashMap(this));\n            };\n            LinkedHashMap.prototype.containsKey = function (key) {\n                return this.map.containsKey(key);\n            };\n            LinkedHashMap.prototype.containsValue = function (value) {\n                var node = this.head.next;\n                while ((node !== this.head)) {\n                    if (java.util.Objects.equals(node.getValue(), value)) {\n                        return true;\n                    }\n                    node = node.next;\n                }\n                ;\n                return false;\n            };\n            LinkedHashMap.prototype.entrySet = function () {\n                return new LinkedHashMap.EntrySet(this);\n            };\n            LinkedHashMap.prototype.get = function (key) {\n                var entry = this.map.get(key);\n                if (entry != null) {\n                    this.recordAccess(entry);\n                    return entry.getValue();\n                }\n                return null;\n            };\n            LinkedHashMap.prototype.put = function (key, value) {\n                if (((key != null) || key === null) && ((value != null) || value === null)) {\n                    return this.put$java_lang_Object$java_lang_Object(key, value);\n                }\n                else\n                    throw new Error('invalid overload');\n            };\n            LinkedHashMap.prototype.put$java_lang_Object$java_lang_Object = function (key, value) {\n                var old = this.map.get(key);\n                if (old == null) {\n                    var newEntry = new LinkedHashMap.ChainEntry(this, key, value);\n                    this.map.put(key, newEntry);\n                    newEntry.addToEnd();\n                    var eldest = this.head.next;\n                    if (this.removeEldestEntry(eldest)) {\n                        eldest.remove();\n                        this.map.remove(eldest.getKey());\n                    }\n                    return null;\n                }\n                else {\n                    var oldValue = old.setValue(value);\n                    this.recordAccess(old);\n                    return oldValue;\n                }\n            };\n            LinkedHashMap.prototype.remove = function (key) {\n                var entry = this.map.remove(key);\n                if (entry != null) {\n                    entry.remove();\n                    return entry.getValue();\n                }\n                return null;\n            };\n            LinkedHashMap.prototype.size = function () {\n                return this.map.size();\n            };\n            LinkedHashMap.prototype.removeEldestEntry = function (eldest) {\n                return false;\n            };\n            LinkedHashMap.prototype.recordAccess = function (entry) {\n                if (this.accessOrder) {\n                    entry.remove();\n                    entry.addToEnd();\n                }\n            };\n            return LinkedHashMap;\n        }(java.util.HashMap));\n        util.LinkedHashMap = LinkedHashMap;\n        LinkedHashMap[\"__class\"] = \"java.util.LinkedHashMap\";\n        LinkedHashMap[\"__interfaces\"] = [\"java.lang.Cloneable\", \"java.util.Map\", \"java.io.Serializable\"];\n        var LinkedHashMap;\n        (function (LinkedHashMap) {\n            /**\n             * The entry we use includes next/prev pointers for a doubly-linked circular\n             * list with a head node. This reduces the special cases we have to deal\n             * with in the list operations.\n             *\n             * Note that we duplicate the key from the underlying hash map so we can\n             * find the eldest entry. The alternative would have been to modify HashMap\n             * so more of the code was directly usable here, but this would have added\n             * some overhead to HashMap, or to reimplement most of the HashMap code here\n             * with small modifications. Paying a small storage cost only if you use\n             * LinkedHashMap and minimizing code size seemed like a better tradeoff\n             */\n            var ChainEntry = (function (_super) {\n                __extends(ChainEntry, _super);\n                function ChainEntry(__parent, key, value) {\n                    if (key === void 0) { key = null; }\n                    if (value === void 0) { value = null; }\n                    _super.call(this, key, value);\n                    this.__parent = __parent;\n                }\n                /**\n                 * Add this node to the end of the chain.\n                 */\n                ChainEntry.prototype.addToEnd = function () {\n                    var tail = this.__parent.head.prev;\n                    this.prev = tail;\n                    this.next = this.__parent.head;\n                    tail.next = this.__parent.head.prev = this;\n                };\n                /**\n                 * Remove this node from any list it may be a part of.\n                 */\n                ChainEntry.prototype.remove = function () {\n                    this.next.prev = this.prev;\n                    this.prev.next = this.next;\n                    this.next = this.prev = null;\n                };\n                return ChainEntry;\n            }(util.AbstractMap.SimpleEntry));\n            LinkedHashMap.ChainEntry = ChainEntry;\n            ChainEntry[\"__class\"] = \"java.util.LinkedHashMap.ChainEntry\";\n            ChainEntry[\"__interfaces\"] = [\"java.util.Map.Entry\"];\n            var EntrySet = (function (_super) {\n                __extends(EntrySet, _super);\n                function EntrySet(__parent) {\n                    _super.call(this);\n                    this.__parent = __parent;\n                }\n                EntrySet.prototype.clear = function () {\n                    this.__parent.clear();\n                };\n                EntrySet.prototype.contains = function (o) {\n                    if (o != null && (o[\"__interfaces\"] != null && o[\"__interfaces\"].indexOf(\"java.util.Map.Entry\") >= 0 || o.constructor != null && o.constructor[\"__interfaces\"] != null && o.constructor[\"__interfaces\"].indexOf(\"java.util.Map.Entry\") >= 0)) {\n                        return this.__parent.containsEntry(o);\n                    }\n                    return false;\n                };\n                EntrySet.prototype.iterator = function () {\n                    return new EntrySet.EntryIterator(this);\n                };\n                EntrySet.prototype.remove = function (index) {\n                    if (((index != null) || index === null)) {\n                        return this.remove$java_lang_Object(index);\n                    }\n                    else\n                        throw new Error('invalid overload');\n                };\n                EntrySet.prototype.remove$java_lang_Object = function (entry) {\n                    if (this.contains(entry)) {\n                        var key = entry.getKey();\n                        this.__parent.remove(key);\n                        return true;\n                    }\n                    return false;\n                };\n                EntrySet.prototype.size = function () {\n                    return this.__parent.size();\n                };\n                return EntrySet;\n            }(java.util.AbstractSet));\n            LinkedHashMap.EntrySet = EntrySet;\n            EntrySet[\"__class\"] = \"java.util.LinkedHashMap.EntrySet\";\n            EntrySet[\"__interfaces\"] = [\"java.util.Collection\", \"java.util.Set\", \"java.lang.Iterable\"];\n            var EntrySet;\n            (function (EntrySet) {\n                var EntryIterator = (function () {\n                    function EntryIterator(__parent) {\n                        this.__parent = __parent;\n                        this.__next = this.__parent.__parent.head.next;\n                        java.util.ConcurrentModificationDetector.recordLastKnownStructure(this.__parent.__parent.map, this);\n                    }\n                    EntryIterator.prototype.forEachRemaining = function (consumer) {\n                        javaemul.internal.InternalPreconditions.checkNotNull(consumer);\n                        while ((this.hasNext())) {\n                            consumer(this.next());\n                        }\n                        ;\n                    };\n                    EntryIterator.prototype.hasNext = function () {\n                        return this.__next !== this.__parent.__parent.head;\n                    };\n                    EntryIterator.prototype.next = function () {\n                        java.util.ConcurrentModificationDetector.checkStructuralChange(this.__parent.__parent.map, this);\n                        javaemul.internal.InternalPreconditions.checkCriticalElement(this.hasNext());\n                        this.last = this.__next;\n                        this.__next = this.__next.next;\n                        return this.last;\n                    };\n                    EntryIterator.prototype.remove = function () {\n                        javaemul.internal.InternalPreconditions.checkState(this.last != null);\n                        java.util.ConcurrentModificationDetector.checkStructuralChange(this.__parent.__parent.map, this);\n                        this.last.remove();\n                        this.__parent.__parent.map.remove(this.last.getKey());\n                        java.util.ConcurrentModificationDetector.recordLastKnownStructure(this.__parent.__parent.map, this);\n                        this.last = null;\n                    };\n                    return EntryIterator;\n                }());\n                EntrySet.EntryIterator = EntryIterator;\n                EntryIterator[\"__class\"] = \"java.util.LinkedHashMap.EntrySet.EntryIterator\";\n                EntryIterator[\"__interfaces\"] = [\"java.util.Iterator\"];\n            })(EntrySet = LinkedHashMap.EntrySet || (LinkedHashMap.EntrySet = {}));\n        })(LinkedHashMap = util.LinkedHashMap || (util.LinkedHashMap = {}));\n    })(util = java.util || (java.util = {}));\n})(java || (java = {}));\njava.util.TreeMap.SubMapType_Tail_$LI$();\njava.util.TreeMap.SubMapType_Range_$LI$();\njava.util.TreeMap.SubMapType_Head_$LI$();\njava.util.TreeMap.SubMapType_All_$LI$();\njavaemul.internal.InternalPreconditions.BOUND_CHECK_$LI$();\njavaemul.internal.InternalPreconditions.API_CHECK_$LI$();\njavaemul.internal.InternalPreconditions.TYPE_CHECK_$LI$();\njavaemul.internal.InternalPreconditions.CHECKED_MODE_$LI$();\njava.util.logging.Logger.LOGGING_FALSE_$LI$();\njava.util.logging.Logger.LOGGING_SEVERE_$LI$();\njava.util.logging.Logger.LOGGING_WARNING_$LI$();\njava.util.logging.Logger.LOGGING_ENABLED_$LI$();\njava.util.logging.Logger.__static_initialize();\njava.util.ConcurrentModificationDetector.API_CHECK_$LI$();\njava.util.Collections.RandomHolder.rnd_$LI$();\njava.util.Collections.ReverseComparator.INSTANCE_$LI$();\njava.util.Collections.EmptyListIterator.INSTANCE_$LI$();\njava.util.Collections.EMPTY_SET_$LI$();\njava.util.Collections.EMPTY_MAP_$LI$();\njava.util.Collections.EMPTY_LIST_$LI$();\njava.lang.System.out_$LI$();\njava.lang.System.err_$LI$();\njava.nio.charset.StandardCharsets.UTF_8_$LI$();\njava.nio.charset.StandardCharsets.ISO_8859_1_$LI$();\njavaemul.internal.ShortHelper.BoxedValues.boxedValues_$LI$();\njavaemul.internal.ShortHelper.TYPE_$LI$();\njavaemul.internal.ShortHelper.MAX_VALUE_$LI$();\njavaemul.internal.ShortHelper.MIN_VALUE_$LI$();\njavaemul.internal.LongHelper.BoxedValues.boxedValues_$LI$();\njavaemul.internal.IntegerHelper.ReverseNibbles.reverseNibbles_$LI$();\njavaemul.internal.IntegerHelper.BoxedValues.boxedValues_$LI$();\njavaemul.internal.FloatHelper.POSITIVE_INFINITY_$LI$();\njavaemul.internal.FloatHelper.NEGATIVE_INFINITY_$LI$();\njavaemul.internal.FloatHelper.NaN_$LI$();\njavaemul.internal.DoubleHelper.PowersTable.invPowers_$LI$();\njavaemul.internal.DoubleHelper.PowersTable.powers_$LI$();\njavaemul.internal.DoubleHelper.POSITIVE_INFINITY_$LI$();\njavaemul.internal.DoubleHelper.NEGATIVE_INFINITY_$LI$();\njavaemul.internal.DoubleHelper.NaN_$LI$();\njavaemul.internal.ByteHelper.BoxedValues.boxedValues_$LI$();\njavaemul.internal.ByteHelper.TYPE_$LI$();\njavaemul.internal.ByteHelper.MAX_VALUE_$LI$();\njavaemul.internal.ByteHelper.MIN_VALUE_$LI$();\njavaemul.internal.StringHelper.CASE_INSENSITIVE_ORDER_$LI$();\njava.security.MessageDigest.Md5Digest.padding_$LI$();\njavaemul.internal.EmulatedCharset.ISO_8859_1_$LI$();\njavaemul.internal.EmulatedCharset.ISO_LATIN_1_$LI$();\njavaemul.internal.EmulatedCharset.UTF_8_$LI$();\njavaemul.internal.StringHashCache.front_$LI$();\njavaemul.internal.StringHashCache.back_$LI$();\njavaemul.internal.NumberHelper.__ParseLong.maxValueForRadix_$LI$();\njavaemul.internal.NumberHelper.__ParseLong.maxLengthForRadix_$LI$();\njavaemul.internal.NumberHelper.__ParseLong.maxDigitsRadixPower_$LI$();\njavaemul.internal.NumberHelper.__ParseLong.maxDigitsForRadix_$LI$();\njavaemul.internal.NumberHelper.__ParseLong.__static_initialize();\njavaemul.internal.MathHelper.PI_UNDER_180_$LI$();\njavaemul.internal.MathHelper.PI_OVER_180_$LI$();\njavaemul.internal.MathHelper.MIN_VALUE_$LI$();\njavaemul.internal.MathHelper.MAX_VALUE_$LI$();\njavaemul.internal.MathHelper.EPSILON_$LI$();\njavaemul.internal.JreHelper.LOG10E_$LI$();\njavaemul.internal.CharacterHelper.BoxedValues.boxedValues_$LI$();\njavaemul.internal.CharacterHelper.TYPE_$LI$();\njavaemul.internal.BooleanHelper.TYPE_$LI$();\njava.util.Random.twoToTheXMinus48_$LI$();\njava.util.Random.twoToTheXMinus24_$LI$();\njava.util.Random.__static_initialize();\njava.util.OptionalLong.EMPTY_$LI$();\njava.util.OptionalInt.EMPTY_$LI$();\njava.util.OptionalDouble.EMPTY_$LI$();\njava.util.Optional.EMPTY_$LI$();\njava.util.logging.Level.WARNING_$LI$();\njava.util.logging.Level.SEVERE_$LI$();\njava.util.logging.Level.OFF_$LI$();\njava.util.logging.Level.INFO_$LI$();\njava.util.logging.Level.FINEST_$LI$();\njava.util.logging.Level.FINER_$LI$();\njava.util.logging.Level.FINE_$LI$();\njava.util.logging.Level.CONFIG_$LI$();\njava.util.logging.Level.ALL_$LI$();\njava.util.Locale.defaultLocale_$LI$();\njava.util.Locale.US_$LI$();\njava.util.Locale.ENGLISH_$LI$();\njava.util.Locale.ROOT_$LI$();\njava.util.InternalJsMapFactory.jsMapCtor_$LI$();\njava.util.Date.StringData.MONTHS_$LI$();\njava.util.Date.StringData.DAYS_$LI$();\njava.util.Date.ONE_HOUR_IN_MILLISECONDS_$LI$();\njava.util.Comparators.NATURAL_$LI$();\njava.lang.Class.classes_$LI$();\njava.lang.Class.constructors_$LI$();\n"

/***/ }),

/***/ 278:
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
module.exports = function(src) {
	if (typeof execScript !== "undefined")
		execScript(src);
	else
		eval.call(null, src);
}


/***/ }),

/***/ 284:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(136);


/***/ })

},[284]);
//# sourceMappingURL=scripts.bundle.js.map